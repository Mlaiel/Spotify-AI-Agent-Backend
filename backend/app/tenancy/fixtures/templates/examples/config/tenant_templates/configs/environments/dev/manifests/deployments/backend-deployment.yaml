# Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spotify-ai-agent-backend
  namespace: spotify-ai-agent-dev
  labels:
    app.kubernetes.io/name: spotify-ai-agent
    app.kubernetes.io/instance: dev
    app.kubernetes.io/version: v1.0.0
    app.kubernetes.io/component: backend-api
    app.kubernetes.io/part-of: spotify-ai-agent
    app.kubernetes.io/managed-by: helm
    environment: development
    team: spotify-ai-agent-dev
  annotations:
    deployment.kubernetes.io/revision: "1"
    created-by: "Fahed Mlaiel Development Team"
    description: "Main backend API deployment for Spotify AI Agent"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: spotify-ai-agent-backend
      environment: development
  template:
    metadata:
      labels:
        app: spotify-ai-agent-backend
        app.kubernetes.io/name: spotify-ai-agent
        app.kubernetes.io/instance: dev
        app.kubernetes.io/version: v1.0.0
        app.kubernetes.io/component: backend-api
        environment: development
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: spotify-ai-agent-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: backend
        image: spotify-ai-agent/backend:dev-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 9000
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "development"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: SPOTIFY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: spotify-credentials
              key: client_id
        - name: SPOTIFY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: spotify-credentials
              key: client_secret
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secrets
              key: secret_key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-credentials
              key: openai_api_key
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: monitoring-credentials
              key: sentry_dsn
              optional: true
        envFrom:
        - configMapRef:
            name: spotify-ai-agent-config
        - configMapRef:
            name: ml-model-config
        - configMapRef:
            name: feature-flags-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /startup
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: ml-models
          mountPath: /app/models
          readOnly: true
        - name: temp-storage
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-config
        configMap:
          name: spotify-ai-agent-config
          defaultMode: 0644
      - name: ml-models
        persistentVolumeClaim:
          claimName: ml-models-pvc
      - name: temp-storage
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        persistentVolumeClaim:
          claimName: logs-pvc
      - name: cache
        emptyDir:
          sizeLimit: 2Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: spotify-ai-agent-backend
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - general-purpose
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
