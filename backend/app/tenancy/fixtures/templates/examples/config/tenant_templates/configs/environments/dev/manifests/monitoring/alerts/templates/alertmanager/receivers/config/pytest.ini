# Configuration pytest pour le module Alertmanager Receivers Config Ultra-Avancé
# Author: Spotify AI Agent Team - Fahed Mlaiel

[tool:pytest]
# Répertoires de tests
testpaths = tests

# Pattern de découverte des fichiers de tests
python_files = test_*.py *_test.py

# Pattern de découverte des classes de tests
python_classes = Test* *Test

# Pattern de découverte des fonctions de tests
python_functions = test_*

# Marques (markers) personnalisées
markers =
    unit: Tests unitaires rapides
    integration: Tests d'intégration avec dépendances externes
    performance: Tests de performance et de charge
    security: Tests de sécurité et de vulnérabilités
    slow: Tests lents qui peuvent être ignorés en développement
    redis: Tests nécessitant Redis
    postgres: Tests nécessitant PostgreSQL
    docker: Tests nécessitant Docker
    ml: Tests des fonctionnalités Machine Learning
    compliance: Tests de conformité réglementaire
    tenant: Tests multi-tenant
    api: Tests de l'API REST
    config: Tests de configuration
    encryption: Tests de chiffrement
    monitoring: Tests de monitoring et métriques
    
# Options par défaut
addopts = 
    --strict-markers
    --disable-warnings
    --tb=short
    --show-capture=no
    -ra
    --cov=.
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --durations=10
    --maxfail=5

# Configuration de la couverture de code
[coverage:run]
source = .
omit = 
    */venv/*
    */tests/*
    */migrations/*
    */docs/*
    setup.py
    conftest.py
    __pycache__/*
    *.pyc

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:

[coverage:html]
directory = htmlcov

# Configuration pour les tests de performance
[benchmark]
min_rounds = 5
max_time = 5.0
min_time = 0.005
sort = mean
histogram = true
save_data = true
compare_fail = mean:5%

# Configuration mypy pour les tests
[mypy]
python_version = 3.11
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Configuration isort
[isort]
profile = black
multi_line_output = 3
line_length = 120
known_first_party = alertmanager_receivers_config
known_third_party = 
    pytest
    asyncio
    aiofiles
    pydantic
    structlog
    prometheus_client
    redis
    sqlalchemy
    cryptography

# Configuration black
[black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Configuration flake8
[flake8]
max-line-length = 120
max-complexity = 12
ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long
    W503,  # line break before binary operator
    F401,  # imported but unused
    E402,  # module level import not at top
exclude = 
    .git,
    __pycache__,
    .pytest_cache,
    .mypy_cache,
    build,
    dist,
    *.egg-info,
    venv,
    migrations

per-file-ignores =
    __init__.py:F401,F403
    tests/*:S101,S106
    conftest.py:E402

# Configuration bandit pour la sécurité
[bandit]
exclude_dirs = tests,venv,migrations
skips = B101,B601

# Configuration safety
[safety]
ignore = 
    # Ignorer les vulnérabilités de développement uniquement
    39462,  # PyYAML
    
# Variables d'environnement pour les tests
[env]
TESTING = true
LOG_LEVEL = DEBUG
DATABASE_URL = sqlite:///test.db
REDIS_URL = redis://localhost:6379/15
DISABLE_AUTH = true
SECRET_KEY = test-secret-key-not-for-production
