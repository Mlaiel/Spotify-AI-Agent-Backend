"""
API REST FastAPI pour Gestion des Fixtures Slack
================================================

API compl√®te pour la gestion des fixtures d'alertes Slack dans
l'environnement multi-tenant avec authentification, validation,
monitoring et documentation automatique.

Endpoints:
- CRUD complet pour les fixtures
- Rendu de templates en temps r√©el
- Gestion des locales et environnements
- M√©triques et health checks
- API de test et validation

Auteur: Fahed Mlaiel - Lead Developer Achiri
Version: 2.5.0
"""

from fastapi import FastAPI, HTTPException, Depends, status, Query, Path, Body
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse
from fastapi.openapi.docs import get_swagger_ui_html
from fastapi.openapi.utils import get_openapi

import asyncio
import json
import logging
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional, Union
from contextlib import asynccontextmanager
import os
from pathlib import Path

from pydantic import BaseModel, Field, validator
import prometheus_client
from prometheus_client import CONTENT_TYPE_LATEST
from starlette.responses import Response
import structlog

# Import des modules locaux
from manager import SlackFixtureManager, Environment, Locale, FixtureConfigModel, FixtureMetadata
from utils import SlackAlertValidator, SlackMetricsCollector
from defaults import get_template_by_locale_and_type

# Configuration du logging structur√©
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()

# Configuration globale
API_VERSION = "2.5.0"
API_TITLE = "Spotify AI Agent - Slack Fixtures API"
API_DESCRIPTION = """
API avanc√©e pour la gestion des fixtures d'alertes Slack dans l'architecture multi-tenant.

## Fonctionnalit√©s

- **Gestion compl√®te des fixtures**: CRUD avec validation avanc√©e
- **Multi-tenant**: Support complet de l'isolation par tenant
- **Internationalisation**: Support des locales fr, en, de, es, it
- **Templates dynamiques**: Rendu Jinja2 avec contexte enrichi
- **S√©curit√©**: Authentification JWT et validation stricte
- **Monitoring**: M√©triques Prometheus int√©gr√©es
- **Documentation**: OpenAPI 3.0 avec exemples complets

## Architecture

D√©velopp√© par **Fahed Mlaiel** - Lead Developer Achiri
- üèóÔ∏è Lead Dev + Architecte IA
- üêç D√©veloppeur Backend Senior (Python/FastAPI/Django)
- ü§ñ Ing√©nieur Machine Learning (TensorFlow/PyTorch/Hugging Face)
- üóÑÔ∏è DBA & Data Engineer (PostgreSQL/Redis/MongoDB)
- üîí Sp√©cialiste S√©curit√© Backend
- ‚ö° Architecte Microservices
"""

# Mod√®les Pydantic pour l'API
class FixtureRequest(BaseModel):
    """Mod√®le de requ√™te pour cr√©er/modifier une fixture."""
    tenant_id: str = Field(..., description="ID du tenant", min_length=3, max_length=50)
    environment: Environment = Field(..., description="Environnement de d√©ploiement")
    locale: Locale = Field(..., description="Locale pour l'internationalisation")
    alert_type: str = Field(..., description="Type d'alerte", min_length=3, max_length=50)
    template: Dict[str, Any] = Field(..., description="Template Slack")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict, description="M√©tadonn√©es additionnelles")
    
    @validator('alert_type')
    def validate_alert_type(cls, v):
        if not v.replace('_', '').isalnum():
            raise ValueError('alert_type doit contenir uniquement des lettres, chiffres et underscores')
        return v

class FixtureResponse(BaseModel):
    """Mod√®le de r√©ponse pour une fixture."""
    id: str
    tenant_id: str
    environment: str
    locale: str
    alert_type: str
    template: Dict[str, Any]
    metadata: Dict[str, Any]
    version: str
    created_at: datetime
    updated_at: datetime
    hash: str

class RenderRequest(BaseModel):
    """Mod√®le de requ√™te pour le rendu de template."""
    context: Dict[str, Any] = Field(..., description="Contexte pour le rendu du template")
    
    class Config:
        schema_extra = {
            "example": {
                "context": {
                    "alert": {
                        "severity": "critical",
                        "summary": "CPU usage > 90%",
                        "description": "High CPU usage detected on server-01",
                        "timestamp": 1641024000
                    },
                    "tenant": {
                        "name": "Spotify Production",
                        "id": "spotify-tenant-01"
                    },
                    "environment": "prod"
                }
            }
        }

class HealthResponse(BaseModel):
    """Mod√®le de r√©ponse pour le health check."""
    status: str
    timestamp: str
    components: Dict[str, str]
    version: str

class MetricsResponse(BaseModel):
    """Mod√®le de r√©ponse pour les m√©triques."""
    fixtures_count: int
    cache_hit_rate: float
    avg_render_time: float
    last_update: str

# Gestionnaire global
fixture_manager: Optional[SlackFixtureManager] = None
metrics_collector: Optional[SlackMetricsCollector] = None
validator: Optional[SlackAlertValidator] = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire de cycle de vie de l'application."""
    global fixture_manager, metrics_collector, validator
    
    logger.info("Initialisation de l'API Slack Fixtures", version=API_VERSION)
    
    # Configuration depuis les variables d'environnement
    config = {
        'database': {
            'host': os.getenv('DB_HOST', 'localhost'),
            'port': int(os.getenv('DB_PORT', 5432)),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('POSTGRES_PASSWORD', ''),
            'name': os.getenv('DB_NAME', 'spotify_ai_dev')
        },
        'redis': {
            'host': os.getenv('REDIS_HOST', 'localhost'),
            'port': int(os.getenv('REDIS_PORT', 6379)),
            'password': os.getenv('REDIS_PASSWORD', '')
        },
        'security': {
            'encryption_key': os.getenv('ENCRYPTION_KEY', '').encode() or None
        }
    }
    
    # Initialisation des services
    fixture_manager = SlackFixtureManager(config)
    await fixture_manager.initialize()
    
    metrics_collector = SlackMetricsCollector()
    await metrics_collector.initialize()
    
    validator = SlackAlertValidator()
    
    logger.info("Services initialis√©s avec succ√®s")
    
    yield
    
    # Nettoyage
    if fixture_manager:
        await fixture_manager.cleanup()
    
    logger.info("Application ferm√©e proprement")

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title=API_TITLE,
    description=API_DESCRIPTION,
    version=API_VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # √Ä restreindre en production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(GZipMiddleware, minimum_size=1000)

# S√©curit√©
security = HTTPBearer()

async def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """V√©rifie le token JWT."""
    # Impl√©mentation simplifi√©e - √† am√©liorer avec une vraie validation JWT
    if not credentials.credentials or credentials.credentials == "invalid":
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token invalide",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return credentials.credentials

# Endpoints

@app.get("/", summary="Informations sur l'API")
async def root():
    """Retourne les informations de base sur l'API."""
    return {
        "name": API_TITLE,
        "version": API_VERSION,
        "description": "API pour la gestion des fixtures d'alertes Slack",
        "author": "Fahed Mlaiel - Lead Developer Achiri",
        "endpoints": {
            "docs": "/docs",
            "health": "/health",
            "metrics": "/metrics"
        },
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

@app.get("/health", response_model=HealthResponse, summary="Health Check")
async def health_check():
    """V√©rifie la sant√© de l'API et de ses d√©pendances."""
    health = await fixture_manager.health_check()
    
    return HealthResponse(
        status=health['status'],
        timestamp=health['timestamp'],
        components=health['components'],
        version=API_VERSION
    )

@app.get("/metrics", summary="M√©triques Prometheus")
async def get_metrics():
    """Retourne les m√©triques au format Prometheus."""
    return Response(
        prometheus_client.generate_latest(),
        media_type=CONTENT_TYPE_LATEST
    )

@app.post("/fixtures", response_model=FixtureResponse, summary="Cr√©er une fixture")
async def create_fixture(
    request: FixtureRequest,
    token: str = Depends(verify_token)
):
    """
    Cr√©e une nouvelle fixture d'alerte Slack.
    
    - **tenant_id**: Identifiant unique du tenant
    - **environment**: Environnement de d√©ploiement (dev/staging/prod)
    - **locale**: Locale pour l'internationalisation
    - **alert_type**: Type d'alerte unique
    - **template**: Template Slack au format JSON
    - **metadata**: M√©tadonn√©es optionnelles
    """
    logger.info("Cr√©ation de fixture", 
                tenant_id=request.tenant_id, 
                alert_type=request.alert_type)
    
    # Validation du template
    is_valid, errors = validator.validate_template(request.template)
    if not is_valid:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Template invalide: {'; '.join(errors)}"
        )
    
    try:
        # Cr√©ation de la configuration de fixture
        from manager import SlackTemplateModel
        
        fixture_config = FixtureConfigModel(
            metadata=request.metadata,
            template=SlackTemplateModel(**request.template)
        )
        
        # Sauvegarde
        fixture_id = await fixture_manager.save_fixture(
            tenant_id=request.tenant_id,
            environment=request.environment,
            locale=request.locale,
            alert_type=request.alert_type,
            config=fixture_config
        )
        
        # Rechargement pour r√©cup√©rer les m√©tadonn√©es compl√®tes
        saved_fixture = await fixture_manager.load_fixture(
            tenant_id=request.tenant_id,
            environment=request.environment,
            locale=request.locale,
            alert_type=request.alert_type
        )
        
        metrics_collector.record_alert_sent(
            request.tenant_id, request.environment.value, 
            request.locale.value, request.alert_type, "info"
        )
        
        # R√©cup√©ration des m√©tadonn√©es depuis la base
        fixtures_list = await fixture_manager.list_fixtures(
            tenant_id=request.tenant_id,
            environment=request.environment
        )
        
        # Recherche de la fixture cr√©√©e
        created_fixture = next(
            (f for f in fixtures_list if f.alert_type == request.alert_type and f.locale == request.locale),
            None
        )
        
        if not created_fixture:
            raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration de la fixture cr√©√©e")
        
        return FixtureResponse(
            id=created_fixture.id,
            tenant_id=created_fixture.tenant_id,
            environment=created_fixture.environment.value,
            locale=created_fixture.locale.value,
            alert_type=created_fixture.alert_type,
            template=request.template,
            metadata=request.metadata,
            version=created_fixture.version,
            created_at=created_fixture.created_at,
            updated_at=created_fixture.updated_at,
            hash=created_fixture.hash
        )
        
    except Exception as e:
        logger.error("Erreur lors de la cr√©ation de fixture", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur interne: {str(e)}"
        )

@app.get("/fixtures/{tenant_id}", response_model=List[FixtureResponse], summary="Lister les fixtures")
async def list_fixtures(
    tenant_id: str = Path(..., description="ID du tenant"),
    environment: Optional[Environment] = Query(None, description="Filtrer par environnement"),
    locale: Optional[Locale] = Query(None, description="Filtrer par locale"),
    token: str = Depends(verify_token)
):
    """
    Liste toutes les fixtures pour un tenant donn√©.
    
    Filtres optionnels:
    - **environment**: Filtrer par environnement
    - **locale**: Filtrer par locale
    """
    logger.info("Liste des fixtures", tenant_id=tenant_id)
    
    try:
        fixtures = await fixture_manager.list_fixtures(
            tenant_id=tenant_id,
            environment=environment,
            locale=locale
        )
        
        # Conversion en r√©ponses API
        result = []
        for fixture in fixtures:
            # Chargement du template complet
            full_fixture = await fixture_manager.load_fixture(
                tenant_id=fixture.tenant_id,
                environment=fixture.environment,
                locale=fixture.locale,
                alert_type=fixture.alert_type
            )
            
            if full_fixture:
                result.append(FixtureResponse(
                    id=fixture.id,
                    tenant_id=fixture.tenant_id,
                    environment=fixture.environment.value,
                    locale=fixture.locale.value,
                    alert_type=fixture.alert_type,
                    template=full_fixture.template.dict(),
                    metadata=full_fixture.metadata,
                    version=fixture.version,
                    created_at=fixture.created_at,
                    updated_at=fixture.updated_at,
                    hash=fixture.hash
                ))
        
        return result
        
    except Exception as e:
        logger.error("Erreur lors de la liste des fixtures", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur interne: {str(e)}"
        )

@app.get("/fixtures/{tenant_id}/{environment}/{locale}/{alert_type}", 
         response_model=FixtureResponse, 
         summary="R√©cup√©rer une fixture")
async def get_fixture(
    tenant_id: str = Path(..., description="ID du tenant"),
    environment: Environment = Path(..., description="Environnement"),
    locale: Locale = Path(..., description="Locale"),
    alert_type: str = Path(..., description="Type d'alerte"),
    token: str = Depends(verify_token)
):
    """
    R√©cup√®re une fixture sp√©cifique par ses identifiants.
    """
    logger.info("R√©cup√©ration de fixture", 
                tenant_id=tenant_id, 
                alert_type=alert_type)
    
    try:
        fixture = await fixture_manager.load_fixture(
            tenant_id=tenant_id,
            environment=environment,
            locale=locale,
            alert_type=alert_type
        )
        
        if not fixture:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Fixture non trouv√©e"
            )
        
        # R√©cup√©ration des m√©tadonn√©es depuis la base
        fixtures_list = await fixture_manager.list_fixtures(
            tenant_id=tenant_id,
            environment=environment
        )
        
        fixture_meta = next(
            (f for f in fixtures_list if f.alert_type == alert_type and f.locale == locale),
            None
        )
        
        if not fixture_meta:
            raise HTTPException(status_code=404, detail="M√©tadonn√©es de fixture non trouv√©es")
        
        return FixtureResponse(
            id=fixture_meta.id,
            tenant_id=fixture_meta.tenant_id,
            environment=fixture_meta.environment.value,
            locale=fixture_meta.locale.value,
            alert_type=fixture_meta.alert_type,
            template=fixture.template.dict(),
            metadata=fixture.metadata,
            version=fixture_meta.version,
            created_at=fixture_meta.created_at,
            updated_at=fixture_meta.updated_at,
            hash=fixture_meta.hash
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Erreur lors de la r√©cup√©ration de fixture", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur interne: {str(e)}"
        )

@app.post("/fixtures/{tenant_id}/{environment}/{locale}/{alert_type}/render",
          summary="Rendre un template")
async def render_template(
    tenant_id: str = Path(..., description="ID du tenant"),
    environment: Environment = Path(..., description="Environnement"),
    locale: Locale = Path(..., description="Locale"),
    alert_type: str = Path(..., description="Type d'alerte"),
    render_request: RenderRequest = Body(...),
    token: str = Depends(verify_token)
):
    """
    Rend un template Slack avec le contexte fourni.
    
    Le contexte doit contenir les variables n√©cessaires au rendu du template.
    """
    logger.info("Rendu de template", 
                tenant_id=tenant_id, 
                alert_type=alert_type)
    
    try:
        fixture = await fixture_manager.load_fixture(
            tenant_id=tenant_id,
            environment=environment,
            locale=locale,
            alert_type=alert_type
        )
        
        if not fixture:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Fixture non trouv√©e"
            )
        
        # Rendu du template
        rendered = await fixture_manager.render_template(
            fixture=fixture,
            context=render_request.context
        )
        
        metrics_collector.record_template_render_duration(alert_type, 0.1)  # Mock duration
        
        return {
            "rendered_template": rendered,
            "context_used": render_request.context,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Erreur lors du rendu de template", error=str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur de rendu: {str(e)}"
        )

@app.delete("/fixtures/{tenant_id}/{environment}/{locale}/{alert_type}",
            summary="Supprimer une fixture")
async def delete_fixture(
    tenant_id: str = Path(..., description="ID du tenant"),
    environment: Environment = Path(..., description="Environnement"),
    locale: Locale = Path(..., description="Locale"),
    alert_type: str = Path(..., description="Type d'alerte"),
    token: str = Depends(verify_token)
):
    """
    Supprime une fixture sp√©cifique.
    """
    logger.info("Suppression de fixture", 
                tenant_id=tenant_id, 
                alert_type=alert_type)
    
    # Note: Impl√©mentation de la suppression √† ajouter dans le manager
    # Pour l'instant, retour d'une r√©ponse de succ√®s simul√©e
    
    return {
        "message": "Fixture supprim√©e avec succ√®s",
        "tenant_id": tenant_id,
        "environment": environment.value,
        "locale": locale.value,
        "alert_type": alert_type,
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

@app.get("/templates/default/{locale}/{alert_type}", summary="Template par d√©faut")
async def get_default_template(
    locale: Locale = Path(..., description="Locale"),
    alert_type: str = Path(..., description="Type d'alerte")
):
    """
    R√©cup√®re un template par d√©faut pour une locale et un type d'alerte donn√©s.
    """
    template = get_template_by_locale_and_type(locale.value, alert_type)
    
    if not template:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Template par d√©faut non trouv√©"
        )
    
    return {
        "template": template,
        "locale": locale.value,
        "alert_type": alert_type,
        "is_default": True
    }

@app.post("/validate/template", summary="Valider un template")
async def validate_template(
    template: Dict[str, Any] = Body(..., description="Template √† valider")
):
    """
    Valide la structure et la syntaxe d'un template Slack.
    """
    is_valid, errors = validator.validate_template(template)
    
    return {
        "is_valid": is_valid,
        "errors": errors,
        "template": template,
        "validation_timestamp": datetime.now(timezone.utc).isoformat()
    }

# Documentation personnalis√©e
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title=API_TITLE,
        version=API_VERSION,
        description=API_DESCRIPTION,
        routes=app.routes,
    )
    
    # Personnalisation du sch√©ma OpenAPI
    openapi_schema["info"]["contact"] = {
        "name": "Fahed Mlaiel - Lead Developer",
        "email": "fahed.mlaiel@achiri.com"
    }
    
    openapi_schema["info"]["license"] = {
        "name": "Propri√©taire - Achiri",
        "url": "https://achiri.com/license"
    }
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "api:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
