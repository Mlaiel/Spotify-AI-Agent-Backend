# Advanced Default Autoscaling Policies - Enterprise Configuration
# Multi-tier intelligent scaling policies with ML optimization
# Version: 2.1.0 - Industrial Implementation

apiVersion: autoscaling.spotify.ai/v2
kind: DefaultPolicies
metadata:
  name: spotify-ai-default-policies
  namespace: dev-autoscaling
  labels:
    environment: development
    tier: enterprise
    version: "2.1.0"
  annotations:
    description: "Enterprise-grade default autoscaling policies with AI optimization"
    maintainer: "Enterprise Architecture Team"

spec:
  # Global Policy Settings
  global_policy_config:
    policy_engine_version: "2.1.0"
    ai_optimization: true
    ml_prediction: true
    anomaly_detection: true
    cost_optimization: true
    security_enforcement: true
    compliance_validation: true
    
  # Tier-based Policy Templates
  policy_templates:
    
    # Enterprise Tier - Premium Services
    enterprise:
      description: "High-performance enterprise services with AI optimization"
      priority: 1
      
      scaling_parameters:
        target_cpu_utilization: 60
        target_memory_utilization: 65
        target_gpu_utilization: 70
        scale_up_stabilization: 30s
        scale_down_stabilization: 180s
        scale_up_percent: 200
        scale_down_percent: 30
        min_replicas: 3
        max_replicas: 100
        emergency_max_replicas: 200
        
      ai_parameters:
        prediction_horizon: "30m"
        confidence_threshold: 0.85
        learning_rate: 0.001
        model_update_frequency: "5m"
        anomaly_threshold: 2.5
        
      performance_metrics:
        - name: "request_rate"
          target_value: 2000
          weight: 1.5
          threshold_warning: 1800
          threshold_critical: 2200
        - name: "response_time_p99"
          target_value: 50
          weight: 2.0
          threshold_warning: 75
          threshold_critical: 100
        - name: "error_rate"
          target_value: 0.1
          weight: 3.0
          threshold_warning: 0.5
          threshold_critical: 1.0
        - name: "concurrent_users"
          target_value: 10000
          weight: 1.2
          
      business_metrics:
        - name: "revenue_per_request"
          target_value: 0.05
          weight: 1.0
        - name: "customer_satisfaction"
          target_value: 4.5
          weight: 1.5
          
    # Premium Tier - Advanced Features
    premium:
      description: "Premium services with enhanced performance"
      priority: 2
      
      scaling_parameters:
        target_cpu_utilization: 70
        target_memory_utilization: 75
        target_gpu_utilization: 80
        scale_up_stabilization: 60s
        scale_down_stabilization: 300s
        scale_up_percent: 150
        scale_down_percent: 40
        min_replicas: 2
        max_replicas: 50
        emergency_max_replicas: 100
        
      ai_parameters:
        prediction_horizon: "20m"
        confidence_threshold: 0.8
        learning_rate: 0.002
        model_update_frequency: "10m"
        anomaly_threshold: 2.0
        
      performance_metrics:
        - name: "request_rate"
          target_value: 1000
          weight: 1.3
        - name: "response_time_p95"
          target_value: 100
          weight: 1.8
        - name: "error_rate"
          target_value: 0.5
          weight: 2.5
          
    # Basic Tier - Standard Services
    basic:
      description: "Standard services with cost optimization"
      priority: 3
      
      scaling_parameters:
        target_cpu_utilization: 80
        target_memory_utilization: 85
        scale_up_stabilization: 120s
        scale_down_stabilization: 600s
        scale_up_percent: 100
        scale_down_percent: 50
        min_replicas: 1
        max_replicas: 20
        emergency_max_replicas: 40
        
      ai_parameters:
        prediction_horizon: "15m"
        confidence_threshold: 0.7
        learning_rate: 0.005
        model_update_frequency: "15m"
        anomaly_threshold: 1.5
        
      performance_metrics:
        - name: "request_rate"
          target_value: 500
          weight: 1.0
        - name: "response_time_p90"
          target_value: 200
          weight: 1.5
        - name: "error_rate"
          target_value: 1.0
          weight: 2.0

  # Service-Specific Policies
  service_policies:
    
    # API Gateway Services
    api-gateway:
      template: "enterprise"
      overrides:
        scaling_parameters:
          target_cpu_utilization: 50
          min_replicas: 5
          max_replicas: 200
        custom_metrics:
          - name: "api_requests_per_second"
            target_value: 5000
            weight: 2.0
            formula: "rate(http_requests_total[1m])"
          - name: "api_latency_p99"
            target_value: 25
            weight: 2.5
            formula: "histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m]))"
          - name: "api_error_ratio"
            target_value: 0.01
            weight: 3.0
            formula: "rate(http_requests_total{status=~'5..'}[5m]) / rate(http_requests_total[5m])"
            
    # Audio Processing Services
    audio-processor:
      template: "premium"
      overrides:
        scaling_parameters:
          target_cpu_utilization: 85
          target_memory_utilization: 90
          min_replicas: 3
          max_replicas: 50
        gpu_scaling:
          enabled: true
          target_gpu_utilization: 80
          gpu_memory_utilization: 85
        custom_metrics:
          - name: "audio_queue_length"
            target_value: 100
            weight: 2.0
            formula: "sum(audio_processing_queue_size)"
          - name: "audio_processing_latency"
            target_value: 5000
            weight: 1.8
            formula: "avg(audio_processing_duration_ms)"
          - name: "audio_quality_score"
            target_value: 95
            weight: 1.5
            formula: "avg(audio_quality_rating)"
          - name: "codec_efficiency"
            target_value: 0.8
            weight: 1.2
            formula: "rate(successful_codec_conversions[5m]) / rate(total_codec_attempts[5m])"
            
    # Machine Learning Services  
    ml-inference:
      template: "enterprise"
      overrides:
        scaling_parameters:
          target_cpu_utilization: 70
          target_memory_utilization: 75
          min_replicas: 2
          max_replicas: 100
        gpu_scaling:
          enabled: true
          target_gpu_utilization: 85
          gpu_memory_utilization: 90
          tensor_core_utilization: 80
        custom_metrics:
          - name: "ml_inference_latency"
            target_value: 100
            weight: 2.5
            formula: "avg(ml_model_inference_duration_ms)"
          - name: "ml_model_accuracy"
            target_value: 0.95
            weight: 2.0
            formula: "avg(ml_model_accuracy_score)"
          - name: "ml_throughput"
            target_value: 1000
            weight: 1.8
            formula: "rate(ml_inferences_total[1m])"
          - name: "ml_model_staleness"
            target_value: 3600
            weight: 1.5
            formula: "time() - ml_model_last_update_timestamp"
            
    # Database Services
    database:
      template: "premium"
      overrides:
        scaling_parameters:
          target_cpu_utilization: 75
          target_memory_utilization: 80
          min_replicas: 2
          max_replicas: 20
        custom_metrics:
          - name: "db_connections"
            target_value: 100
            weight: 2.0
            formula: "sum(db_active_connections)"
          - name: "db_query_latency"
            target_value: 50
            weight: 2.2
            formula: "avg(db_query_duration_ms)"
          - name: "db_cache_hit_ratio"
            target_value: 0.95
            weight: 1.5
            formula: "rate(db_cache_hits[5m]) / rate(db_cache_requests[5m])"
          - name: "db_replication_lag"
            target_value: 1000
            weight: 1.8
            formula: "avg(db_replication_lag_ms)"
            
    # Real-time Analytics
    analytics-engine:
      template: "enterprise"
      overrides:
        scaling_parameters:
          target_cpu_utilization: 65
          target_memory_utilization: 70
          min_replicas: 3
          max_replicas: 75
        custom_metrics:
          - name: "events_per_second"
            target_value: 10000
            weight: 2.0
            formula: "rate(analytics_events_total[1m])"
          - name: "analytics_processing_lag"
            target_value: 5000
            weight: 2.5
            formula: "avg(analytics_processing_lag_ms)"
          - name: "data_freshness"
            target_value: 30
            weight: 1.8
            formula: "time() - analytics_last_update_timestamp"
            
    # Content Delivery
    cdn-edge:
      template: "premium"
      overrides:
        scaling_parameters:
          target_cpu_utilization: 60
          target_memory_utilization: 70
          min_replicas: 5
          max_replicas: 200
        custom_metrics:
          - name: "cdn_hit_ratio"
            target_value: 0.9
            weight: 2.0
            formula: "rate(cdn_cache_hits[5m]) / rate(cdn_requests[5m])"
          - name: "cdn_origin_latency"
            target_value: 100
            weight: 1.8
            formula: "avg(cdn_origin_response_time_ms)"
          - name: "bandwidth_utilization"
            target_value: 0.8
            weight: 1.5
            formula: "rate(cdn_bytes_transferred[5m]) / cdn_bandwidth_limit"

  # Advanced Scaling Behaviors
  scaling_behaviors:
    
    # Aggressive scaling for high-priority services
    aggressive:
      scale_up:
        stabilization_window: 15s
        select_policy: "Max"
        policies:
          - type: "Percent"
            value: 300
            period: 15s
          - type: "Pods"
            value: 10
            period: 15s
      scale_down:
        stabilization_window: 60s
        select_policy: "Min"
        policies:
          - type: "Percent"
            value: 50
            period: 30s
            
    # Conservative scaling for stable services
    conservative:
      scale_up:
        stabilization_window: 300s
        select_policy: "Min"
        policies:
          - type: "Percent"
            value: 50
            period: 60s
          - type: "Pods"
            value: 2
            period: 60s
      scale_down:
        stabilization_window: 900s
        select_policy: "Min"
        policies:
          - type: "Percent"
            value: 10
            period: 120s
            
    # Balanced scaling for most services
    balanced:
      scale_up:
        stabilization_window: 60s
        select_policy: "Max"
        policies:
          - type: "Percent"
            value: 100
            period: 30s
          - type: "Pods"
            value: 4
            period: 30s
      scale_down:
        stabilization_window: 300s
        select_policy: "Min"
        policies:
          - type: "Percent"
            value: 25
            period: 60s

  # Cost Optimization Policies
  cost_optimization:
    enabled: true
    
    # Spot instance utilization
    spot_instances:
      enabled: true
      max_percentage: 70
      priority_classes:
        - name: "low-priority"
          spot_percentage: 90
        - name: "normal-priority"
          spot_percentage: 50
        - name: "high-priority"
          spot_percentage: 20
          
    # Right-sizing recommendations
    rightsizing:
      enabled: true
      analysis_period: "7d"
      utilization_threshold: 0.6
      recommendation_frequency: "24h"
      
    # Scheduled scaling for predictable workloads
    scheduled_scaling:
      enabled: true
      schedules:
        - name: "business-hours-scale-up"
          cron: "0 8 * * 1-5"
          target_replicas_multiplier: 1.5
          timezone: "UTC"
        - name: "off-hours-scale-down"
          cron: "0 20 * * 1-5"
          target_replicas_multiplier: 0.7
          timezone: "UTC"
        - name: "weekend-minimal"
          cron: "0 0 * * 6,0"
          target_replicas_multiplier: 0.3
          timezone: "UTC"

  # Security and Compliance Policies
  security_policies:
    
    # Resource isolation
    isolation:
      namespace_isolation: true
      network_policies: true
      pod_security_standards: "restricted"
      
    # Access control
    access_control:
      rbac_enabled: true
      service_account_required: true
      admission_controllers:
        - "PodSecurity"
        - "ResourceQuota"
        - "NetworkPolicy"
        
    # Audit and compliance
    audit:
      enabled: true
      log_level: "RequestResponse"
      retention_days: 90
      compliance_frameworks:
        - "SOC2"
        - "GDPR"
        - "HIPAA"

  # Emergency Response Policies
  emergency_policies:
    
    # Circuit breaker activation
    circuit_breaker:
      enabled: true
      failure_threshold: 50
      timeout: "30s"
      fallback_replicas: 1
      
    # DDoS protection
    ddos_protection:
      enabled: true
      rate_limit_threshold: 10000
      ban_duration: "1h"
      whitelist_enabled: true
      
    # Resource exhaustion response
    resource_exhaustion:
      cpu_threshold: 95
      memory_threshold: 98
      action: "emergency_scale"
      max_emergency_replicas: 500
      cooldown_period: "10m"
  target_memory_utilization: 90  # ML utilise beaucoup de RAM
  scale_up_stabilization: 300    # 5 minutes (chargement modèles)
  scale_down_stabilization: 900  # 15 minutes (éviter oscillations)
  scale_up_percent: 75           # Scaling modéré
  scale_down_percent: 33         # Scaling très prudent
  metrics_server_delay: 60
  
  # Métriques ML spécialisées
  custom_metrics:
    - name: "inference_requests_per_second"
      target_value: 25
      weight: 0.4
    - name: "model_accuracy"
      target_value: 0.95   # 95% d'accuracy minimum
      weight: 0.2
    - name: "gpu_utilization"
      target_value: 80
      weight: 0.3
    - name: "model_loading_time"
      target_value: 30000  # 30 secondes
      weight: 0.1

# Service de streaming temps réel
streaming-service:
  target_cpu_utilization: 65
  target_memory_utilization: 75
  scale_up_stabilization: 60     # 1 minute (très réactif)
  scale_down_stabilization: 300  # 5 minutes
  scale_up_percent: 200          # Scaling très agressif
  scale_down_percent: 50
  metrics_server_delay: 15
  
  # Métriques streaming
  custom_metrics:
    - name: "concurrent_streams"
      target_value: 1000
      weight: 0.4
    - name: "stream_latency"
      target_value: 100    # 100ms
      weight: 0.3
    - name: "buffer_underruns"
      target_value: 0      # Aucun underrun accepté
      weight: 0.2
    - name: "bandwidth_utilization"
      target_value: 80
      weight: 0.1

# Service de base de données (cache)
cache-service:
  target_cpu_utilization: 60
  target_memory_utilization: 85
  scale_up_stabilization: 240   # 4 minutes
  scale_down_stabilization: 600 # 10 minutes
  scale_up_percent: 50          # Scaling conservateur
  scale_down_percent: 25
  metrics_server_delay: 30
  
  # Métriques cache
  custom_metrics:
    - name: "cache_hit_ratio"
      target_value: 0.95   # 95% de hit ratio
      weight: 0.3
    - name: "eviction_rate"
      target_value: 10     # 10 évictions/sec max
      weight: 0.2
    - name: "connection_pool_usage"
      target_value: 80
      weight: 0.3
    - name: "query_response_time"
      target_value: 10     # 10ms
      weight: 0.2

# Service de recherche/indexation
search-service:
  target_cpu_utilization: 70
  target_memory_utilization: 80
  scale_up_stabilization: 180
  scale_down_stabilization: 450
  scale_up_percent: 100
  scale_down_percent: 40
  metrics_server_delay: 45
  
  # Métriques recherche
  custom_metrics:
    - name: "search_queries_per_second"
      target_value: 500
      weight: 0.4
    - name: "index_size_gb"
      target_value: 100
      weight: 0.1
    - name: "search_latency_p95"
      target_value: 200    # 200ms
      weight: 0.3
    - name: "indexing_rate"
      target_value: 1000   # 1000 docs/sec
      weight: 0.2

# Service de notification
notification-service:
  target_cpu_utilization: 50
  target_memory_utilization: 60
  scale_up_stabilization: 300
  scale_down_stabilization: 600
  scale_up_percent: 150
  scale_down_percent: 50
  metrics_server_delay: 60
  
  # Métriques notifications
  custom_metrics:
    - name: "notification_queue_size"
      target_value: 1000
      weight: 0.4
    - name: "delivery_success_rate"
      target_value: 0.98   # 98% de succès
      weight: 0.3
    - name: "notification_latency"
      target_value: 5000   # 5 secondes
      weight: 0.3

# Service d'analytics
analytics-service:
  target_cpu_utilization: 65
  target_memory_utilization: 75
  scale_up_stabilization: 300
  scale_down_stabilization: 900   # Très conservateur
  scale_up_percent: 75
  scale_down_percent: 25
  metrics_server_delay: 120       # Collecte lente acceptable
  
  # Métriques analytics
  custom_metrics:
    - name: "events_processed_per_second"
      target_value: 10000
      weight: 0.4
    - name: "data_pipeline_lag"
      target_value: 300    # 5 minutes max
      weight: 0.3
    - name: "storage_usage_percent"
      target_value: 80
      weight: 0.2
    - name: "query_complexity_score"
      target_value: 100
      weight: 0.1

# Service de transcoding média
transcoding-service:
  target_cpu_utilization: 85     # Très intensif CPU
  target_memory_utilization: 70
  scale_up_stabilization: 120    # Réactif
  scale_down_stabilization: 600
  scale_up_percent: 200          # Très agressif
  scale_down_percent: 30
  metrics_server_delay: 30
  
  # Métriques transcoding
  custom_metrics:
    - name: "transcoding_queue_length"
      target_value: 100
      weight: 0.5
    - name: "transcoding_speed_ratio"
      target_value: 4.0    # 4x temps réel
      weight: 0.3
    - name: "output_quality_score"
      target_value: 0.9    # 90% qualité
      weight: 0.2

# Service de recommandation IA
recommendation-service:
  target_cpu_utilization: 70
  target_memory_utilization: 85
  scale_up_stabilization: 240
  scale_down_stabilization: 600
  scale_up_percent: 100
  scale_down_percent: 40
  metrics_server_delay: 60
  
  # Métriques recommandations
  custom_metrics:
    - name: "recommendation_requests_per_second"
      target_value: 200
      weight: 0.4
    - name: "model_freshness_hours"
      target_value: 24     # Modèle de moins de 24h
      weight: 0.2
    - name: "recommendation_accuracy"
      target_value: 0.85   # 85% de précision
      weight: 0.3
    - name: "cold_start_latency"
      target_value: 2000   # 2 secondes
      weight: 0.1
