# Notification Service Deployment - Real-time Push Notifications
# Developed by Fahed Mlaiel - Senior Backend Engineer & Real-time Systems Architect
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spotify-ai-notification-service
  namespace: spotify-ai-agent-dev
  labels:
    app.kubernetes.io/name: spotify-ai-agent
    app.kubernetes.io/instance: dev
    app.kubernetes.io/version: v2.0.0
    app.kubernetes.io/component: notification-service
    app.kubernetes.io/part-of: spotify-ai-agent
    app.kubernetes.io/managed-by: advanced-deployment-manager
    service-type: notification-service
    tenant-tier: premium
    environment: development
    notification-type: real-time
    messaging-protocol: websocket-sse-push
    team: spotify-ai-agent-dev
  annotations:
    deployment.kubernetes.io/revision: "1"
    created-by: "Fahed Mlaiel - Real-time Systems Architect"
    description: "Real-time notification and messaging service"
    messaging-frameworks: "websocket-sse-fcm-apns"
    concurrent-connections: "50000"
    message-throughput: "10000/sec"
    delivery-guarantee: "at-least-once"
    notification-channels: "push-email-sms-webhook"
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: spotify-ai-notification-service
      environment: development
  template:
    metadata:
      labels:
        app: spotify-ai-notification-service
        app.kubernetes.io/name: spotify-ai-agent
        app.kubernetes.io/component: notification-service
        service-type: notification-service
        tenant-tier: premium
        environment: development
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/metrics"
        jaeger.io/sampling-type: "probabilistic"
        jaeger.io/sampling-param: "0.1"
        fluentd.io/log-format: "json"
        config-hash: "notification123"
        created-at: "2025-07-17T00:00:00Z"
        max-connections: "50000"
        connection-timeout: "300s"
    spec:
      serviceAccountName: spotify-ai-notification-sa
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 45
      restartPolicy: Always
      securityContext:
        runAsNonRoot: true
        runAsUser: 10002
        runAsGroup: 10002
        fsGroup: 10002
        seccompProfile:
          type: RuntimeDefault
        sysctls:
        - name: net.core.somaxconn
          value: "4096"
        - name: net.ipv4.tcp_max_syn_backlog
          value: "2048"
        - name: net.core.netdev_max_backlog
          value: "2048"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["spotify-ai-notification-service"]
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 70
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values: ["network-optimized"]
          - weight: 50
            preference:
              matchExpressions:
              - key: instance-type
                operator: In
                values: ["c5n.2xlarge", "c5n.4xlarge"]
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: notification-workload
        operator: Equal
        value: "true"
        effect: NoSchedule
      containers:
      - name: notification-service
        image: spotify-ai-agent/notification-service:dev-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: websocket
          protocol: TCP
        - containerPort: 8082
          name: sse
          protocol: TCP
        - containerPort: 9000
          name: metrics
          protocol: TCP
        - containerPort: 8090
          name: admin
          protocol: TCP
        env:
        # Base Configuration
        - name: ENVIRONMENT
          value: "development"
        - name: SERVICE_NAME
          value: "spotify-ai-notification-service"
        - name: SERVICE_TYPE
          value: "notification-service"
        - name: TENANT_TIER
          value: "premium"
        # Kubernetes Integration
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # Resource Information
        - name: CPU_REQUEST
          valueFrom:
            resourceFieldRef:
              resource: requests.cpu
        - name: MEMORY_REQUEST
          valueFrom:
            resourceFieldRef:
              resource: requests.memory
        # Notification Configuration
        - name: MAX_CONCURRENT_CONNECTIONS
          value: "50000"
        - name: CONNECTION_TIMEOUT
          value: "300"
        - name: MESSAGE_QUEUE_SIZE
          value: "10000"
        - name: WEBSOCKET_PING_INTERVAL
          value: "30"
        - name: SSE_HEARTBEAT_INTERVAL
          value: "25"
        - name: BATCH_SIZE
          value: "100"
        - name: RETRY_ATTEMPTS
          value: "3"
        - name: DELIVERY_TIMEOUT
          value: "30"
        # Message Queue Integration
        - name: REDIS_CLUSTER_NODES
          value: "redis-cluster:6379"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-cluster:9092"
        - name: RABBITMQ_URL
          value: "amqp://rabbitmq-cluster:5672"
        # Database Connections
        - name: NOTIFICATION_DB_URL
          valueFrom:
            secretKeyRef:
              name: notification-db-credentials
              key: url
        - name: USER_PREFERENCES_DB_URL
          valueFrom:
            secretKeyRef:
              name: user-preferences-db-credentials
              key: url
        # External Service APIs
        - name: FCM_SERVER_KEY
          valueFrom:
            secretKeyRef:
              name: fcm-credentials
              key: server_key
        - name: APNS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: apns-credentials
              key: key_id
        - name: APNS_TEAM_ID
          valueFrom:
            secretKeyRef:
              name: apns-credentials
              key: team_id
        - name: APNS_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: apns-credentials
              key: private_key
        - name: SENDGRID_API_KEY
          valueFrom:
            secretKeyRef:
              name: sendgrid-credentials
              key: api_key
        - name: TWILIO_ACCOUNT_SID
          valueFrom:
            secretKeyRef:
              name: twilio-credentials
              key: account_sid
        - name: TWILIO_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: twilio-credentials
              key: auth_token
        # Security
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secrets
              key: notification_key
        - name: WEBHOOK_SIGNING_SECRET
          valueFrom:
            secretKeyRef:
              name: webhook-secrets
              key: signing_secret
        # Monitoring & Tracing
        - name: JAEGER_AGENT_HOST
          value: "localhost"
        - name: JAEGER_AGENT_PORT
          value: "6831"
        - name: PROMETHEUS_GATEWAY
          value: "pushgateway:9091"
        - name: ELASTIC_APM_SERVER_URL
          value: "http://apm-server:8200"
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
            ephemeral-storage: "200Mi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
            ephemeral-storage: "1Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 20
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 20"]
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10002
          capabilities:
            drop: ["ALL"]
            add: ["NET_BIND_SERVICE"]
        volumeMounts:
        - name: notification-templates
          mountPath: /templates
          readOnly: true
        - name: tmp-storage
          mountPath: /tmp
        - name: logs-storage
          mountPath: /var/log/notifications
        - name: config-volume
          mountPath: /etc/notifications
          readOnly: true
        - name: certificates
          mountPath: /etc/ssl/certs/notifications
          readOnly: true
      # WebSocket Load Balancer Sidecar
      - name: websocket-proxy
        image: nginx:1.25-alpine
        ports:
        - containerPort: 8083
          name: ws-proxy
          protocol: TCP
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 101
      # Monitoring Sidecar
      - name: monitoring-agent
        image: prometheus/node-exporter:v1.6.1
        ports:
        - containerPort: 9100
          name: node-metrics
          protocol: TCP
        resources:
          requests:
            cpu: "10m"
            memory: "32Mi"
          limits:
            cpu: "50m"
            memory: "64Mi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
      # Message Queue Consumer Sidecar
      - name: queue-consumer
        image: spotify-ai-agent/queue-consumer:dev-latest
        env:
        - name: QUEUE_TYPE
          value: "notification-queue"
        - name: CONSUMER_GROUP
          value: "notification-consumers"
        - name: BATCH_SIZE
          value: "50"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-cluster:9092"
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10002
        volumeMounts:
        - name: queue-config
          mountPath: /etc/queue
          readOnly: true
      volumes:
      - name: notification-templates
        configMap:
          name: notification-templates
      - name: tmp-storage
        emptyDir:
          sizeLimit: "500Mi"
      - name: logs-storage
        emptyDir:
          sizeLimit: "200Mi"
      - name: config-volume
        configMap:
          name: notification-config
      - name: certificates
        secret:
          secretName: notification-certificates
      - name: nginx-config
        configMap:
          name: websocket-proxy-config
      - name: queue-config
        configMap:
          name: queue-consumer-config
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      initContainers:
      - name: notification-init
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Initializing notification service..."
          mkdir -p /tmp/notifications /var/log/notifications
          chown -R 10002:10002 /tmp /var/log/notifications
          echo "Testing message queue connectivity..."
          nc -z kafka-cluster 9092 && echo "Kafka reachable" || echo "Kafka not reachable"
          nc -z redis-cluster 6379 && echo "Redis reachable" || echo "Redis not reachable"
          echo "Notification service initialized successfully"
        volumeMounts:
        - name: tmp-storage
          mountPath: /tmp
        - name: logs-storage
          mountPath: /var/log/notifications
        securityContext:
          runAsUser: 0
          runAsGroup: 0
