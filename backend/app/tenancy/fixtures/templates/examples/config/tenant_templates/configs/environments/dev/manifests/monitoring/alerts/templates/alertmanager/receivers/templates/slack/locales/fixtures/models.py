"""
Mod√®les de Donn√©es Enterprise pour Syst√®me de Fixtures Multi-Tenant
==================================================================

Ce module d√©finit tous les mod√®les de donn√©es avanc√©s pour le syst√®me de fixtures
d'alertes multi-tenant avec support complet de l'IA, compliance, s√©curit√© et performance.

üéØ Architecture: Domain Driven Design + Event Sourcing + CQRS
üîí S√©curit√©: Chiffrement natif + Validation stricte + Audit complet  
‚ö° Performance: Optimisation m√©moire + S√©rialisation rapide + Cache intelligent
üß† IA: ML int√©gr√© + Pr√©dictions + Anomaly Detection + Auto-optimization

Auteur: Fahed Mlaiel - Lead Developer & AI Architect
√âquipe: DevOps/ML/Security/Backend Experts
Version: 3.0.0-enterprise
"""

import asyncio
import json
import uuid
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Union, Tuple, Set
from dataclasses import dataclass, field, asdict
from enum import Enum, IntEnum
import hashlib
from pathlib import Path
from decimal import Decimal
import re

# Imports avanc√©s pour la stack enterprise
from pydantic import BaseModel, Field, validator, root_validator
from sqlalchemy import Column, String, DateTime, Integer, Float, Boolean, Text, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.dialects.postgresql import UUID, JSONB, ARRAY
import numpy as np
from cryptography.fernet import Fernet

Base = declarative_base()

# ============================================================================================
# ENUMS ET TYPES DE BASE
# ============================================================================================

class AlertSeverity(str, Enum):
    """Niveaux de s√©v√©rit√© des alertes avec priorit√©s num√©riques."""
    CRITICAL = "critical"    # P0 - R√©solution imm√©diate requise
    HIGH = "high"           # P1 - R√©solution sous 1h
    MEDIUM = "medium"       # P2 - R√©solution sous 4h
    LOW = "low"            # P3 - R√©solution sous 24h
    INFO = "info"          # P4 - Informatif
    DEBUG = "debug"        # P5 - Debug uniquement

class Environment(str, Enum):
    """Environnements de d√©ploiement support√©s."""
    DEV = "dev"
    TEST = "test"
    STAGING = "staging"
    PREPROD = "preprod"
    PROD = "prod"
    DISASTER_RECOVERY = "dr"

class Locale(str, Enum):
    """Locales support√©es avec codes ISO 639-1."""
    FR = "fr"  # Fran√ßais
    EN = "en"  # English
    DE = "de"  # Deutsch
    ES = "es"  # Espa√±ol
    IT = "it"  # Italiano
    PT = "pt"  # Portugu√™s
    RU = "ru"  # –†—É—Å—Å–∫–∏–π
    ZH = "zh"  # ‰∏≠Êñá
    JA = "ja"  # Êó•Êú¨Ë™û
    KO = "ko"  # ÌïúÍµ≠Ïñ¥
    AR = "ar"  # ÿßŸÑÿπÿ±ÿ®Ÿäÿ©
    HI = "hi"  # ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä

class NotificationChannel(str, Enum):
    """Canaux de notification support√©s."""
    SLACK = "slack"
    TEAMS = "teams"
    DISCORD = "discord"
    EMAIL = "email"
    SMS = "sms"
    WHATSAPP = "whatsapp"
    PAGERDUTY = "pagerduty"
    WEBHOOK = "webhook"
    PUSH = "push"
    VOICE = "voice"
    TELEGRAM = "telegram"

class AlertType(str, Enum):
    """Types d'alertes m√©tier."""
    SYSTEM = "system"
    APPLICATION = "application"
    SECURITY = "security"
    PERFORMANCE = "performance"
    BUSINESS = "business"
    INFRASTRUCTURE = "infrastructure"
    COMPLIANCE = "compliance"
    ML_MODEL = "ml_model"
    USER_BEHAVIOR = "user_behavior"
    FINANCIAL = "financial"

class SecurityLevel(IntEnum):
    """Niveaux de s√©curit√© avec priorit√©s."""
    PUBLIC = 0
    INTERNAL = 1
    CONFIDENTIAL = 2
    RESTRICTED = 3
    TOP_SECRET = 4

class ComplianceStandard(str, Enum):
    """Standards de compliance support√©s."""
    GDPR = "gdpr"
    SOC2 = "soc2"
    ISO27001 = "iso27001"
    PCI_DSS = "pci_dss"
    HIPAA = "hipaa"
    SOX = "sox"
    NIST = "nist"

# ============================================================================================
# MOD√àLES DE BASE AVEC MIXINS
# ============================================================================================

@dataclass
class BaseEntity:
    """Entit√© de base avec m√©tadonn√©es communes."""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    created_at: datetime = field(default_factory=datetime.utcnow)
    updated_at: datetime = field(default_factory=datetime.utcnow)
    version: str = field(default="1.0.0")
    tags: Set[str] = field(default_factory=set)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def to_dict(self) -> Dict[str, Any]:
        """S√©rialise en dictionnaire."""
        data = asdict(self)
        data['tags'] = list(self.tags)
        return data
    
    def get_hash(self) -> str:
        """G√©n√®re un hash unique de l'entit√©."""
        content = json.dumps(self.to_dict(), sort_keys=True, default=str)
        return hashlib.sha256(content.encode()).hexdigest()

@dataclass
class AuditableMixin:
    """Mixin pour l'auditabilit√©."""
    created_by: str = field(default="system")
    updated_by: str = field(default="system")
    audit_trail: List[Dict[str, Any]] = field(default_factory=list)
    
    def add_audit_entry(self, action: str, user: str, details: Dict[str, Any] = None):
        """Ajoute une entr√©e d'audit."""
        entry = {
            "timestamp": datetime.utcnow().isoformat(),
            "action": action,
            "user": user,
            "details": details or {}
        }
        self.audit_trail.append(entry)

@dataclass
class EncryptableMixin:
    """Mixin pour le chiffrement des donn√©es sensibles."""
    encryption_key_id: Optional[str] = None
    encrypted_fields: Set[str] = field(default_factory=set)
    
    def encrypt_field(self, field_name: str, cipher: Fernet) -> None:
        """Chiffre un champ sp√©cifique."""
        if hasattr(self, field_name):
            value = getattr(self, field_name)
            if value and isinstance(value, str):
                encrypted_value = cipher.encrypt(value.encode()).decode()
                setattr(self, field_name, encrypted_value)
                self.encrypted_fields.add(field_name)

# ============================================================================================
# MOD√àLES PRINCIPAUX D'ALERTES
# ============================================================================================

@dataclass
class SlackAlert(BaseEntity, AuditableMixin, EncryptableMixin):
    """Mod√®le complet d'une alerte Slack avec toutes les m√©tadonn√©es."""
    tenant_id: str
    environment: Environment
    severity: AlertSeverity
    alert_type: AlertType
    title: str
    message: str
    channel: str
    locale: Locale = Locale.FR
    security_level: SecurityLevel = SecurityLevel.INTERNAL
    
    # Contexte et enrichissement
    source_system: str = "achiri-ai-agent"
    correlation_id: Optional[str] = None
    incident_id: Optional[str] = None
    parent_alert_id: Optional[str] = None
    
    # Donn√©es techniques
    raw_data: Dict[str, Any] = field(default_factory=dict)
    enriched_data: Dict[str, Any] = field(default_factory=dict)
    ml_predictions: Dict[str, Any] = field(default_factory=dict)
    
    # Statut et lifecycle
    status: str = "new"
    acknowledged: bool = False
    acknowledged_by: Optional[str] = None
    acknowledged_at: Optional[datetime] = None
    resolved: bool = False
    resolved_by: Optional[str] = None
    resolved_at: Optional[datetime] = None
    
    # SLA et escalation
    sla_deadline: Optional[datetime] = None
    escalation_level: int = 0
    escalation_history: List[Dict[str, Any]] = field(default_factory=list)
    
    # M√©triques et performance
    creation_latency_ms: Optional[float] = None
    delivery_latency_ms: Optional[float] = None
    processing_time_ms: Optional[float] = None
    
    def is_expired(self) -> bool:
        """V√©rifie si l'alerte a expir√© son SLA."""
        return self.sla_deadline and datetime.utcnow() > self.sla_deadline
    
    def get_priority_score(self) -> int:
        """Calcule un score de priorit√© bas√© sur la s√©v√©rit√© et l'√¢ge."""
        severity_scores = {
            AlertSeverity.CRITICAL: 1000,
            AlertSeverity.HIGH: 750,
            AlertSeverity.MEDIUM: 500,
            AlertSeverity.LOW: 250,
            AlertSeverity.INFO: 100,
            AlertSeverity.DEBUG: 50
        }
        
        base_score = severity_scores.get(self.severity, 0)
        age_hours = (datetime.utcnow() - self.created_at).total_seconds() / 3600
        age_penalty = min(age_hours * 10, 500)  # Max 500 points pour l'√¢ge
        
        return int(base_score + age_penalty)

@dataclass
class AlertTemplate(BaseEntity, AuditableMixin):
    """Template d'alerte avec support multi-langue et IA."""
    name: str
    alert_type: AlertType
    severity: AlertSeverity
    locale: Locale
    channel: NotificationChannel
    
    # Contenu du template
    title_template: str
    message_template: str
    rich_content: Dict[str, Any] = field(default_factory=dict)
    
    # Configuration du template
    variables: List[str] = field(default_factory=list)
    conditions: Dict[str, Any] = field(default_factory=dict)
    formatting_rules: Dict[str, Any] = field(default_factory=dict)
    
    # IA et optimisation
    ml_optimized: bool = False
    optimization_score: float = 0.0
    usage_statistics: Dict[str, Any] = field(default_factory=dict)
    effectiveness_metrics: Dict[str, Any] = field(default_factory=dict)
    
    # Validation et tests
    last_tested: Optional[datetime] = None
    test_results: Dict[str, Any] = field(default_factory=dict)
    validation_rules: List[Dict[str, Any]] = field(default_factory=list)
    
    def render(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """Rend le template avec le contexte donn√©."""
        # Impl√©mentation basique - sera enrichie par TemplateRenderer
        return {
            "title": self.title_template.format(**context),
            "message": self.message_template.format(**context),
            "rich_content": self.rich_content
        }

# ============================================================================================
# MOD√àLES DE CONFIGURATION
# ============================================================================================

@dataclass
class TenantFixture(BaseEntity, AuditableMixin):
    """Configuration de fixture pour un tenant sp√©cifique."""
    tenant_id: str
    environment: Environment
    
    # Configuration d'alerte
    alert_config: Dict[str, Any] = field(default_factory=dict)
    notification_preferences: Dict[str, Any] = field(default_factory=dict)
    escalation_matrix: Dict[str, Any] = field(default_factory=dict)
    
    # Limites et quotas
    daily_alert_limit: int = 1000
    rate_limit_per_minute: int = 10
    storage_quota_mb: int = 100
    
    # S√©curit√© et compliance
    security_policies: List[str] = field(default_factory=list)
    compliance_requirements: List[ComplianceStandard] = field(default_factory=list)
    data_retention_days: int = 365
    
    # Int√©grations
    slack_config: Dict[str, Any] = field(default_factory=dict)
    teams_config: Dict[str, Any] = field(default_factory=dict)
    webhook_endpoints: List[str] = field(default_factory=list)
    
    # ML et analytics
    enable_ml_predictions: bool = True
    enable_anomaly_detection: bool = True
    ml_model_preferences: Dict[str, Any] = field(default_factory=dict)

@dataclass
class SecurityPolicy(BaseEntity, AuditableMixin):
    """Politique de s√©curit√© pour les alertes."""
    name: str
    description: str
    policy_type: str
    
    # R√®gles de s√©curit√©
    encryption_required: bool = True
    audit_required: bool = True
    approval_required: bool = False
    
    # Contr√¥les d'acc√®s
    allowed_users: List[str] = field(default_factory=list)
    allowed_roles: List[str] = field(default_factory=list)
    restricted_channels: List[str] = field(default_factory=list)
    
    # Validation et conformit√©
    compliance_standards: List[ComplianceStandard] = field(default_factory=list)
    validation_rules: List[Dict[str, Any]] = field(default_factory=list)
    
    # Monitoring
    violations: List[Dict[str, Any]] = field(default_factory=list)
    effectiveness_score: float = 0.0

# ============================================================================================
# MOD√àLES DE PERFORMANCE ET M√âTRIQUES
# ============================================================================================

@dataclass
class PerformanceMetric(BaseEntity):
    """M√©trique de performance pour le syst√®me."""
    metric_name: str
    metric_type: str
    value: float
    unit: str
    
    # Contexte
    tenant_id: Optional[str] = None
    environment: Optional[Environment] = None
    component: Optional[str] = None
    
    # Seuils et alertes
    warning_threshold: Optional[float] = None
    critical_threshold: Optional[float] = None
    
    # Agr√©gation
    aggregation_period: str = "1m"
    aggregation_function: str = "avg"
    
    # Historique
    historical_values: List[Tuple[datetime, float]] = field(default_factory=list)
    trend_analysis: Dict[str, Any] = field(default_factory=dict)

@dataclass
class TenantMetrics(BaseEntity):
    """M√©triques agr√©g√©es par tenant."""
    tenant_id: str
    period_start: datetime
    period_end: datetime
    
    # M√©triques d'usage
    total_alerts: int = 0
    alerts_by_severity: Dict[str, int] = field(default_factory=dict)
    alerts_by_channel: Dict[str, int] = field(default_factory=dict)
    
    # M√©triques de performance
    avg_response_time_ms: float = 0.0
    p95_response_time_ms: float = 0.0
    p99_response_time_ms: float = 0.0
    
    # M√©triques de qualit√©
    false_positive_rate: float = 0.0
    alert_resolution_rate: float = 0.0
    avg_time_to_resolution_hours: float = 0.0
    
    # M√©triques business
    cost_per_alert: Decimal = Decimal('0.00')
    roi_score: float = 0.0
    satisfaction_score: float = 0.0

# ============================================================================================
# MOD√àLES ML ET IA
# ============================================================================================

@dataclass
class MLModel(BaseEntity, AuditableMixin):
    """Mod√®le de Machine Learning pour les pr√©dictions."""
    name: str
    model_type: str  # "prediction", "classification", "anomaly_detection", etc.
    algorithm: str
    
    # Configuration du mod√®le
    hyperparameters: Dict[str, Any] = field(default_factory=dict)
    features: List[str] = field(default_factory=list)
    target_variable: Optional[str] = None
    
    # Donn√©es d'entra√Ænement
    training_data_path: Optional[str] = None
    training_completed_at: Optional[datetime] = None
    validation_score: Optional[float] = None
    
    # Performance
    accuracy: Optional[float] = None
    precision: Optional[float] = None
    recall: Optional[float] = None
    f1_score: Optional[float] = None
    
    # D√©ploiement
    deployed: bool = False
    deployment_environment: Optional[Environment] = None
    serving_endpoint: Optional[str] = None
    
    # Monitoring
    prediction_count: int = 0
    avg_prediction_time_ms: float = 0.0
    drift_detected: bool = False
    last_retrain_date: Optional[datetime] = None

@dataclass
class MLPrediction(BaseEntity):
    """Pr√©diction g√©n√©r√©e par un mod√®le ML."""
    model_id: str
    input_data: Dict[str, Any]
    prediction: Dict[str, Any]
    confidence_score: float
    
    # Contexte
    tenant_id: Optional[str] = None
    alert_id: Optional[str] = None
    
    # Validation
    actual_outcome: Optional[Dict[str, Any]] = None
    prediction_accuracy: Optional[float] = None
    
    # Performance
    processing_time_ms: float = 0.0

@dataclass
class AnomalyEvent(BaseEntity):
    """√âv√©nement d'anomalie d√©tect√©."""
    detection_model: str
    anomaly_type: str
    severity_score: float
    
    # Donn√©es de l'anomalie
    anomaly_data: Dict[str, Any]
    normal_baseline: Dict[str, Any]
    deviation_score: float
    
    # Contexte
    tenant_id: Optional[str] = None
    source_system: Optional[str] = None
    
    # Actions
    alert_generated: bool = False
    alert_id: Optional[str] = None
    auto_remediation_attempted: bool = False
    remediation_successful: Optional[bool] = None

# ============================================================================================
# MOD√àLES D'√âV√âNEMENTS ET AUDIT
# ============================================================================================

@dataclass
class AuditEvent(BaseEntity):
    """√âv√©nement d'audit syst√®me."""
    event_type: str
    user_id: str
    action: str
    resource_type: str
    resource_id: str
    
    # D√©tails de l'√©v√©nement
    event_data: Dict[str, Any] = field(default_factory=dict)
    ip_address: Optional[str] = None
    user_agent: Optional[str] = None
    
    # S√©curit√©
    security_level: SecurityLevel = SecurityLevel.INTERNAL
    risk_score: float = 0.0
    
    # Compliance
    compliance_relevant: bool = False
    retention_period_days: int = 2555  # 7 ans par d√©faut

@dataclass
class MonitoringEvent(BaseEntity):
    """√âv√©nement de monitoring syst√®me."""
    source: str
    event_type: str
    severity: AlertSeverity
    
    # Donn√©es de l'√©v√©nement
    event_data: Dict[str, Any] = field(default_factory=dict)
    metrics: Dict[str, float] = field(default_factory=dict)
    
    # Contexte
    tenant_id: Optional[str] = None
    environment: Optional[Environment] = None
    service_name: Optional[str] = None
    
    # Traitement
    processed: bool = False
    alert_generated: bool = False
    suppressed: bool = False
    suppression_reason: Optional[str] = None

# ============================================================================================
# MOD√àLES DE GESTION OP√âRATIONNELLE
# ============================================================================================

@dataclass
class BusinessRule(BaseEntity, AuditableMixin):
    """R√®gle m√©tier pour l'automatisation."""
    name: str
    description: str
    rule_type: str
    
    # D√©finition de la r√®gle
    conditions: List[Dict[str, Any]] = field(default_factory=list)
    actions: List[Dict[str, Any]] = field(default_factory=list)
    
    # Configuration
    enabled: bool = True
    priority: int = 100
    
    # Ex√©cution
    execution_count: int = 0
    last_execution: Optional[datetime] = None
    success_rate: float = 0.0
    
    # Validation
    dry_run_results: List[Dict[str, Any]] = field(default_factory=list)

@dataclass
class SLAPolicy(BaseEntity, AuditableMixin):
    """Politique de SLA pour les alertes."""
    name: str
    description: str
    
    # D√©finition du SLA
    severity_targets: Dict[AlertSeverity, timedelta] = field(default_factory=dict)
    availability_target: float = 99.9
    response_time_target_ms: float = 1000.0
    
    # Monitoring
    current_compliance: float = 0.0
    violations: List[Dict[str, Any]] = field(default_factory=list)
    
    # Actions
    escalation_rules: List[Dict[str, Any]] = field(default_factory=list)
    penalty_actions: List[Dict[str, Any]] = field(default_factory=list)

@dataclass
class EscalationEvent(BaseEntity):
    """√âv√©nement d'escalation d'alerte."""
    alert_id: str
    escalation_level: int
    escalation_reason: str
    
    # Destinataires
    escalated_to: List[str] = field(default_factory=list)
    notification_channels: List[NotificationChannel] = field(default_factory=list)
    
    # Timing
    escalation_delay: timedelta = timedelta(minutes=15)
    max_escalations: int = 3
    
    # Statut
    acknowledged: bool = False
    resolved: bool = False

# ============================================================================================
# MOD√àLES DE SANT√â ET R√âCUP√âRATION
# ============================================================================================

@dataclass
class HealthCheckResult(BaseEntity):
    """R√©sultat d'un health check syst√®me."""
    component: str
    check_type: str
    status: str  # "healthy", "degraded", "unhealthy"
    
    # D√©tails
    response_time_ms: float = 0.0
    error_message: Optional[str] = None
    additional_info: Dict[str, Any] = field(default_factory=dict)
    
    # Seuils
    warning_threshold_ms: float = 1000.0
    critical_threshold_ms: float = 5000.0

@dataclass
class BackupRecord(BaseEntity):
    """Enregistrement de sauvegarde."""
    backup_type: str
    file_path: str
    size_bytes: int
    
    # M√©tadonn√©es
    compression_ratio: float = 0.0
    checksum: str = ""
    encryption_enabled: bool = True
    
    # Validation
    integrity_verified: bool = False
    restoration_tested: bool = False
    
    # R√©tention
    retention_period_days: int = 90
    expires_at: Optional[datetime] = None

@dataclass
class RecoveryRecord(BaseEntity):
    """Enregistrement de r√©cup√©ration."""
    incident_id: str
    recovery_type: str
    backup_used: Optional[str] = None
    
    # Timing
    recovery_started_at: datetime = field(default_factory=datetime.utcnow)
    recovery_completed_at: Optional[datetime] = None
    total_recovery_time: Optional[timedelta] = None
    
    # R√©sultats
    success: bool = False
    data_loss_amount: int = 0
    services_restored: List[str] = field(default_factory=list)
    
    # Post-mortem
    root_cause: Optional[str] = None
    lessons_learned: List[str] = field(default_factory=list)
    improvement_actions: List[str] = field(default_factory=list)

# ============================================================================================
# MOD√àLES PYDANTIC POUR VALIDATION API
# ============================================================================================

class SlackAlertAPI(BaseModel):
    """Mod√®le API pour cr√©ation d'alerte Slack."""
    tenant_id: str = Field(..., description="ID du tenant")
    severity: AlertSeverity = Field(..., description="Niveau de s√©v√©rit√©")
    alert_type: AlertType = Field(..., description="Type d'alerte")
    title: str = Field(..., min_length=1, max_length=200, description="Titre de l'alerte")
    message: str = Field(..., min_length=1, max_length=4000, description="Message de l'alerte")
    channel: str = Field(..., regex=r'^#[a-zA-Z0-9_-]+$', description="Canal Slack")
    locale: Locale = Field(default=Locale.FR, description="Locale pour l'internationalisation")
    
    # Champs optionnels
    correlation_id: Optional[str] = Field(None, description="ID de corr√©lation")
    source_system: str = Field(default="achiri-ai-agent", description="Syst√®me source")
    raw_data: Dict[str, Any] = Field(default_factory=dict, description="Donn√©es brutes")
    
    @validator('channel')
    def validate_channel(cls, v):
        if not v.startswith('#'):
            raise ValueError("Le canal doit commencer par #")
        if len(v) < 2:
            raise ValueError("Le canal doit avoir au moins 1 caract√®re apr√®s #")
        return v
    
    @validator('title')
    def validate_title(cls, v):
        if not v.strip():
            raise ValueError("Le titre ne peut pas √™tre vide")
        return v.strip()
    
    @validator('raw_data')
    def validate_raw_data(cls, v):
        # Limiter la taille des donn√©es brutes
        serialized = json.dumps(v)
        if len(serialized) > 10000:  # 10KB max
            raise ValueError("Les donn√©es brutes ne peuvent pas d√©passer 10KB")
        return v

class AlertTemplateAPI(BaseModel):
    """Mod√®le API pour template d'alerte."""
    name: str = Field(..., min_length=1, max_length=100)
    alert_type: AlertType = Field(...)
    severity: AlertSeverity = Field(...)
    locale: Locale = Field(...)
    channel: NotificationChannel = Field(...)
    title_template: str = Field(..., min_length=1, max_length=500)
    message_template: str = Field(..., min_length=1, max_length=4000)
    variables: List[str] = Field(default_factory=list)
    
    @validator('title_template', 'message_template')
    def validate_templates(cls, v):
        # Validation basique des templates Jinja2
        if '{{' in v and '}}' not in v:
            raise ValueError("Template mal form√©: {{ sans }}")
        return v

# ============================================================================================
# FACTORY ET BUILDERS
# ============================================================================================

class AlertFactory:
    """Factory pour cr√©er des alertes optimis√©es."""
    
    @staticmethod
    def create_slack_alert(
        tenant_id: str,
        severity: AlertSeverity,
        title: str,
        message: str,
        channel: str,
        alert_type: AlertType = AlertType.SYSTEM,
        locale: Locale = Locale.FR,
        **kwargs
    ) -> SlackAlert:
        """Cr√©e une alerte Slack optimis√©e."""
        
        # G√©n√©ration d'ID corr√©lation si non fourni
        correlation_id = kwargs.get('correlation_id') or f"corr_{uuid.uuid4().hex[:16]}"
        
        # Calcul automatique du SLA deadline
        sla_mapping = {
            AlertSeverity.CRITICAL: timedelta(minutes=15),
            AlertSeverity.HIGH: timedelta(hours=1),
            AlertSeverity.MEDIUM: timedelta(hours=4),
            AlertSeverity.LOW: timedelta(hours=24),
            AlertSeverity.INFO: timedelta(days=7),
            AlertSeverity.DEBUG: None
        }
        
        sla_deadline = None
        if severity in sla_mapping and sla_mapping[severity]:
            sla_deadline = datetime.utcnow() + sla_mapping[severity]
        
        alert = SlackAlert(
            tenant_id=tenant_id,
            environment=kwargs.get('environment', Environment.DEV),
            severity=severity,
            alert_type=alert_type,
            title=title,
            message=message,
            channel=channel,
            locale=locale,
            correlation_id=correlation_id,
            sla_deadline=sla_deadline,
            source_system=kwargs.get('source_system', 'achiri-ai-agent'),
            raw_data=kwargs.get('raw_data', {}),
            security_level=kwargs.get('security_level', SecurityLevel.INTERNAL)
        )
        
        # Ajout d'audit automatique
        alert.add_audit_entry(
            action="alert_created",
            user=kwargs.get('created_by', 'system'),
            details={"factory": "AlertFactory.create_slack_alert"}
        )
        
        return alert

    @staticmethod
    def create_from_webhook(webhook_data: Dict[str, Any]) -> SlackAlert:
        """Cr√©e une alerte √† partir d'un webhook Alertmanager."""
        
        # Extraction des donn√©es du webhook
        alerts = webhook_data.get('alerts', [])
        if not alerts:
            raise ValueError("Aucune alerte trouv√©e dans le webhook")
        
        first_alert = alerts[0]
        labels = first_alert.get('labels', {})
        annotations = first_alert.get('annotations', {})
        
        # Mapping de la s√©v√©rit√©
        severity_mapping = {
            'critical': AlertSeverity.CRITICAL,
            'warning': AlertSeverity.HIGH,
            'info': AlertSeverity.INFO
        }
        
        severity = severity_mapping.get(
            labels.get('severity', 'info').lower(),
            AlertSeverity.INFO
        )
        
        # Cr√©ation de l'alerte
        return AlertFactory.create_slack_alert(
            tenant_id=labels.get('tenant_id', 'default'),
            severity=severity,
            title=annotations.get('summary', 'Alerte Prometheus'),
            message=annotations.get('description', 'Alerte sans description'),
            channel=labels.get('slack_channel', '#alerts'),
            alert_type=AlertType.SYSTEM,
            source_system='prometheus',
            raw_data=webhook_data,
            correlation_id=first_alert.get('fingerprint')
        )

# ============================================================================================
# UTILITAIRES ET HELPERS
# ============================================================================================

def serialize_for_cache(obj: BaseEntity) -> str:
    """S√©rialise un objet pour le cache."""
    return json.dumps(obj.to_dict(), default=str, sort_keys=True)

def deserialize_from_cache(data: str, model_class: Type[BaseEntity]) -> BaseEntity:
    """D√©s√©rialise un objet depuis le cache."""
    obj_data = json.loads(data)
    return model_class(**obj_data)

def validate_alert_data(data: Dict[str, Any]) -> List[str]:
    """Valide les donn√©es d'une alerte et retourne les erreurs."""
    errors = []
    
    required_fields = ['tenant_id', 'severity', 'title', 'message', 'channel']
    for field in required_fields:
        if field not in data or not data[field]:
            errors.append(f"Champ requis manquant: {field}")
    
    if 'severity' in data:
        try:
            AlertSeverity(data['severity'])
        except ValueError:
            errors.append(f"S√©v√©rit√© invalide: {data['severity']}")
    
    if 'channel' in data and not data['channel'].startswith('#'):
        errors.append("Le canal doit commencer par #")
    
    return errors

def calculate_alert_priority(
    severity: AlertSeverity,
    age_hours: float,
    tenant_priority: int = 100
) -> int:
    """Calcule la priorit√© d'une alerte."""
    severity_weights = {
        AlertSeverity.CRITICAL: 1000,
        AlertSeverity.HIGH: 750,
        AlertSeverity.MEDIUM: 500,
        AlertSeverity.LOW: 250,
        AlertSeverity.INFO: 100,
        AlertSeverity.DEBUG: 50
    }
    
    base_score = severity_weights.get(severity, 0)
    age_factor = min(age_hours * 5, 200)  # Max 200 pour l'√¢ge
    tenant_factor = min(tenant_priority, 500)  # Max 500 pour le tenant
    
    return int(base_score + age_factor + tenant_factor)

# Export de tous les mod√®les
__all__ = [
    # Enums et types
    "AlertSeverity", "Environment", "Locale", "NotificationChannel", 
    "AlertType", "SecurityLevel", "ComplianceStandard",
    
    # Mod√®les de base
    "BaseEntity", "AuditableMixin", "EncryptableMixin",
    
    # Mod√®les principaux
    "SlackAlert", "AlertTemplate", "TenantFixture", "SecurityPolicy",
    "PerformanceMetric", "TenantMetrics", "MLModel", "MLPrediction",
    "AnomalyEvent", "AuditEvent", "MonitoringEvent", "BusinessRule",
    "SLAPolicy", "EscalationEvent", "HealthCheckResult", "BackupRecord",
    "RecoveryRecord",
    
    # Mod√®les API
    "SlackAlertAPI", "AlertTemplateAPI",
    
    # Factory et utilitaires
    "AlertFactory", "serialize_for_cache", "deserialize_from_cache",
    "validate_alert_data", "calculate_alert_priority"
]
