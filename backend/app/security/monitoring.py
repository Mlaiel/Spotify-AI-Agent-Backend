# üîê Security Monitoring & Threat Detection
# ==========================================
# 
# Module de surveillance de s√©curit√© et d√©tection
# des menaces en temps r√©el pour l'enterprise.
#
# üéñÔ∏è Expert: Lead Dev + Architecte IA + Sp√©cialiste S√©curit√© Backend
#
# D√©velopp√© par l'√©quipe d'experts enterprise
# ==========================================

"""
üîê Enterprise Security Monitoring & Threat Detection
====================================================

Advanced security monitoring and threat detection providing:
- Real-time threat detection and analysis
- Behavioral analytics and anomaly detection
- Security event correlation and SIEM integration
- Automated incident response and mitigation
- Threat intelligence integration
- ML-powered attack pattern recognition
- Compliance monitoring and reporting
- Security metrics and dashboards
"""

import asyncio
import hashlib
import json
import time
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple, Set
from enum import Enum
from dataclasses import dataclass, asdict
import redis
import logging
from collections import defaultdict, deque
import geoip2.database
import geoip2.errors
import user_agents
import re
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import joblib

# Configuration et logging
logger = logging.getLogger(__name__)


class ThreatLevel(Enum):
    """Niveaux de menace"""
    INFO = "info"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class EventType(Enum):
    """Types d'√©v√©nements de s√©curit√©"""
    LOGIN_ATTEMPT = "login_attempt"
    LOGIN_SUCCESS = "login_success"
    LOGIN_FAILURE = "login_failure"
    PASSWORD_CHANGE = "password_change"
    PERMISSION_ESCALATION = "permission_escalation"
    DATA_ACCESS = "data_access"
    DATA_EXPORT = "data_export"
    API_ACCESS = "api_access"
    SUSPICIOUS_ACTIVITY = "suspicious_activity"
    MALWARE_DETECTION = "malware_detection"
    BRUTE_FORCE = "brute_force"
    SQL_INJECTION = "sql_injection"
    XSS_ATTEMPT = "xss_attempt"
    CSRF_ATTEMPT = "csrf_attempt"
    DDoS_ATTACK = "ddos_attack"


class AttackVector(Enum):
    """Vecteurs d'attaque"""
    WEB_APPLICATION = "web_application"
    API_ENDPOINT = "api_endpoint"
    DATABASE = "database"
    AUTHENTICATION = "authentication"
    AUTHORIZATION = "authorization"
    SESSION_MANAGEMENT = "session_management"
    INPUT_VALIDATION = "input_validation"
    ENCRYPTION = "encryption"
    NETWORK = "network"
    SOCIAL_ENGINEERING = "social_engineering"


class ResponseAction(Enum):
    """Actions de r√©ponse automatiques"""
    LOG_ONLY = "log_only"
    RATE_LIMIT = "rate_limit"
    TEMPORARY_BLOCK = "temporary_block"
    PERMANENT_BLOCK = "permanent_block"
    CHALLENGE_USER = "challenge_user"
    REQUIRE_MFA = "require_mfa"
    LOCKOUT_ACCOUNT = "lockout_account"
    ALERT_ADMIN = "alert_admin"
    QUARANTINE = "quarantine"
    EMERGENCY_SHUTDOWN = "emergency_shutdown"


@dataclass
class SecurityEvent:
    """√âv√©nement de s√©curit√©"""
    event_id: str
    event_type: EventType
    timestamp: datetime
    user_id: Optional[str]
    ip_address: str
    user_agent: str
    threat_level: ThreatLevel
    attack_vector: Optional[AttackVector]
    details: Dict[str, Any]
    source: str
    location: Optional[Dict[str, str]] = None
    session_id: Optional[str] = None
    request_id: Optional[str] = None
    
    def __post_init__(self):
        if not self.event_id:
            self.event_id = str(uuid.uuid4())


@dataclass
class ThreatIndicator:
    """Indicateur de menace"""
    indicator_id: str
    indicator_type: str  # ip, domain, hash, pattern
    value: str
    threat_level: ThreatLevel
    category: str
    description: str
    source: str
    confidence: float
    created_at: datetime
    expires_at: Optional[datetime] = None
    tags: List[str] = None
    
    def __post_init__(self):
        if self.tags is None:
            self.tags = []


@dataclass
class SecurityIncident:
    """Incident de s√©curit√©"""
    incident_id: str
    title: str
    description: str
    severity: ThreatLevel
    status: str  # open, investigating, resolved, closed
    created_at: datetime
    updated_at: datetime
    assigned_to: Optional[str]
    events: List[str]  # IDs des √©v√©nements
    response_actions: List[ResponseAction]
    metadata: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}


class AdvancedThreatDetector:
    """D√©tecteur avanc√© de menaces"""
    
    def __init__(self, redis_client: redis.Redis):
        self.redis_client = redis_client
        self.logger = logging.getLogger(__name__)
        
        # Configuration
        self.event_retention_days = 90
        self.anomaly_detection_window = 3600  # 1 heure
        self.threat_score_threshold = 0.7
        
        # Mod√®les ML pour d√©tection d'anomalies
        self.anomaly_detector = None
        self.scaler = None
        
        # GeoIP pour g√©olocalisation
        self.geoip_reader = None
        try:
            self.geoip_reader = geoip2.database.Reader('/usr/share/GeoIP/GeoLite2-City.mmdb')
        except Exception:
            self.logger.warning("Base de donn√©es GeoIP non disponible")
        
        # Patterns d'attaque
        self.attack_patterns = {
            EventType.SQL_INJECTION: [
                r"union\s+select",
                r"or\s+1\s*=\s*1",
                r"drop\s+table",
                r"insert\s+into",
                r"delete\s+from",
                r"update\s+.*\s+set",
                r"--\s*$",
                r"/\*.*\*/"
            ],
            EventType.XSS_ATTEMPT: [
                r"<script.*?>",
                r"javascript:",
                r"on\w+\s*=",
                r"<iframe.*?>",
                r"<object.*?>",
                r"eval\s*\(",
                r"document\.cookie"
            ],
            EventType.BRUTE_FORCE: [
                # D√©tect√© par analyse comportementale
            ]
        }
        
        # Initialiser le d√©tecteur d'anomalies
        asyncio.create_task(self._initialize_ml_models())
    
    async def process_security_event(
        self,
        event_type: EventType,
        user_id: Optional[str],
        ip_address: str,
        user_agent: str,
        details: Dict[str, Any],
        source: str = "application"
    ) -> SecurityEvent:
        """Traite un √©v√©nement de s√©curit√©"""
        try:
            # Cr√©er l'√©v√©nement
            event = SecurityEvent(
                event_id=str(uuid.uuid4()),
                event_type=event_type,
                timestamp=datetime.utcnow(),
                user_id=user_id,
                ip_address=ip_address,
                user_agent=user_agent,
                threat_level=ThreatLevel.INFO,  # Initial, sera recalcul√©
                attack_vector=None,
                details=details,
                source=source
            )
            
            # Enrichir l'√©v√©nement
            await self._enrich_event(event)
            
            # Analyser la menace
            threat_analysis = await self._analyze_threat(event)
            event.threat_level = threat_analysis["threat_level"]
            event.attack_vector = threat_analysis.get("attack_vector")
            
            # Stocker l'√©v√©nement
            await self._store_security_event(event)
            
            # D√©tecter les patterns d'attaque
            await self._detect_attack_patterns(event)
            
            # Corr√©ler avec d'autres √©v√©nements
            correlations = await self._correlate_events(event)
            
            # D√©clencher les r√©ponses automatiques
            if event.threat_level in [ThreatLevel.HIGH, ThreatLevel.CRITICAL]:
                await self._trigger_automated_response(event, correlations)
            
            # Mettre √† jour les m√©triques
            await self._update_security_metrics(event)
            
            self.logger.info(f"√âv√©nement de s√©curit√© trait√©: {event.event_id} ({event.threat_level.value})")
            return event
            
        except Exception as exc:
            self.logger.error(f"Erreur traitement √©v√©nement s√©curit√©: {exc}")
            raise
    
    async def detect_anomalies(
        self,
        user_id: str,
        time_window: int = 3600
    ) -> List[Dict[str, Any]]:
        """D√©tecte les anomalies comportementales"""
        try:
            # R√©cup√©rer l'historique des √©v√©nements
            events = await self._get_user_events(user_id, time_window)
            
            if len(events) < 10:  # Pas assez de donn√©es
                return []
            
            # Extraire les features
            features = await self._extract_behavioral_features(events)
            
            # D√©tecter les anomalies avec ML
            anomalies = await self._detect_ml_anomalies(features)
            
            return anomalies
            
        except Exception as exc:
            self.logger.error(f"Erreur d√©tection anomalies utilisateur {user_id}: {exc}")
            return []
    
    async def get_threat_intelligence(
        self,
        indicator: str,
        indicator_type: str = "ip"
    ) -> Optional[ThreatIndicator]:
        """R√©cup√®re les informations de threat intelligence"""
        try:
            # Chercher dans le cache local
            ti_data = await self.redis_client.get(f"threat_intel:{indicator_type}:{indicator}")
            
            if ti_data:
                ti_dict = json.loads(ti_data)
                return ThreatIndicator(**ti_dict)
            
            # Interroger les sources externes (impl√©mentation simplifi√©e)
            external_ti = await self._query_external_threat_intel(indicator, indicator_type)
            
            if external_ti:
                # Mettre en cache
                await self.redis_client.setex(
                    f"threat_intel:{indicator_type}:{indicator}",
                    3600,  # 1 heure
                    json.dumps(asdict(external_ti), default=str)
                )
                
                return external_ti
            
            return None
            
        except Exception as exc:
            self.logger.error(f"Erreur r√©cup√©ration threat intelligence: {exc}")
            return None
    
    async def create_security_incident(
        self,
        title: str,
        description: str,
        severity: ThreatLevel,
        event_ids: List[str],
        response_actions: List[ResponseAction] = None
    ) -> SecurityIncident:
        """Cr√©e un incident de s√©curit√©"""
        try:
            incident = SecurityIncident(
                incident_id=str(uuid.uuid4()),
                title=title,
                description=description,
                severity=severity,
                status="open",
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow(),
                assigned_to=None,
                events=event_ids,
                response_actions=response_actions or []
            )
            
            # Stocker l'incident
            await self._store_security_incident(incident)
            
            # Notifier les √©quipes de s√©curit√©
            await self._notify_security_team(incident)
            
            self.logger.warning(f"Incident de s√©curit√© cr√©√©: {incident.incident_id} ({severity.value})")
            return incident
            
        except Exception as exc:
            self.logger.error(f"Erreur cr√©ation incident s√©curit√©: {exc}")
            raise
    
    async def get_security_dashboard_data(
        self,
        time_range: int = 86400  # 24 heures
    ) -> Dict[str, Any]:
        """R√©cup√®re les donn√©es pour le tableau de bord s√©curit√©"""
        try:
            end_time = datetime.utcnow()
            start_time = end_time - timedelta(seconds=time_range)
            
            # M√©triques g√©n√©rales
            total_events = await self._count_events_in_range(start_time, end_time)
            events_by_type = await self._get_events_by_type(start_time, end_time)
            events_by_threat_level = await self._get_events_by_threat_level(start_time, end_time)
            
            # Top des IPs suspectes
            suspicious_ips = await self._get_top_suspicious_ips(start_time, end_time)
            
            # Incidents actifs
            active_incidents = await self._get_active_incidents()
            
            # Tendances horaires
            hourly_trends = await self._get_hourly_event_trends(start_time, end_time)
            
            return {
                "period": {
                    "start": start_time.isoformat(),
                    "end": end_time.isoformat()
                },
                "metrics": {
                    "total_events": total_events,
                    "events_by_type": events_by_type,
                    "events_by_threat_level": events_by_threat_level,
                    "active_incidents": len(active_incidents)
                },
                "threats": {
                    "suspicious_ips": suspicious_ips,
                    "active_incidents": active_incidents
                },
                "trends": {
                    "hourly": hourly_trends
                }
            }
            
        except Exception as exc:
            self.logger.error(f"Erreur r√©cup√©ration donn√©es tableau de bord: {exc}")
            return {}
    
    # M√©thodes priv√©es
    async def _enrich_event(self, event: SecurityEvent):
        """Enrichit un √©v√©nement avec des m√©tadonn√©es"""
        try:
            # G√©olocalisation
            if self.geoip_reader:
                try:
                    response = self.geoip_reader.city(event.ip_address)
                    event.location = {
                        "country": response.country.name,
                        "country_code": response.country.iso_code,
                        "city": response.city.name,
                        "latitude": str(response.location.latitude),
                        "longitude": str(response.location.longitude)
                    }
                except (geoip2.errors.AddressNotFoundError, Exception):
                    pass
            
            # Analyse User-Agent
            if event.user_agent:
                ua = user_agents.parse(event.user_agent)
                event.details.update({
                    "browser": ua.browser.family,
                    "browser_version": ua.browser.version_string,
                    "os": ua.os.family,
                    "os_version": ua.os.version_string,
                    "device": ua.device.family,
                    "is_mobile": ua.is_mobile,
                    "is_bot": ua.is_bot
                })
            
            # Threat Intelligence
            threat_info = await self.get_threat_intelligence(event.ip_address, "ip")
            if threat_info:
                event.details["threat_intel"] = {
                    "threat_level": threat_info.threat_level.value,
                    "category": threat_info.category,
                    "confidence": threat_info.confidence,
                    "source": threat_info.source
                }
            
        except Exception as exc:
            self.logger.error(f"Erreur enrichissement √©v√©nement: {exc}")
    
    async def _analyze_threat(self, event: SecurityEvent) -> Dict[str, Any]:
        """Analyse le niveau de menace d'un √©v√©nement"""
        try:
            threat_score = 0.0
            attack_vector = None
            
            # Score bas√© sur le type d'√©v√©nement
            event_scores = {
                EventType.LOGIN_FAILURE: 0.2,
                EventType.LOGIN_SUCCESS: 0.1,
                EventType.PASSWORD_CHANGE: 0.3,
                EventType.PERMISSION_ESCALATION: 0.8,
                EventType.DATA_EXPORT: 0.6,
                EventType.SUSPICIOUS_ACTIVITY: 0.7,
                EventType.MALWARE_DETECTION: 0.9,
                EventType.BRUTE_FORCE: 0.8,
                EventType.SQL_INJECTION: 0.9,
                EventType.XSS_ATTEMPT: 0.7,
                EventType.DDoS_ATTACK: 0.8
            }
            
            threat_score += event_scores.get(event.event_type, 0.1)
            
            # Score bas√© sur la threat intelligence
            if "threat_intel" in event.details:
                ti = event.details["threat_intel"]
                threat_score += ti["confidence"] * 0.5
                
                if ti["threat_level"] in ["high", "critical"]:
                    threat_score += 0.3
            
            # Score bas√© sur la g√©olocalisation
            if event.location:
                # V√©rifier si c'est un pays √† risque (liste simplifi√©e)
                high_risk_countries = ["CN", "RU", "KP", "IR"]
                if event.location.get("country_code") in high_risk_countries:
                    threat_score += 0.2
            
            # Score bas√© sur l'heure (activit√© nocturne suspecte)
            hour = event.timestamp.hour
            if hour < 6 or hour > 22:  # Entre 22h et 6h
                threat_score += 0.1
            
            # Score bas√© sur les patterns d'attaque
            for attack_type, patterns in self.attack_patterns.items():
                for pattern in patterns:
                    for detail_value in event.details.values():
                        if isinstance(detail_value, str) and re.search(pattern, detail_value, re.IGNORECASE):
                            threat_score += 0.4
                            attack_vector = self._map_event_to_attack_vector(attack_type)
                            break
            
            # D√©terminer le niveau de menace
            if threat_score < 0.3:
                threat_level = ThreatLevel.LOW
            elif threat_score < 0.5:
                threat_level = ThreatLevel.MEDIUM
            elif threat_score < 0.8:
                threat_level = ThreatLevel.HIGH
            else:
                threat_level = ThreatLevel.CRITICAL
            
            return {
                "threat_level": threat_level,
                "threat_score": threat_score,
                "attack_vector": attack_vector
            }
            
        except Exception as exc:
            self.logger.error(f"Erreur analyse menace: {exc}")
            return {
                "threat_level": ThreatLevel.LOW,
                "threat_score": 0.0,
                "attack_vector": None
            }
    
    async def _detect_attack_patterns(self, event: SecurityEvent):
        """D√©tecte les patterns d'attaque sp√©cifiques"""
        try:
            # D√©tection de brute force
            if event.event_type == EventType.LOGIN_FAILURE:
                await self._detect_brute_force(event)
            
            # D√©tection d'escalade de privil√®ges
            if event.event_type == EventType.PERMISSION_ESCALATION:
                await self._detect_privilege_escalation(event)
            
            # D√©tection d'acc√®s anormal aux donn√©es
            if event.event_type == EventType.DATA_ACCESS:
                await self._detect_abnormal_data_access(event)
            
        except Exception as exc:
            self.logger.error(f"Erreur d√©tection patterns d'attaque: {exc}")
    
    async def _detect_brute_force(self, event: SecurityEvent):
        """D√©tecte les attaques par force brute"""
        try:
            # Compter les √©checs de connexion r√©cents
            window = 300  # 5 minutes
            threshold = 5
            
            recent_failures = await self._count_recent_failures(
                event.ip_address,
                event.user_id,
                window
            )
            
            if recent_failures >= threshold:
                # Cr√©er un √©v√©nement de brute force
                brute_force_event = SecurityEvent(
                    event_id=str(uuid.uuid4()),
                    event_type=EventType.BRUTE_FORCE,
                    timestamp=datetime.utcnow(),
                    user_id=event.user_id,
                    ip_address=event.ip_address,
                    user_agent=event.user_agent,
                    threat_level=ThreatLevel.HIGH,
                    attack_vector=AttackVector.AUTHENTICATION,
                    details={
                        "failure_count": recent_failures,
                        "time_window": window,
                        "related_event": event.event_id
                    },
                    source="threat_detector"
                )
                
                await self._store_security_event(brute_force_event)
                
                # D√©clencher une r√©ponse automatique
                await self._trigger_automated_response(brute_force_event, [])
            
        except Exception as exc:
            self.logger.error(f"Erreur d√©tection brute force: {exc}")
    
    async def _correlate_events(self, event: SecurityEvent) -> List[SecurityEvent]:
        """Corr√®le un √©v√©nement avec d'autres √©v√©nements"""
        try:
            correlations = []
            
            # Corr√©ler par IP
            ip_events = await self._get_events_by_ip(event.ip_address, 3600)  # 1 heure
            correlations.extend(ip_events)
            
            # Corr√©ler par utilisateur
            if event.user_id:
                user_events = await self._get_user_events(event.user_id, 1800)  # 30 minutes
                correlations.extend(user_events)
            
            # Filtrer les doublons
            unique_correlations = []
            seen_ids = set()
            
            for corr_event in correlations:
                if corr_event.event_id not in seen_ids and corr_event.event_id != event.event_id:
                    unique_correlations.append(corr_event)
                    seen_ids.add(corr_event.event_id)
            
            return unique_correlations
            
        except Exception as exc:
            self.logger.error(f"Erreur corr√©lation √©v√©nements: {exc}")
            return []
    
    async def _trigger_automated_response(
        self,
        event: SecurityEvent,
        correlations: List[SecurityEvent]
    ):
        """D√©clenche une r√©ponse automatique"""
        try:
            actions = []
            
            # D√©terminer les actions selon le type de menace
            if event.event_type == EventType.BRUTE_FORCE:
                actions = [ResponseAction.TEMPORARY_BLOCK, ResponseAction.ALERT_ADMIN]
            elif event.event_type == EventType.SQL_INJECTION:
                actions = [ResponseAction.PERMANENT_BLOCK, ResponseAction.ALERT_ADMIN]
            elif event.threat_level == ThreatLevel.CRITICAL:
                actions = [ResponseAction.EMERGENCY_SHUTDOWN, ResponseAction.ALERT_ADMIN]
            elif event.threat_level == ThreatLevel.HIGH:
                actions = [ResponseAction.RATE_LIMIT, ResponseAction.REQUIRE_MFA, ResponseAction.ALERT_ADMIN]
            
            # Ex√©cuter les actions
            for action in actions:
                await self._execute_response_action(action, event)
            
            # Enregistrer les actions prises
            response_log = {
                "event_id": event.event_id,
                "actions": [action.value for action in actions],
                "timestamp": datetime.utcnow().isoformat()
            }
            
            await self.redis_client.lpush(
                "automated_responses",
                json.dumps(response_log)
            )
            
        except Exception as exc:
            self.logger.error(f"Erreur r√©ponse automatique: {exc}")
    
    async def _execute_response_action(self, action: ResponseAction, event: SecurityEvent):
        """Ex√©cute une action de r√©ponse"""
        try:
            if action == ResponseAction.TEMPORARY_BLOCK:
                await self._block_ip_temporarily(event.ip_address, 3600)  # 1 heure
            
            elif action == ResponseAction.PERMANENT_BLOCK:
                await self._block_ip_permanently(event.ip_address)
            
            elif action == ResponseAction.RATE_LIMIT:
                await self._apply_rate_limit(event.ip_address, event.user_id)
            
            elif action == ResponseAction.REQUIRE_MFA:
                await self._require_mfa_for_user(event.user_id)
            
            elif action == ResponseAction.LOCKOUT_ACCOUNT:
                await self._lockout_user_account(event.user_id)
            
            elif action == ResponseAction.ALERT_ADMIN:
                await self._send_admin_alert(event)
            
            elif action == ResponseAction.EMERGENCY_SHUTDOWN:
                await self._trigger_emergency_shutdown(event)
            
            self.logger.info(f"Action de r√©ponse ex√©cut√©e: {action.value} pour {event.event_id}")
            
        except Exception as exc:
            self.logger.error(f"Erreur ex√©cution action {action.value}: {exc}")
    
    async def _initialize_ml_models(self):
        """Initialise les mod√®les ML pour la d√©tection d'anomalies"""
        try:
            # Mod√®le d'isolation forest pour d√©tection d'anomalies
            self.anomaly_detector = IsolationForest(
                contamination=0.1,  # 10% d'anomalies attendues
                random_state=42,
                n_estimators=100
            )
            
            # Scaler pour normaliser les features
            self.scaler = StandardScaler()
            
            # Charger un mod√®le pr√©-entra√Æn√© s'il existe
            try:
                self.anomaly_detector = joblib.load('anomaly_detector.pkl')
                self.scaler = joblib.load('scaler.pkl')
                self.logger.info("Mod√®les ML charg√©s depuis le disque")
            except FileNotFoundError:
                self.logger.info("Nouveaux mod√®les ML initialis√©s")
            
        except Exception as exc:
            self.logger.error(f"Erreur initialisation mod√®les ML: {exc}")
    
    async def _extract_behavioral_features(self, events: List[SecurityEvent]) -> np.ndarray:
        """Extrait les features comportementales des √©v√©nements"""
        try:
            features = []
            
            for event in events:
                feature_vector = [
                    # Features temporelles
                    event.timestamp.hour,
                    event.timestamp.weekday(),
                    
                    # Features de g√©olocalisation
                    float(event.location.get("latitude", 0)) if event.location else 0,
                    float(event.location.get("longitude", 0)) if event.location else 0,
                    
                    # Features d'√©v√©nement
                    len(EventType.__members__) if event.event_type else 0,
                    len(ThreatLevel.__members__) if event.threat_level else 0,
                    
                    # Features de session
                    len(event.user_agent) if event.user_agent else 0,
                    1 if event.details.get("is_mobile", False) else 0,
                    1 if event.details.get("is_bot", False) else 0,
                    
                    # Features de threat intel
                    event.details.get("threat_intel", {}).get("confidence", 0),
                ]
                
                features.append(feature_vector)
            
            return np.array(features)
            
        except Exception as exc:
            self.logger.error(f"Erreur extraction features: {exc}")
            return np.array([])
    
    async def _detect_ml_anomalies(self, features: np.ndarray) -> List[Dict[str, Any]]:
        """D√©tecte les anomalies avec ML"""
        try:
            if len(features) == 0 or self.anomaly_detector is None:
                return []
            
            # Normaliser les features
            features_scaled = self.scaler.fit_transform(features)
            
            # Pr√©dire les anomalies
            anomaly_predictions = self.anomaly_detector.predict(features_scaled)
            anomaly_scores = self.anomaly_detector.decision_function(features_scaled)
            
            # Identifier les anomalies
            anomalies = []
            for i, (prediction, score) in enumerate(zip(anomaly_predictions, anomaly_scores)):
                if prediction == -1:  # Anomalie d√©tect√©e
                    anomalies.append({
                        "index": i,
                        "anomaly_score": float(score),
                        "confidence": abs(float(score))
                    })
            
            return anomalies
            
        except Exception as exc:
            self.logger.error(f"Erreur d√©tection anomalies ML: {exc}")
            return []
    
    # M√©thodes utilitaires
    async def _store_security_event(self, event: SecurityEvent):
        """Stocke un √©v√©nement de s√©curit√©"""
        try:
            event_data = json.dumps(asdict(event), default=str)
            
            # Stocker avec TTL
            ttl = self.event_retention_days * 86400
            await self.redis_client.setex(f"security_event:{event.event_id}", ttl, event_data)
            
            # Ajouter aux index
            await self.redis_client.zadd(
                "events_by_time",
                {event.event_id: event.timestamp.timestamp()}
            )
            
            await self.redis_client.sadd(f"events_by_ip:{event.ip_address}", event.event_id)
            
            if event.user_id:
                await self.redis_client.sadd(f"events_by_user:{event.user_id}", event.event_id)
            
        except Exception as exc:
            self.logger.error(f"Erreur stockage √©v√©nement: {exc}")
    
    async def _get_user_events(self, user_id: str, time_window: int) -> List[SecurityEvent]:
        """R√©cup√®re les √©v√©nements d'un utilisateur"""
        try:
            event_ids = await self.redis_client.smembers(f"events_by_user:{user_id}")
            events = []
            
            cutoff_time = datetime.utcnow() - timedelta(seconds=time_window)
            
            for event_id in event_ids:
                event_id_str = event_id.decode() if isinstance(event_id, bytes) else event_id
                event_data = await self.redis_client.get(f"security_event:{event_id_str}")
                
                if event_data:
                    event_dict = json.loads(event_data)
                    event_time = datetime.fromisoformat(event_dict["timestamp"])
                    
                    if event_time > cutoff_time:
                        events.append(SecurityEvent(**event_dict))
            
            return events
            
        except Exception as exc:
            self.logger.error(f"Erreur r√©cup√©ration √©v√©nements utilisateur: {exc}")
            return []
    
    async def _get_events_by_ip(self, ip_address: str, time_window: int) -> List[SecurityEvent]:
        """R√©cup√®re les √©v√©nements par IP"""
        try:
            event_ids = await self.redis_client.smembers(f"events_by_ip:{ip_address}")
            events = []
            
            cutoff_time = datetime.utcnow() - timedelta(seconds=time_window)
            
            for event_id in event_ids:
                event_id_str = event_id.decode() if isinstance(event_id, bytes) else event_id
                event_data = await self.redis_client.get(f"security_event:{event_id_str}")
                
                if event_data:
                    event_dict = json.loads(event_data)
                    event_time = datetime.fromisoformat(event_dict["timestamp"])
                    
                    if event_time > cutoff_time:
                        events.append(SecurityEvent(**event_dict))
            
            return events
            
        except Exception as exc:
            self.logger.error(f"Erreur r√©cup√©ration √©v√©nements IP: {exc}")
            return []
    
    async def _count_recent_failures(self, ip_address: str, user_id: Optional[str], window: int) -> int:
        """Compte les √©checs de connexion r√©cents"""
        try:
            # Impl√©mentation simplifi√©e
            # Dans un vrai syst√®me, interroger la base de donn√©es d'√©v√©nements
            return 0
            
        except Exception as exc:
            self.logger.error(f"Erreur comptage √©checs r√©cents: {exc}")
            return 0
    
    async def _query_external_threat_intel(
        self,
        indicator: str,
        indicator_type: str
    ) -> Optional[ThreatIndicator]:
        """Interroge les sources externes de threat intelligence"""
        try:
            # Impl√©mentation simplifi√©e
            # Dans un vrai syst√®me, interroger VirusTotal, AbuseIPDB, etc.
            return None
            
        except Exception as exc:
            self.logger.error(f"Erreur requ√™te threat intel externe: {exc}")
            return None
    
    # Actions de r√©ponse
    async def _block_ip_temporarily(self, ip_address: str, duration: int):
        """Bloque temporairement une IP"""
        try:
            await self.redis_client.setex(f"blocked_ip:{ip_address}", duration, "temporary")
            self.logger.info(f"IP bloqu√©e temporairement: {ip_address} pour {duration}s")
        except Exception as exc:
            self.logger.error(f"Erreur blocage temporaire IP: {exc}")
    
    async def _block_ip_permanently(self, ip_address: str):
        """Bloque d√©finitivement une IP"""
        try:
            await self.redis_client.set(f"blocked_ip:{ip_address}", "permanent")
            self.logger.warning(f"IP bloqu√©e d√©finitivement: {ip_address}")
        except Exception as exc:
            self.logger.error(f"Erreur blocage permanent IP: {exc}")
    
    async def _apply_rate_limit(self, ip_address: str, user_id: Optional[str]):
        """Applique une limitation de taux"""
        try:
            # Impl√©mentation simplifi√©e
            await self.redis_client.setex(f"rate_limit:{ip_address}", 3600, "restricted")
            self.logger.info(f"Limitation de taux appliqu√©e: {ip_address}")
        except Exception as exc:
            self.logger.error(f"Erreur application rate limit: {exc}")
    
    async def _require_mfa_for_user(self, user_id: Optional[str]):
        """Exige l'authentification multifacteur"""
        try:
            if user_id:
                await self.redis_client.setex(f"require_mfa:{user_id}", 86400, "required")
                self.logger.info(f"MFA requis pour utilisateur: {user_id}")
        except Exception as exc:
            self.logger.error(f"Erreur exigence MFA: {exc}")
    
    async def _lockout_user_account(self, user_id: Optional[str]):
        """Verrouille un compte utilisateur"""
        try:
            if user_id:
                await self.redis_client.setex(f"locked_account:{user_id}", 86400, "locked")
                self.logger.warning(f"Compte utilisateur verrouill√©: {user_id}")
        except Exception as exc:
            self.logger.error(f"Erreur verrouillage compte: {exc}")
    
    async def _send_admin_alert(self, event: SecurityEvent):
        """Envoie une alerte aux administrateurs"""
        try:
            alert = {
                "timestamp": datetime.utcnow().isoformat(),
                "event_id": event.event_id,
                "threat_level": event.threat_level.value,
                "event_type": event.event_type.value,
                "ip_address": event.ip_address,
                "user_id": event.user_id,
                "details": event.details
            }
            
            await self.redis_client.lpush("admin_alerts", json.dumps(alert))
            self.logger.critical(f"Alerte admin envoy√©e pour √©v√©nement: {event.event_id}")
        except Exception as exc:
            self.logger.error(f"Erreur envoi alerte admin: {exc}")
    
    async def _trigger_emergency_shutdown(self, event: SecurityEvent):
        """D√©clenche un arr√™t d'urgence"""
        try:
            # Impl√©mentation d√©pendante de l'infrastructure
            self.logger.critical(f"ARR√äT D'URGENCE D√âCLENCH√â pour √©v√©nement: {event.event_id}")
            
            # Notifier tous les services
            emergency_signal = {
                "action": "emergency_shutdown",
                "reason": event.event_type.value,
                "timestamp": datetime.utcnow().isoformat(),
                "event_id": event.event_id
            }
            
            await self.redis_client.publish("emergency_channel", json.dumps(emergency_signal))
            
        except Exception as exc:
            self.logger.error(f"Erreur arr√™t d'urgence: {exc}")
    
    # M√©thodes utilitaires pour le dashboard
    async def _count_events_in_range(self, start_time: datetime, end_time: datetime) -> int:
        """Compte les √©v√©nements dans une plage de temps"""
        try:
            # Impl√©mentation simplifi√©e
            return 0
        except Exception:
            return 0
    
    async def _get_events_by_type(self, start_time: datetime, end_time: datetime) -> Dict[str, int]:
        """R√©cup√®re les √©v√©nements par type"""
        try:
            # Impl√©mentation simplifi√©e
            return {}
        except Exception:
            return {}
    
    async def _get_events_by_threat_level(self, start_time: datetime, end_time: datetime) -> Dict[str, int]:
        """R√©cup√®re les √©v√©nements par niveau de menace"""
        try:
            # Impl√©mentation simplifi√©e
            return {}
        except Exception:
            return {}
    
    async def _get_top_suspicious_ips(self, start_time: datetime, end_time: datetime) -> List[Dict[str, Any]]:
        """R√©cup√®re les IPs les plus suspectes"""
        try:
            # Impl√©mentation simplifi√©e
            return []
        except Exception:
            return []
    
    async def _get_active_incidents(self) -> List[Dict[str, Any]]:
        """R√©cup√®re les incidents actifs"""
        try:
            # Impl√©mentation simplifi√©e
            return []
        except Exception:
            return []
    
    async def _get_hourly_event_trends(self, start_time: datetime, end_time: datetime) -> List[Dict[str, Any]]:
        """R√©cup√®re les tendances horaires des √©v√©nements"""
        try:
            # Impl√©mentation simplifi√©e
            return []
        except Exception:
            return []
    
    async def _store_security_incident(self, incident: SecurityIncident):
        """Stocke un incident de s√©curit√©"""
        try:
            incident_data = json.dumps(asdict(incident), default=str)
            await self.redis_client.set(f"security_incident:{incident.incident_id}", incident_data)
            
            # Ajouter √† l'index des incidents actifs
            if incident.status in ["open", "investigating"]:
                await self.redis_client.sadd("active_incidents", incident.incident_id)
                
        except Exception as exc:
            self.logger.error(f"Erreur stockage incident: {exc}")
    
    async def _notify_security_team(self, incident: SecurityIncident):
        """Notifie l'√©quipe de s√©curit√©"""
        try:
            notification = {
                "incident_id": incident.incident_id,
                "title": incident.title,
                "severity": incident.severity.value,
                "timestamp": incident.created_at.isoformat()
            }
            
            await self.redis_client.lpush("security_notifications", json.dumps(notification))
            
        except Exception as exc:
            self.logger.error(f"Erreur notification √©quipe s√©curit√©: {exc}")
    
    async def _update_security_metrics(self, event: SecurityEvent):
        """Met √† jour les m√©triques de s√©curit√©"""
        try:
            # Incr√©menter les compteurs globaux
            await self.redis_client.incr("security_metrics:total_events")
            await self.redis_client.incr(f"security_metrics:events_by_type:{event.event_type.value}")
            await self.redis_client.incr(f"security_metrics:events_by_threat:{event.threat_level.value}")
            
            # M√©triques par heure
            hour_key = event.timestamp.strftime("%Y-%m-%d-%H")
            await self.redis_client.incr(f"security_metrics:hourly:{hour_key}")
            
        except Exception as exc:
            self.logger.error(f"Erreur mise √† jour m√©triques: {exc}")
    
    def _map_event_to_attack_vector(self, event_type: EventType) -> Optional[AttackVector]:
        """Mappe un type d'√©v√©nement vers un vecteur d'attaque"""
        mapping = {
            EventType.SQL_INJECTION: AttackVector.DATABASE,
            EventType.XSS_ATTEMPT: AttackVector.WEB_APPLICATION,
            EventType.BRUTE_FORCE: AttackVector.AUTHENTICATION,
            EventType.PERMISSION_ESCALATION: AttackVector.AUTHORIZATION,
            EventType.CSRF_ATTEMPT: AttackVector.WEB_APPLICATION,
            EventType.DDoS_ATTACK: AttackVector.NETWORK
        }
        
        return mapping.get(event_type)


class ComplianceMonitor:
    """Moniteur de conformit√©"""
    
    def __init__(self, redis_client: redis.Redis):
        self.redis_client = redis_client
        self.logger = logging.getLogger(__name__)
    
    async def check_gdpr_compliance(self, user_id: str) -> Dict[str, Any]:
        """V√©rifie la conformit√© GDPR"""
        try:
            # V√©rifier le consentement
            consent_status = await self._check_user_consent(user_id)
            
            # V√©rifier la conservation des donn√©es
            data_retention = await self._check_data_retention(user_id)
            
            # V√©rifier les droits des utilisateurs
            user_rights = await self._check_user_rights_compliance(user_id)
            
            return {
                "consent": consent_status,
                "data_retention": data_retention,
                "user_rights": user_rights,
                "overall_compliant": all([consent_status, data_retention, user_rights])
            }
            
        except Exception as exc:
            self.logger.error(f"Erreur v√©rification conformit√© GDPR: {exc}")
            return {"overall_compliant": False, "error": str(exc)}
    
    async def _check_user_consent(self, user_id: str) -> bool:
        """V√©rifie le consentement utilisateur"""
        # Impl√©mentation simplifi√©e
        return True
    
    async def _check_data_retention(self, user_id: str) -> bool:
        """V√©rifie la politique de conservation des donn√©es"""
        # Impl√©mentation simplifi√©e
        return True
    
    async def _check_user_rights_compliance(self, user_id: str) -> bool:
        """V√©rifie le respect des droits utilisateur"""
        # Impl√©mentation simplifi√©e
        return True
