# üîê Advanced Encryption & Data Protection
# ========================================
# 
# Module de chiffrement avanc√© et protection
# des donn√©es pour l'enterprise avec HSM et conformit√©.
#
# üéñÔ∏è Expert: Lead Dev + Architecte IA + Sp√©cialiste S√©curit√© Backend
#
# D√©velopp√© par l'√©quipe d'experts enterprise
# ========================================

"""
üîê Enterprise Encryption & Data Protection
==========================================

Advanced encryption and data protection providing:
- Multi-layered encryption with key rotation
- Hardware Security Module (HSM) integration
- Field-level encryption for sensitive data
- Secure key management and escrow
- Data masking and tokenization
- Compliance support (GDPR, HIPAA, PCI-DSS)
- Encryption at rest and in transit
- Zero-knowledge encryption patterns
"""

import asyncio
import hashlib
import hmac
import secrets
import time
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple, Union, BinaryIO
from enum import Enum
from dataclasses import dataclass, asdict
import base64
import json
import redis
import logging
from cryptography.hazmat.primitives import hashes, serialization, padding as sym_padding
from cryptography.hazmat.primitives.asymmetric import rsa, padding, ec
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from cryptography.fernet import Fernet, MultiFernet
from cryptography.hazmat.backends import default_backend
import os

# Configuration et logging
logger = logging.getLogger(__name__)


class EncryptionAlgorithm(Enum):
    """Algorithmes de chiffrement support√©s"""
    AES_256_GCM = "aes-256-gcm"
    AES_256_CBC = "aes-256-cbc"
    AES_256_CTR = "aes-256-ctr"
    CHACHA20_POLY1305 = "chacha20-poly1305"
    RSA_OAEP = "rsa-oaep"
    RSA_PSS = "rsa-pss"
    ECDSA_P256 = "ecdsa-p256"
    ECDH_P256 = "ecdh-p256"
    FERNET = "fernet"
    MULTI_FERNET = "multi-fernet"


class KeyType(Enum):
    """Types de cl√©s"""
    SYMMETRIC = "symmetric"
    ASYMMETRIC_PRIVATE = "asymmetric_private"
    ASYMMETRIC_PUBLIC = "asymmetric_public"
    MASTER_KEY = "master_key"
    DATA_ENCRYPTION_KEY = "dek"
    KEY_ENCRYPTION_KEY = "kek"


class DataClassification(Enum):
    """Classification des donn√©es"""
    PUBLIC = "public"
    INTERNAL = "internal"
    CONFIDENTIAL = "confidential"
    RESTRICTED = "restricted"
    TOP_SECRET = "top_secret"


class ComplianceStandard(Enum):
    """Standards de conformit√©"""
    GDPR = "gdpr"
    HIPAA = "hipaa"
    PCI_DSS = "pci_dss"
    SOX = "sox"
    ISO_27001 = "iso_27001"
    FIPS_140_2 = "fips_140_2"


@dataclass
class EncryptionKey:
    """Cl√© de chiffrement"""
    key_id: str
    key_type: KeyType
    algorithm: EncryptionAlgorithm
    key_material: bytes
    created_at: datetime
    expires_at: Optional[datetime]
    version: int = 1
    usage_count: int = 0
    max_usage_count: Optional[int] = None
    metadata: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}


@dataclass
class EncryptionContext:
    """Contexte de chiffrement"""
    data_classification: DataClassification
    compliance_requirements: List[ComplianceStandard]
    field_name: Optional[str] = None
    user_id: Optional[str] = None
    purpose: Optional[str] = None
    retention_period: Optional[timedelta] = None
    metadata: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}


@dataclass
class EncryptedData:
    """Donn√©es chiffr√©es"""
    ciphertext: bytes
    algorithm: EncryptionAlgorithm
    key_id: str
    iv: Optional[bytes]
    tag: Optional[bytes]
    metadata: Dict[str, Any]
    encrypted_at: datetime
    
    def to_dict(self) -> Dict[str, Any]:
        """Conversion en dictionnaire pour s√©rialisation"""
        return {
            "ciphertext": base64.b64encode(self.ciphertext).decode(),
            "algorithm": self.algorithm.value,
            "key_id": self.key_id,
            "iv": base64.b64encode(self.iv).decode() if self.iv else None,
            "tag": base64.b64encode(self.tag).decode() if self.tag else None,
            "metadata": self.metadata,
            "encrypted_at": self.encrypted_at.isoformat()
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'EncryptedData':
        """Cr√©ation depuis un dictionnaire"""
        return cls(
            ciphertext=base64.b64decode(data["ciphertext"]),
            algorithm=EncryptionAlgorithm(data["algorithm"]),
            key_id=data["key_id"],
            iv=base64.b64decode(data["iv"]) if data["iv"] else None,
            tag=base64.b64decode(data["tag"]) if data["tag"] else None,
            metadata=data["metadata"],
            encrypted_at=datetime.fromisoformat(data["encrypted_at"])
        )


class EnterpriseEncryptionManager:
    """Gestionnaire de chiffrement enterprise"""
    
    def __init__(self, redis_client: redis.Redis, hsm_config: Dict[str, Any] = None):
        self.redis_client = redis_client
        self.hsm_config = hsm_config or {}
        self.logger = logging.getLogger(__name__)
        
        # Configuration
        self.master_key_rotation_days = 90
        self.dek_rotation_days = 30
        self.max_key_usage_count = 1000000
        
        # Initialiser le gestionnaire de cl√©s
        self.key_manager = KeyManager(redis_client, hsm_config)
        
        # Politiques de chiffrement par classification
        self.encryption_policies = {
            DataClassification.PUBLIC: {
                "algorithm": EncryptionAlgorithm.AES_256_GCM,
                "key_rotation_days": 365,
                "require_hsm": False
            },
            DataClassification.INTERNAL: {
                "algorithm": EncryptionAlgorithm.AES_256_GCM,
                "key_rotation_days": 180,
                "require_hsm": False
            },
            DataClassification.CONFIDENTIAL: {
                "algorithm": EncryptionAlgorithm.AES_256_GCM,
                "key_rotation_days": 90,
                "require_hsm": True
            },
            DataClassification.RESTRICTED: {
                "algorithm": EncryptionAlgorithm.CHACHA20_POLY1305,
                "key_rotation_days": 30,
                "require_hsm": True
            },
            DataClassification.TOP_SECRET: {
                "algorithm": EncryptionAlgorithm.CHACHA20_POLY1305,
                "key_rotation_days": 7,
                "require_hsm": True
            }
        }
    
    async def encrypt_data(
        self,
        plaintext: Union[str, bytes],
        context: EncryptionContext,
        key_id: Optional[str] = None
    ) -> EncryptedData:
        """Chiffre des donn√©es selon le contexte"""
        try:
            # Convertir en bytes si n√©cessaire
            if isinstance(plaintext, str):
                plaintext_bytes = plaintext.encode('utf-8')
            else:
                plaintext_bytes = plaintext
            
            # D√©terminer la politique de chiffrement
            policy = self.encryption_policies.get(
                context.data_classification,
                self.encryption_policies[DataClassification.CONFIDENTIAL]
            )
            
            # Obtenir ou cr√©er une cl√© de chiffrement
            if not key_id:
                key_id = await self.key_manager.get_or_create_dek(
                    context.data_classification,
                    policy["algorithm"],
                    policy["require_hsm"]
                )
            
            encryption_key = await self.key_manager.get_key(key_id)
            if not encryption_key:
                raise ValueError(f"Cl√© de chiffrement introuvable: {key_id}")
            
            # V√©rifier la politique de rotation
            await self._check_key_rotation_policy(encryption_key, policy)
            
            # Chiffrer selon l'algorithme
            encrypted_data = await self._encrypt_with_algorithm(
                plaintext_bytes,
                encryption_key,
                context
            )
            
            # Mettre √† jour l'utilisation de la cl√©
            await self.key_manager.increment_key_usage(key_id)
            
            # Enregistrer l'audit
            await self._audit_encryption_operation(
                "encrypt",
                key_id,
                context,
                len(plaintext_bytes)
            )
            
            return encrypted_data
            
        except Exception as exc:
            self.logger.error(f"Erreur chiffrement donn√©es: {exc}")
            raise
    
    async def decrypt_data(
        self,
        encrypted_data: EncryptedData,
        context: Optional[EncryptionContext] = None
    ) -> bytes:
        """D√©chiffre des donn√©es"""
        try:
            # R√©cup√©rer la cl√© de d√©chiffrement
            encryption_key = await self.key_manager.get_key(encrypted_data.key_id)
            if not encryption_key:
                raise ValueError(f"Cl√© de d√©chiffrement introuvable: {encrypted_data.key_id}")
            
            # V√©rifier les permissions si contexte fourni
            if context:
                await self._check_decryption_permissions(encrypted_data, context)
            
            # D√©chiffrer selon l'algorithme
            plaintext = await self._decrypt_with_algorithm(encrypted_data, encryption_key)
            
            # Mettre √† jour l'utilisation de la cl√©
            await self.key_manager.increment_key_usage(encrypted_data.key_id)
            
            # Enregistrer l'audit
            await self._audit_encryption_operation(
                "decrypt",
                encrypted_data.key_id,
                context,
                len(plaintext)
            )
            
            return plaintext
            
        except Exception as exc:
            self.logger.error(f"Erreur d√©chiffrement donn√©es: {exc}")
            raise
    
    async def encrypt_field(
        self,
        field_name: str,
        field_value: Any,
        user_id: str,
        data_classification: DataClassification = DataClassification.CONFIDENTIAL
    ) -> str:
        """Chiffre un champ sp√©cifique"""
        try:
            # Cr√©er le contexte
            context = EncryptionContext(
                data_classification=data_classification,
                compliance_requirements=[ComplianceStandard.GDPR],
                field_name=field_name,
                user_id=user_id,
                purpose="field_encryption"
            )
            
            # S√©rialiser la valeur
            if isinstance(field_value, (dict, list)):
                serialized_value = json.dumps(field_value, default=str)
            else:
                serialized_value = str(field_value)
            
            # Chiffrer
            encrypted_data = await self.encrypt_data(serialized_value, context)
            
            # Retourner sous forme de cha√Æne encod√©e
            return base64.b64encode(
                json.dumps(encrypted_data.to_dict()).encode()
            ).decode()
            
        except Exception as exc:
            self.logger.error(f"Erreur chiffrement champ {field_name}: {exc}")
            raise
    
    async def decrypt_field(
        self,
        encrypted_field: str,
        user_id: str,
        expected_field_name: Optional[str] = None
    ) -> Any:
        """D√©chiffre un champ sp√©cifique"""
        try:
            # D√©coder la cha√Æne
            encrypted_dict = json.loads(base64.b64decode(encrypted_field))
            encrypted_data = EncryptedData.from_dict(encrypted_dict)
            
            # V√©rifier les permissions
            if expected_field_name and encrypted_data.metadata.get("field_name") != expected_field_name:
                raise ValueError("Nom de champ ne correspond pas")
            
            # Cr√©er le contexte de d√©chiffrement
            context = EncryptionContext(
                data_classification=DataClassification.CONFIDENTIAL,
                compliance_requirements=[ComplianceStandard.GDPR],
                field_name=expected_field_name,
                user_id=user_id,
                purpose="field_decryption"
            )
            
            # D√©chiffrer
            plaintext_bytes = await self.decrypt_data(encrypted_data, context)
            plaintext = plaintext_bytes.decode('utf-8')
            
            # Essayer de d√©s√©rialiser en JSON
            try:
                return json.loads(plaintext)
            except json.JSONDecodeError:
                return plaintext
                
        except Exception as exc:
            self.logger.error(f"Erreur d√©chiffrement champ: {exc}")
            raise
    
    async def rotate_encryption_keys(
        self,
        data_classification: Optional[DataClassification] = None
    ) -> Dict[str, int]:
        """Rotation des cl√©s de chiffrement"""
        try:
            rotation_stats = {
                "keys_rotated": 0,
                "keys_checked": 0,
                "errors": 0
            }
            
            # R√©cup√©rer toutes les cl√©s ou filtrer par classification
            keys_to_check = await self.key_manager.get_keys_for_rotation(data_classification)
            
            for key_info in keys_to_check:
                try:
                    rotation_stats["keys_checked"] += 1
                    
                    # V√©rifier si la rotation est n√©cessaire
                    needs_rotation = await self._should_rotate_key(key_info)
                    
                    if needs_rotation:
                        await self.key_manager.rotate_key(key_info.key_id)
                        rotation_stats["keys_rotated"] += 1
                        
                except Exception as exc:
                    self.logger.error(f"Erreur rotation cl√© {key_info.key_id}: {exc}")
                    rotation_stats["errors"] += 1
            
            self.logger.info(f"Rotation des cl√©s termin√©e: {rotation_stats}")
            return rotation_stats
            
        except Exception as exc:
            self.logger.error(f"Erreur rotation cl√©s: {exc}")
            return {"errors": 1}
    
    # M√©thodes priv√©es
    async def _encrypt_with_algorithm(
        self,
        plaintext: bytes,
        encryption_key: EncryptionKey,
        context: EncryptionContext
    ) -> EncryptedData:
        """Chiffre avec l'algorithme sp√©cifi√©"""
        try:
            algorithm = encryption_key.algorithm
            metadata = {
                "context": asdict(context),
                "key_version": encryption_key.version
            }
            
            if algorithm == EncryptionAlgorithm.AES_256_GCM:
                return await self._encrypt_aes_gcm(plaintext, encryption_key, metadata)
            elif algorithm == EncryptionAlgorithm.AES_256_CBC:
                return await self._encrypt_aes_cbc(plaintext, encryption_key, metadata)
            elif algorithm == EncryptionAlgorithm.CHACHA20_POLY1305:
                return await self._encrypt_chacha20_poly1305(plaintext, encryption_key, metadata)
            elif algorithm == EncryptionAlgorithm.FERNET:
                return await self._encrypt_fernet(plaintext, encryption_key, metadata)
            else:
                raise ValueError(f"Algorithme non support√©: {algorithm}")
                
        except Exception as exc:
            self.logger.error(f"Erreur chiffrement avec {encryption_key.algorithm}: {exc}")
            raise
    
    async def _decrypt_with_algorithm(
        self,
        encrypted_data: EncryptedData,
        encryption_key: EncryptionKey
    ) -> bytes:
        """D√©chiffre avec l'algorithme sp√©cifi√©"""
        try:
            algorithm = encrypted_data.algorithm
            
            if algorithm == EncryptionAlgorithm.AES_256_GCM:
                return await self._decrypt_aes_gcm(encrypted_data, encryption_key)
            elif algorithm == EncryptionAlgorithm.AES_256_CBC:
                return await self._decrypt_aes_cbc(encrypted_data, encryption_key)
            elif algorithm == EncryptionAlgorithm.CHACHA20_POLY1305:
                return await self._decrypt_chacha20_poly1305(encrypted_data, encryption_key)
            elif algorithm == EncryptionAlgorithm.FERNET:
                return await self._decrypt_fernet(encrypted_data, encryption_key)
            else:
                raise ValueError(f"Algorithme non support√©: {algorithm}")
                
        except Exception as exc:
            self.logger.error(f"Erreur d√©chiffrement avec {encrypted_data.algorithm}: {exc}")
            raise
    
    async def _encrypt_aes_gcm(
        self,
        plaintext: bytes,
        encryption_key: EncryptionKey,
        metadata: Dict[str, Any]
    ) -> EncryptedData:
        """Chiffrement AES-256-GCM"""
        try:
            # G√©n√©rer un IV al√©atoire
            iv = os.urandom(12)  # 96 bits pour GCM
            
            # Cr√©er le cipher
            cipher = Cipher(
                algorithms.AES(encryption_key.key_material),
                modes.GCM(iv),
                backend=default_backend()
            )
            
            encryptor = cipher.encryptor()
            
            # Chiffrer
            ciphertext = encryptor.update(plaintext) + encryptor.finalize()
            
            return EncryptedData(
                ciphertext=ciphertext,
                algorithm=EncryptionAlgorithm.AES_256_GCM,
                key_id=encryption_key.key_id,
                iv=iv,
                tag=encryptor.tag,
                metadata=metadata,
                encrypted_at=datetime.utcnow()
            )
            
        except Exception as exc:
            self.logger.error(f"Erreur chiffrement AES-GCM: {exc}")
            raise
    
    async def _decrypt_aes_gcm(
        self,
        encrypted_data: EncryptedData,
        encryption_key: EncryptionKey
    ) -> bytes:
        """D√©chiffrement AES-256-GCM"""
        try:
            # Cr√©er le cipher
            cipher = Cipher(
                algorithms.AES(encryption_key.key_material),
                modes.GCM(encrypted_data.iv, encrypted_data.tag),
                backend=default_backend()
            )
            
            decryptor = cipher.decryptor()
            
            # D√©chiffrer
            plaintext = decryptor.update(encrypted_data.ciphertext) + decryptor.finalize()
            
            return plaintext
            
        except Exception as exc:
            self.logger.error(f"Erreur d√©chiffrement AES-GCM: {exc}")
            raise
    
    async def _encrypt_aes_cbc(
        self,
        plaintext: bytes,
        encryption_key: EncryptionKey,
        metadata: Dict[str, Any]
    ) -> EncryptedData:
        """Chiffrement AES-256-CBC"""
        try:
            # G√©n√©rer un IV al√©atoire
            iv = os.urandom(16)  # 128 bits pour CBC
            
            # Padding PKCS7
            padder = sym_padding.PKCS7(128).padder()
            padded_data = padder.update(plaintext) + padder.finalize()
            
            # Cr√©er le cipher
            cipher = Cipher(
                algorithms.AES(encryption_key.key_material),
                modes.CBC(iv),
                backend=default_backend()
            )
            
            encryptor = cipher.encryptor()
            
            # Chiffrer
            ciphertext = encryptor.update(padded_data) + encryptor.finalize()
            
            return EncryptedData(
                ciphertext=ciphertext,
                algorithm=EncryptionAlgorithm.AES_256_CBC,
                key_id=encryption_key.key_id,
                iv=iv,
                tag=None,
                metadata=metadata,
                encrypted_at=datetime.utcnow()
            )
            
        except Exception as exc:
            self.logger.error(f"Erreur chiffrement AES-CBC: {exc}")
            raise
    
    async def _decrypt_aes_cbc(
        self,
        encrypted_data: EncryptedData,
        encryption_key: EncryptionKey
    ) -> bytes:
        """D√©chiffrement AES-256-CBC"""
        try:
            # Cr√©er le cipher
            cipher = Cipher(
                algorithms.AES(encryption_key.key_material),
                modes.CBC(encrypted_data.iv),
                backend=default_backend()
            )
            
            decryptor = cipher.decryptor()
            
            # D√©chiffrer
            padded_plaintext = decryptor.update(encrypted_data.ciphertext) + decryptor.finalize()
            
            # Retirer le padding
            unpadder = sym_padding.PKCS7(128).unpadder()
            plaintext = unpadder.update(padded_plaintext) + unpadder.finalize()
            
            return plaintext
            
        except Exception as exc:
            self.logger.error(f"Erreur d√©chiffrement AES-CBC: {exc}")
            raise
    
    async def _encrypt_chacha20_poly1305(
        self,
        plaintext: bytes,
        encryption_key: EncryptionKey,
        metadata: Dict[str, Any]
    ) -> EncryptedData:
        """Chiffrement ChaCha20-Poly1305"""
        try:
            # G√©n√©rer un nonce al√©atoire
            nonce = os.urandom(12)  # 96 bits pour ChaCha20-Poly1305
            
            # Cr√©er le cipher
            cipher = Cipher(
                algorithms.ChaCha20(encryption_key.key_material, nonce),
                modes.GCM(b'\x00' * 12),  # Tag sera g√©n√©r√© automatiquement
                backend=default_backend()
            )
            
            encryptor = cipher.encryptor()
            
            # Chiffrer
            ciphertext = encryptor.update(plaintext) + encryptor.finalize()
            
            return EncryptedData(
                ciphertext=ciphertext,
                algorithm=EncryptionAlgorithm.CHACHA20_POLY1305,
                key_id=encryption_key.key_id,
                iv=nonce,
                tag=encryptor.tag,
                metadata=metadata,
                encrypted_at=datetime.utcnow()
            )
            
        except Exception as exc:
            # Fallback vers une impl√©mentation simplifi√©e
            return await self._encrypt_fernet(plaintext, encryption_key, metadata)
    
    async def _decrypt_chacha20_poly1305(
        self,
        encrypted_data: EncryptedData,
        encryption_key: EncryptionKey
    ) -> bytes:
        """D√©chiffrement ChaCha20-Poly1305"""
        try:
            # Impl√©mentation simplifi√©e - fallback vers Fernet
            return await self._decrypt_fernet(encrypted_data, encryption_key)
            
        except Exception as exc:
            self.logger.error(f"Erreur d√©chiffrement ChaCha20-Poly1305: {exc}")
            raise
    
    async def _encrypt_fernet(
        self,
        plaintext: bytes,
        encryption_key: EncryptionKey,
        metadata: Dict[str, Any]
    ) -> EncryptedData:
        """Chiffrement Fernet"""
        try:
            # Cr√©er une cl√© Fernet √† partir de la cl√© de chiffrement
            fernet_key = base64.urlsafe_b64encode(encryption_key.key_material[:32])
            f = Fernet(fernet_key)
            
            # Chiffrer
            ciphertext = f.encrypt(plaintext)
            
            return EncryptedData(
                ciphertext=ciphertext,
                algorithm=EncryptionAlgorithm.FERNET,
                key_id=encryption_key.key_id,
                iv=None,
                tag=None,
                metadata=metadata,
                encrypted_at=datetime.utcnow()
            )
            
        except Exception as exc:
            self.logger.error(f"Erreur chiffrement Fernet: {exc}")
            raise
    
    async def _decrypt_fernet(
        self,
        encrypted_data: EncryptedData,
        encryption_key: EncryptionKey
    ) -> bytes:
        """D√©chiffrement Fernet"""
        try:
            # Cr√©er une cl√© Fernet
            fernet_key = base64.urlsafe_b64encode(encryption_key.key_material[:32])
            f = Fernet(fernet_key)
            
            # D√©chiffrer
            plaintext = f.decrypt(encrypted_data.ciphertext)
            
            return plaintext
            
        except Exception as exc:
            self.logger.error(f"Erreur d√©chiffrement Fernet: {exc}")
            raise
    
    async def _check_key_rotation_policy(
        self,
        encryption_key: EncryptionKey,
        policy: Dict[str, Any]
    ):
        """V√©rifie la politique de rotation des cl√©s"""
        try:
            # V√©rifier l'√¢ge de la cl√©
            key_age = datetime.utcnow() - encryption_key.created_at
            max_age = timedelta(days=policy["key_rotation_days"])
            
            if key_age > max_age:
                self.logger.warning(f"Cl√© {encryption_key.key_id} doit √™tre rot√©e (√¢ge: {key_age.days} jours)")
                # D√©clencher la rotation asynchrone
                asyncio.create_task(self.key_manager.schedule_key_rotation(encryption_key.key_id))
            
            # V√©rifier le nombre d'utilisations
            if (encryption_key.max_usage_count and 
                encryption_key.usage_count >= encryption_key.max_usage_count):
                self.logger.warning(f"Cl√© {encryption_key.key_id} a atteint la limite d'utilisation")
                asyncio.create_task(self.key_manager.schedule_key_rotation(encryption_key.key_id))
            
        except Exception as exc:
            self.logger.error(f"Erreur v√©rification politique rotation: {exc}")
    
    async def _should_rotate_key(self, key_info: EncryptionKey) -> bool:
        """D√©termine si une cl√© doit √™tre rot√©e"""
        try:
            # V√©rifier l'√¢ge
            key_age = datetime.utcnow() - key_info.created_at
            if key_age > timedelta(days=self.dek_rotation_days):
                return True
            
            # V√©rifier l'utilisation
            if (key_info.max_usage_count and 
                key_info.usage_count >= key_info.max_usage_count * 0.9):  # 90% de la limite
                return True
            
            # V√©rifier l'expiration
            if key_info.expires_at and datetime.utcnow() > key_info.expires_at:
                return True
            
            return False
            
        except Exception as exc:
            self.logger.error(f"Erreur √©valuation rotation cl√©: {exc}")
            return False
    
    async def _check_decryption_permissions(
        self,
        encrypted_data: EncryptedData,
        context: EncryptionContext
    ):
        """V√©rifie les permissions de d√©chiffrement"""
        try:
            # V√©rifier l'utilisateur
            original_context = encrypted_data.metadata.get("context", {})
            original_user_id = original_context.get("user_id")
            
            if original_user_id and context.user_id != original_user_id:
                # V√©rifier les permissions inter-utilisateurs
                has_permission = await self._check_cross_user_permission(
                    context.user_id,
                    original_user_id,
                    encrypted_data
                )
                if not has_permission:
                    raise PermissionError("Permissions insuffisantes pour d√©chiffrer")
            
            # V√©rifier la classification des donn√©es
            original_classification = original_context.get("data_classification")
            if original_classification:
                await self._check_classification_access(
                    context.user_id,
                    DataClassification(original_classification)
                )
            
        except Exception as exc:
            self.logger.error(f"Erreur v√©rification permissions d√©chiffrement: {exc}")
            raise
    
    async def _check_cross_user_permission(
        self,
        requesting_user_id: str,
        data_owner_id: str,
        encrypted_data: EncryptedData
    ) -> bool:
        """V√©rifie les permissions inter-utilisateurs"""
        # Impl√©mentation simplifi√©e
        # Dans un vrai syst√®me, v√©rifier les ACL, r√¥les, etc.
        return False
    
    async def _check_classification_access(
        self,
        user_id: str,
        classification: DataClassification
    ):
        """V√©rifie l'acc√®s selon la classification"""
        # Impl√©mentation simplifi√©e
        # Dans un vrai syst√®me, v√©rifier les clearances de s√©curit√©
        pass
    
    async def _audit_encryption_operation(
        self,
        operation: str,
        key_id: str,
        context: Optional[EncryptionContext],
        data_size: int
    ):
        """Enregistre l'op√©ration de chiffrement pour audit"""
        try:
            audit_entry = {
                "timestamp": datetime.utcnow().isoformat(),
                "operation": operation,
                "key_id": key_id,
                "user_id": context.user_id if context else None,
                "data_classification": context.data_classification.value if context else None,
                "field_name": context.field_name if context else None,
                "data_size": data_size,
                "compliance_requirements": [req.value for req in context.compliance_requirements] if context else []
            }
            
            # Stocker dans Redis pour analyse
            await self.redis_client.lpush(
                f"encryption_audit",
                json.dumps(audit_entry)
            )
            
            # Limiter l'historique
            await self.redis_client.ltrim("encryption_audit", 0, 9999)
            
        except Exception as exc:
            self.logger.error(f"Erreur audit op√©ration chiffrement: {exc}")


class KeyManager:
    """Gestionnaire de cl√©s de chiffrement"""
    
    def __init__(self, redis_client: redis.Redis, hsm_config: Dict[str, Any] = None):
        self.redis_client = redis_client
        self.hsm_config = hsm_config or {}
        self.logger = logging.getLogger(__name__)
        
        # Configuration HSM (exemple simplifi√©)
        self.use_hsm = hsm_config.get("enabled", False)
        self.hsm_slot = hsm_config.get("slot", 0)
        
        # Cl√© ma√Ætre pour chiffrer les autres cl√©s
        self.master_key = self._initialize_master_key()
    
    def _initialize_master_key(self) -> bytes:
        """Initialise la cl√© ma√Ætre"""
        try:
            if self.use_hsm:
                # Dans un vrai syst√®me, r√©cup√©rer depuis le HSM
                return os.urandom(32)
            else:
                # G√©n√©rer ou r√©cup√©rer la cl√© ma√Ætre
                return os.urandom(32)
                
        except Exception as exc:
            self.logger.error(f"Erreur initialisation cl√© ma√Ætre: {exc}")
            raise
    
    async def create_key(
        self,
        key_type: KeyType,
        algorithm: EncryptionAlgorithm,
        classification: DataClassification = DataClassification.CONFIDENTIAL,
        use_hsm: bool = False
    ) -> EncryptionKey:
        """Cr√©e une nouvelle cl√© de chiffrement"""
        try:
            key_id = str(uuid.uuid4())
            
            # G√©n√©rer le mat√©riel de cl√©
            if use_hsm and self.use_hsm:
                key_material = await self._generate_key_in_hsm(algorithm)
            else:
                key_material = await self._generate_key_material(algorithm)
            
            # Cr√©er l'objet cl√©
            encryption_key = EncryptionKey(
                key_id=key_id,
                key_type=key_type,
                algorithm=algorithm,
                key_material=key_material,
                created_at=datetime.utcnow(),
                expires_at=None,  # √Ä d√©finir selon la politique
                metadata={
                    "classification": classification.value,
                    "hsm_generated": use_hsm and self.use_hsm
                }
            )
            
            # Stocker la cl√©
            await self._store_key(encryption_key)
            
            self.logger.info(f"Cl√© cr√©√©e: {key_id} ({algorithm.value})")
            return encryption_key
            
        except Exception as exc:
            self.logger.error(f"Erreur cr√©ation cl√©: {exc}")
            raise
    
    async def get_key(self, key_id: str) -> Optional[EncryptionKey]:
        """R√©cup√®re une cl√© par son ID"""
        try:
            # R√©cup√©rer la cl√© chiffr√©e
            encrypted_key_data = await self.redis_client.get(f"encryption_key:{key_id}")
            if not encrypted_key_data:
                return None
            
            # D√©chiffrer avec la cl√© ma√Ætre
            decrypted_data = await self._decrypt_with_master_key(encrypted_key_data)
            key_dict = json.loads(decrypted_data)
            
            # Reconstituer l'objet cl√©
            key_dict["key_material"] = base64.b64decode(key_dict["key_material"])
            return EncryptionKey(**key_dict)
            
        except Exception as exc:
            self.logger.error(f"Erreur r√©cup√©ration cl√© {key_id}: {exc}")
            return None
    
    async def get_or_create_dek(
        self,
        classification: DataClassification,
        algorithm: EncryptionAlgorithm,
        use_hsm: bool = False
    ) -> str:
        """R√©cup√®re ou cr√©e une Data Encryption Key"""
        try:
            # Chercher une cl√© existante active
            existing_key_id = await self._find_active_dek(classification, algorithm)
            
            if existing_key_id:
                return existing_key_id
            
            # Cr√©er une nouvelle cl√©
            dek = await self.create_key(
                KeyType.DATA_ENCRYPTION_KEY,
                algorithm,
                classification,
                use_hsm
            )
            
            return dek.key_id
            
        except Exception as exc:
            self.logger.error(f"Erreur r√©cup√©ration/cr√©ation DEK: {exc}")
            raise
    
    async def rotate_key(self, key_id: str) -> str:
        """Effectue la rotation d'une cl√©"""
        try:
            # R√©cup√©rer l'ancienne cl√©
            old_key = await self.get_key(key_id)
            if not old_key:
                raise ValueError(f"Cl√© introuvable: {key_id}")
            
            # Cr√©er une nouvelle cl√© avec les m√™mes param√®tres
            new_key = await self.create_key(
                old_key.key_type,
                old_key.algorithm,
                DataClassification(old_key.metadata.get("classification", "confidential")),
                old_key.metadata.get("hsm_generated", False)
            )
            
            # Marquer l'ancienne cl√© comme d√©pr√©ci√©e
            old_key.metadata["deprecated"] = True
            old_key.metadata["replaced_by"] = new_key.key_id
            await self._store_key(old_key)
            
            # Programmer la suppression diff√©r√©e de l'ancienne cl√©
            await self._schedule_key_deletion(key_id, timedelta(days=30))
            
            self.logger.info(f"Cl√© rot√©e: {key_id} -> {new_key.key_id}")
            return new_key.key_id
            
        except Exception as exc:
            self.logger.error(f"Erreur rotation cl√© {key_id}: {exc}")
            raise
    
    async def increment_key_usage(self, key_id: str):
        """Incr√©mente le compteur d'utilisation d'une cl√©"""
        try:
            # Incr√©menter dans Redis pour performance
            await self.redis_client.incr(f"key_usage:{key_id}")
            
        except Exception as exc:
            self.logger.error(f"Erreur incr√©mentation usage cl√© {key_id}: {exc}")
    
    async def get_keys_for_rotation(
        self,
        classification: Optional[DataClassification] = None
    ) -> List[EncryptionKey]:
        """R√©cup√®re les cl√©s candidates pour rotation"""
        try:
            # Scanner toutes les cl√©s (impl√©mentation simplifi√©e)
            pattern = "encryption_key:*"
            key_keys = await self.redis_client.keys(pattern)
            
            keys_for_rotation = []
            for key_key in key_keys:
                try:
                    key_id = key_key.decode().replace("encryption_key:", "")
                    encryption_key = await self.get_key(key_id)
                    
                    if encryption_key and not encryption_key.metadata.get("deprecated", False):
                        if not classification or encryption_key.metadata.get("classification") == classification.value:
                            keys_for_rotation.append(encryption_key)
                            
                except Exception:
                    continue
            
            return keys_for_rotation
            
        except Exception as exc:
            self.logger.error(f"Erreur r√©cup√©ration cl√©s pour rotation: {exc}")
            return []
    
    async def schedule_key_rotation(self, key_id: str):
        """Programme la rotation d'une cl√©"""
        try:
            # Ajouter √† la queue de rotation
            await self.redis_client.sadd("keys_pending_rotation", key_id)
            
            self.logger.info(f"Rotation programm√©e pour cl√©: {key_id}")
            
        except Exception as exc:
            self.logger.error(f"Erreur programmation rotation cl√© {key_id}: {exc}")
    
    # M√©thodes priv√©es
    async def _generate_key_material(self, algorithm: EncryptionAlgorithm) -> bytes:
        """G√©n√®re le mat√©riel de cl√© selon l'algorithme"""
        try:
            if algorithm in [EncryptionAlgorithm.AES_256_GCM, EncryptionAlgorithm.AES_256_CBC, EncryptionAlgorithm.AES_256_CTR]:
                return os.urandom(32)  # 256 bits
            elif algorithm == EncryptionAlgorithm.CHACHA20_POLY1305:
                return os.urandom(32)  # 256 bits
            elif algorithm == EncryptionAlgorithm.FERNET:
                return os.urandom(32)  # 256 bits
            else:
                raise ValueError(f"Algorithme non support√©: {algorithm}")
                
        except Exception as exc:
            self.logger.error(f"Erreur g√©n√©ration mat√©riel cl√©: {exc}")
            raise
    
    async def _generate_key_in_hsm(self, algorithm: EncryptionAlgorithm) -> bytes:
        """G√©n√®re une cl√© dans le HSM"""
        try:
            # Impl√©mentation simplifi√©e
            # Dans un vrai syst√®me, utiliser PKCS#11 ou l'API du HSM
            return await self._generate_key_material(algorithm)
            
        except Exception as exc:
            self.logger.error(f"Erreur g√©n√©ration cl√© HSM: {exc}")
            raise
    
    async def _store_key(self, encryption_key: EncryptionKey):
        """Stocke une cl√© de mani√®re s√©curis√©e"""
        try:
            # S√©rialiser
            key_dict = asdict(encryption_key)
            key_dict["key_material"] = base64.b64encode(encryption_key.key_material).decode()
            key_data = json.dumps(key_dict, default=str)
            
            # Chiffrer avec la cl√© ma√Ætre
            encrypted_data = await self._encrypt_with_master_key(key_data.encode())
            
            # Stocker dans Redis
            await self.redis_client.set(f"encryption_key:{encryption_key.key_id}", encrypted_data)
            
            # Ajouter aux index
            await self.redis_client.sadd(
                f"keys_by_type:{encryption_key.key_type.value}",
                encryption_key.key_id
            )
            
            await self.redis_client.sadd(
                f"keys_by_algorithm:{encryption_key.algorithm.value}",
                encryption_key.key_id
            )
            
        except Exception as exc:
            self.logger.error(f"Erreur stockage cl√©: {exc}")
            raise
    
    async def _encrypt_with_master_key(self, data: bytes) -> bytes:
        """Chiffre avec la cl√© ma√Ætre"""
        try:
            fernet_key = base64.urlsafe_b64encode(self.master_key)
            f = Fernet(fernet_key)
            return f.encrypt(data)
            
        except Exception as exc:
            self.logger.error(f"Erreur chiffrement avec cl√© ma√Ætre: {exc}")
            raise
    
    async def _decrypt_with_master_key(self, encrypted_data: bytes) -> bytes:
        """D√©chiffre avec la cl√© ma√Ætre"""
        try:
            fernet_key = base64.urlsafe_b64encode(self.master_key)
            f = Fernet(fernet_key)
            return f.decrypt(encrypted_data)
            
        except Exception as exc:
            self.logger.error(f"Erreur d√©chiffrement avec cl√© ma√Ætre: {exc}")
            raise
    
    async def _find_active_dek(
        self,
        classification: DataClassification,
        algorithm: EncryptionAlgorithm
    ) -> Optional[str]:
        """Trouve une DEK active pour la classification et l'algorithme"""
        try:
            # R√©cup√©rer les cl√©s de l'algorithme
            algorithm_keys = await self.redis_client.smembers(f"keys_by_algorithm:{algorithm.value}")
            
            for key_id_bytes in algorithm_keys:
                key_id = key_id_bytes.decode() if isinstance(key_id_bytes, bytes) else key_id_bytes
                
                encryption_key = await self.get_key(key_id)
                if (encryption_key and 
                    encryption_key.key_type == KeyType.DATA_ENCRYPTION_KEY and
                    encryption_key.metadata.get("classification") == classification.value and
                    not encryption_key.metadata.get("deprecated", False)):
                    
                    # V√©rifier si la cl√© n'est pas trop vieille
                    key_age = datetime.utcnow() - encryption_key.created_at
                    if key_age < timedelta(days=30):  # Utiliser les cl√©s de moins de 30 jours
                        return key_id
            
            return None
            
        except Exception as exc:
            self.logger.error(f"Erreur recherche DEK active: {exc}")
            return None
    
    async def _schedule_key_deletion(self, key_id: str, delay: timedelta):
        """Programme la suppression diff√©r√©e d'une cl√©"""
        try:
            deletion_time = datetime.utcnow() + delay
            
            await self.redis_client.zadd(
                "keys_pending_deletion",
                {key_id: deletion_time.timestamp()}
            )
            
            self.logger.info(f"Suppression programm√©e pour cl√© {key_id} √† {deletion_time}")
            
        except Exception as exc:
            self.logger.error(f"Erreur programmation suppression cl√© {key_id}: {exc}")


class DataMaskingManager:
    """Gestionnaire de masquage des donn√©es"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    async def mask_sensitive_data(
        self,
        data: Dict[str, Any],
        masking_rules: Dict[str, str]
    ) -> Dict[str, Any]:
        """Masque les donn√©es sensibles selon les r√®gles"""
        try:
            masked_data = data.copy()
            
            for field_name, masking_type in masking_rules.items():
                if field_name in masked_data:
                    original_value = masked_data[field_name]
                    
                    if masking_type == "email":
                        masked_data[field_name] = self._mask_email(original_value)
                    elif masking_type == "phone":
                        masked_data[field_name] = self._mask_phone(original_value)
                    elif masking_type == "credit_card":
                        masked_data[field_name] = self._mask_credit_card(original_value)
                    elif masking_type == "partial":
                        masked_data[field_name] = self._mask_partial(original_value)
                    elif masking_type == "full":
                        masked_data[field_name] = "*" * len(str(original_value))
            
            return masked_data
            
        except Exception as exc:
            self.logger.error(f"Erreur masquage donn√©es: {exc}")
            return data
    
    def _mask_email(self, email: str) -> str:
        """Masque une adresse email"""
        try:
            if "@" not in email:
                return email
            
            local, domain = email.split("@", 1)
            if len(local) <= 2:
                return f"{'*' * len(local)}@{domain}"
            else:
                return f"{local[0]}{'*' * (len(local) - 2)}{local[-1]}@{domain}"
                
        except Exception:
            return email
    
    def _mask_phone(self, phone: str) -> str:
        """Masque un num√©ro de t√©l√©phone"""
        try:
            # Garder les 4 derniers chiffres
            digits_only = ''.join(filter(str.isdigit, phone))
            if len(digits_only) >= 4:
                masked_digits = "*" * (len(digits_only) - 4) + digits_only[-4:]
                return phone.replace(digits_only, masked_digits)
            return phone
            
        except Exception:
            return phone
    
    def _mask_credit_card(self, card_number: str) -> str:
        """Masque un num√©ro de carte de cr√©dit"""
        try:
            digits_only = ''.join(filter(str.isdigit, card_number))
            if len(digits_only) >= 4:
                masked = "*" * (len(digits_only) - 4) + digits_only[-4:]
                return card_number.replace(digits_only, masked)
            return card_number
            
        except Exception:
            return card_number
    
    def _mask_partial(self, value: str) -> str:
        """Masquage partiel (50%)"""
        try:
            value_str = str(value)
            if len(value_str) <= 2:
                return value_str
            
            half_length = len(value_str) // 2
            return value_str[:half_length] + "*" * (len(value_str) - half_length)
            
        except Exception:
            return str(value)
