"""
üéµ Spotify AI Agent - Enterprise Validators
===========================================

Validateurs enterprise complets pour toutes les donn√©es
avec s√©curit√© renforc√©e et validation m√©tier avanc√©e.

Architecture:
- Validation de donn√©es utilisateur
- Validation de formats de fichiers
- Validation de m√©tadonn√©es musicales
- Validation de s√©curit√©
- Validation de mod√®les ML
- Validation d'APIs et endpoints

üéñÔ∏è D√©velopp√© par l'√©quipe d'experts enterprise
"""

import re
import email_validator
import phonenumbers
import validators as external_validators
from typing import Any, Dict, List, Optional, Union, Callable, Tuple
from datetime import datetime, date
from urllib.parse import urlparse
import mimetypes
import magic
from pydantic import BaseModel, ValidationError, validator
from decimal import Decimal, InvalidOperation
import ipaddress


# =============================================================================
# VALIDATEURS DE FORMATS BASIQUES
# =============================================================================

def validate_email(email: str, check_deliverability: bool = False) -> Dict[str, Any]:
    """
    Valide une adresse email
    
    Args:
        email: Adresse email √† valider
        check_deliverability: V√©rifier la d√©livrabilit√©
        
    Returns:
        R√©sultat de validation avec d√©tails
    """
    try:
        valid = email_validator.validate_email(
            email, 
            check_deliverability=check_deliverability
        )
        
        return {
            'valid': True,
            'email': valid.email,
            'local': valid.local,
            'domain': valid.domain,
            'ascii_email': valid.ascii_email,
            'ascii_local': valid.ascii_local,
            'ascii_domain': valid.ascii_domain,
            'smtputf8': valid.smtputf8
        }
    
    except email_validator.EmailNotValidError as e:
        return {
            'valid': False,
            'error': str(e),
            'code': e.code if hasattr(e, 'code') else None
        }


def validate_phone(phone: str, region: Optional[str] = None) -> Dict[str, Any]:
    """
    Valide un num√©ro de t√©l√©phone
    
    Args:
        phone: Num√©ro de t√©l√©phone
        region: Code r√©gion (ISO 3166-1 alpha-2)
        
    Returns:
        R√©sultat de validation
    """
    try:
        parsed = phonenumbers.parse(phone, region)
        
        return {
            'valid': phonenumbers.is_valid_number(parsed),
            'possible': phonenumbers.is_possible_number(parsed),
            'country_code': parsed.country_code,
            'national_number': parsed.national_number,
            'extension': parsed.extension,
            'number_type': phonenumbers.number_type(parsed),
            'carrier': phonenumbers.carrier.name_for_number(parsed, 'en'),
            'timezone': list(phonenumbers.timezone.time_zones_for_number(parsed)),
            'formatted': {
                'international': phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.INTERNATIONAL),
                'national': phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.NATIONAL),
                'e164': phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.E164),
                'rfc3966': phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.RFC3966)
            }
        }
    
    except phonenumbers.phonenumberutil.NumberParseException as e:
        return {
            'valid': False,
            'error': str(e),
            'error_type': e.error_type
        }


def validate_url(url: str, allowed_schemes: Optional[List[str]] = None) -> Dict[str, Any]:
    """
    Valide une URL avec analyse d√©taill√©e
    
    Args:
        url: URL √† valider
        allowed_schemes: Sch√©mas autoris√©s
        
    Returns:
        R√©sultat de validation d√©taill√©
    """
    if allowed_schemes is None:
        allowed_schemes = ['http', 'https']
    
    try:
        # Validation basique
        is_valid = external_validators.url(url)
        if not is_valid:
            return {'valid': False, 'error': 'Format URL invalide'}
        
        # Analyse d√©taill√©e
        parsed = urlparse(url)
        
        # V√©rifier le sch√©ma
        if parsed.scheme not in allowed_schemes:
            return {
                'valid': False,
                'error': f'Sch√©ma non autoris√©: {parsed.scheme}',
                'allowed_schemes': allowed_schemes
            }
        
        return {
            'valid': True,
            'scheme': parsed.scheme,
            'netloc': parsed.netloc,
            'hostname': parsed.hostname,
            'port': parsed.port,
            'path': parsed.path,
            'params': parsed.params,
            'query': parsed.query,
            'fragment': parsed.fragment,
            'is_secure': parsed.scheme == 'https'
        }
    
    except Exception as e:
        return {'valid': False, 'error': str(e)}


def validate_ip_address(ip: str, version: Optional[int] = None) -> Dict[str, Any]:
    """
    Valide une adresse IP
    
    Args:
        ip: Adresse IP
        version: Version IP (4 ou 6)
        
    Returns:
        R√©sultat de validation
    """
    try:
        if version == 4:
            ip_obj = ipaddress.IPv4Address(ip)
        elif version == 6:
            ip_obj = ipaddress.IPv6Address(ip)
        else:
            ip_obj = ipaddress.ip_address(ip)
        
        return {
            'valid': True,
            'version': ip_obj.version,
            'compressed': str(ip_obj.compressed),
            'exploded': str(ip_obj.exploded),
            'is_private': ip_obj.is_private,
            'is_global': ip_obj.is_global,
            'is_loopback': ip_obj.is_loopback,
            'is_multicast': ip_obj.is_multicast,
            'is_reserved': ip_obj.is_reserved,
            'is_unspecified': ip_obj.is_unspecified
        }
    
    except ValueError as e:
        return {'valid': False, 'error': str(e)}


# =============================================================================
# VALIDATEURS DE DONN√âES M√âTIER
# =============================================================================

def validate_user_password(password: str, min_length: int = 8) -> Dict[str, Any]:
    """
    Valide un mot de passe avec crit√®res de s√©curit√©
    
    Args:
        password: Mot de passe √† valider
        min_length: Longueur minimale
        
    Returns:
        R√©sultat de validation avec score de force
    """
    issues = []
    score = 0
    
    # Longueur
    if len(password) < min_length:
        issues.append(f'Doit contenir au moins {min_length} caract√®res')
    else:
        score += 1
        if len(password) >= 12:
            score += 1
    
    # Caract√®res minuscules
    if not re.search(r'[a-z]', password):
        issues.append('Doit contenir au moins une lettre minuscule')
    else:
        score += 1
    
    # Caract√®res majuscules
    if not re.search(r'[A-Z]', password):
        issues.append('Doit contenir au moins une lettre majuscule')
    else:
        score += 1
    
    # Chiffres
    if not re.search(r'\d', password):
        issues.append('Doit contenir au moins un chiffre')
    else:
        score += 1
    
    # Caract√®res sp√©ciaux
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        issues.append('Doit contenir au moins un caract√®re sp√©cial')
    else:
        score += 1
    
    # Motifs faibles
    if re.search(r'(.)\1{2,}', password):  # R√©p√©titions
        issues.append('√âviter les r√©p√©titions de caract√®res')
        score -= 1
    
    if re.search(r'(012|123|234|345|456|567|678|789|890)', password):
        issues.append('√âviter les s√©quences num√©riques')
        score -= 1
    
    if re.search(r'(abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz)', password.lower()):
        issues.append('√âviter les s√©quences alphab√©tiques')
        score -= 1
    
    # Mots courants
    common_words = ['password', 'motdepasse', '123456', 'azerty', 'qwerty', 'admin']
    if any(word in password.lower() for word in common_words):
        issues.append('√âviter les mots courants')
        score -= 2
    
    # Score final
    max_score = 6
    strength_score = max(0, min(score, max_score))
    
    strength_levels = ['Tr√®s faible', 'Faible', 'Moyen', 'Bon', 'Fort', 'Tr√®s fort']
    strength = strength_levels[min(strength_score, len(strength_levels) - 1)]
    
    return {
        'valid': len(issues) == 0,
        'issues': issues,
        'score': strength_score,
        'max_score': max_score,
        'strength': strength,
        'percentage': (strength_score / max_score) * 100
    }


def validate_username(username: str, min_length: int = 3, max_length: int = 30) -> Dict[str, Any]:
    """
    Valide un nom d'utilisateur
    
    Args:
        username: Nom d'utilisateur
        min_length: Longueur minimale
        max_length: Longueur maximale
        
    Returns:
        R√©sultat de validation
    """
    issues = []
    
    # Longueur
    if len(username) < min_length:
        issues.append(f'Doit contenir au moins {min_length} caract√®res')
    
    if len(username) > max_length:
        issues.append(f'Ne doit pas d√©passer {max_length} caract√®res')
    
    # Format
    if not re.match(r'^[a-zA-Z0-9_.-]+$', username):
        issues.append('Doit contenir uniquement des lettres, chiffres, _, . et -')
    
    # D√©but et fin
    if username.startswith(('.', '-', '_')):
        issues.append('Ne doit pas commencer par ., - ou _')
    
    if username.endswith(('.', '-', '_')):
        issues.append('Ne doit pas finir par ., - ou _')
    
    # Caract√®res cons√©cutifs
    if '..' in username or '--' in username or '__' in username:
        issues.append('√âviter les caract√®res sp√©ciaux cons√©cutifs')
    
    # Mots r√©serv√©s
    reserved_words = ['admin', 'root', 'user', 'test', 'null', 'undefined', 'system']
    if username.lower() in reserved_words:
        issues.append('Nom d\'utilisateur r√©serv√©')
    
    return {
        'valid': len(issues) == 0,
        'issues': issues,
        'username': username,
        'length': len(username)
    }


# =============================================================================
# VALIDATEURS MUSICAUX
# =============================================================================

def validate_audio_metadata(metadata: Dict[str, Any]) -> Dict[str, Any]:
    """
    Valide les m√©tadonn√©es audio
    
    Args:
        metadata: M√©tadonn√©es √† valider
        
    Returns:
        R√©sultat de validation
    """
    issues = []
    warnings = []
    
    # Champs obligatoires
    required_fields = ['title', 'artist', 'duration']
    for field in required_fields:
        if field not in metadata or not metadata[field]:
            issues.append(f'Champ obligatoire manquant: {field}')
    
    # Validation du titre
    if 'title' in metadata:
        title = metadata['title']
        if len(title) > 200:
            warnings.append('Titre tr√®s long (>200 caract√®res)')
        if len(title.strip()) == 0:
            issues.append('Titre ne peut pas √™tre vide')
    
    # Validation de l'artiste
    if 'artist' in metadata:
        artist = metadata['artist']
        if len(artist) > 100:
            warnings.append('Nom d\'artiste tr√®s long (>100 caract√®res)')
        if len(artist.strip()) == 0:
            issues.append('Artiste ne peut pas √™tre vide')
    
    # Validation de la dur√©e
    if 'duration' in metadata:
        duration = metadata['duration']
        try:
            duration_float = float(duration)
            if duration_float <= 0:
                issues.append('Dur√©e doit √™tre positive')
            if duration_float > 3600:  # 1 heure
                warnings.append('Dur√©e tr√®s longue (>1h)')
            if duration_float < 10:  # 10 secondes
                warnings.append('Dur√©e tr√®s courte (<10s)')
        except (ValueError, TypeError):
            issues.append('Format de dur√©e invalide')
    
    # Validation de l'album (optionnel)
    if 'album' in metadata and metadata['album']:
        album = metadata['album']
        if len(album) > 150:
            warnings.append('Nom d\'album tr√®s long (>150 caract√®res)')
    
    # Validation de l'ann√©e
    if 'year' in metadata and metadata['year']:
        try:
            year = int(metadata['year'])
            current_year = datetime.now().year
            if year < 1900 or year > current_year + 1:
                issues.append(f'Ann√©e invalide: {year}')
        except (ValueError, TypeError):
            issues.append('Format d\'ann√©e invalide')
    
    # Validation du genre
    if 'genre' in metadata and metadata['genre']:
        genre = metadata['genre']
        valid_genres = [
            'Rock', 'Pop', 'Hip-Hop', 'Jazz', 'Classical', 'Electronic',
            'Country', 'R&B', 'Folk', 'Blues', 'Reggae', 'Punk',
            'Metal', 'Alternative', 'Indie', 'Soul', 'Funk', 'Disco'
        ]
        if genre not in valid_genres:
            warnings.append(f'Genre non standard: {genre}')
    
    # Validation du bitrate
    if 'bitrate' in metadata and metadata['bitrate']:
        try:
            bitrate = int(metadata['bitrate'])
            if bitrate < 64:
                warnings.append('Bitrate tr√®s bas (<64 kbps)')
            if bitrate > 320:
                warnings.append('Bitrate tr√®s √©lev√© (>320 kbps)')
        except (ValueError, TypeError):
            issues.append('Format de bitrate invalide')
    
    return {
        'valid': len(issues) == 0,
        'issues': issues,
        'warnings': warnings,
        'metadata': metadata
    }


def validate_playlist_data(playlist: Dict[str, Any]) -> Dict[str, Any]:
    """
    Valide les donn√©es d'une playlist
    
    Args:
        playlist: Donn√©es de playlist
        
    Returns:
        R√©sultat de validation
    """
    issues = []
    warnings = []
    
    # Champs obligatoires
    if 'name' not in playlist or not playlist['name']:
        issues.append('Nom de playlist obligatoire')
    
    if 'tracks' not in playlist:
        issues.append('Liste des pistes obligatoire')
    
    # Validation du nom
    if 'name' in playlist:
        name = playlist['name']
        if len(name) > 100:
            issues.append('Nom de playlist trop long (>100 caract√®res)')
        if len(name.strip()) == 0:
            issues.append('Nom de playlist ne peut pas √™tre vide')
        
        # Caract√®res interdits
        forbidden_chars = ['<', '>', ':', '"', '|', '?', '*', '\\', '/']
        if any(char in name for char in forbidden_chars):
            issues.append('Caract√®res interdits dans le nom de playlist')
    
    # Validation des pistes
    if 'tracks' in playlist:
        tracks = playlist['tracks']
        if not isinstance(tracks, list):
            issues.append('Les pistes doivent √™tre une liste')
        else:
            if len(tracks) == 0:
                warnings.append('Playlist vide')
            elif len(tracks) > 1000:
                warnings.append('Playlist tr√®s longue (>1000 pistes)')
            
            # Validation de chaque piste
            for i, track in enumerate(tracks):
                if not isinstance(track, dict):
                    issues.append(f'Piste {i+1}: Format invalide')
                    continue
                
                if 'id' not in track and 'title' not in track:
                    issues.append(f'Piste {i+1}: ID ou titre requis')
    
    # Description
    if 'description' in playlist and playlist['description']:
        if len(playlist['description']) > 500:
            warnings.append('Description tr√®s longue (>500 caract√®res)')
    
    return {
        'valid': len(issues) == 0,
        'issues': issues,
        'warnings': warnings,
        'track_count': len(playlist.get('tracks', [])),
        'playlist': playlist
    }


# =============================================================================
# VALIDATEURS DE FICHIERS
# =============================================================================

def validate_audio_file(file_path: str, max_size_mb: int = 50) -> Dict[str, Any]:
    """
    Valide un fichier audio
    
    Args:
        file_path: Chemin du fichier
        max_size_mb: Taille maximale en MB
        
    Returns:
        R√©sultat de validation
    """
    import os
    
    issues = []
    warnings = []
    
    # Existence du fichier
    if not os.path.exists(file_path):
        return {'valid': False, 'issues': ['Fichier inexistant']}
    
    # Taille du fichier
    file_size = os.path.getsize(file_path)
    file_size_mb = file_size / (1024 * 1024)
    
    if file_size_mb > max_size_mb:
        issues.append(f'Fichier trop volumineux: {file_size_mb:.1f}MB (max: {max_size_mb}MB)')
    
    if file_size_mb < 0.1:
        warnings.append('Fichier tr√®s petit (<0.1MB)')
    
    # Type MIME
    try:
        mime_type = magic.from_file(file_path, mime=True)
        
        valid_audio_types = [
            'audio/mpeg', 'audio/wav', 'audio/flac', 'audio/aac',
            'audio/ogg', 'audio/mp4', 'audio/x-ms-wma'
        ]
        
        if mime_type not in valid_audio_types:
            issues.append(f'Type de fichier non support√©: {mime_type}')
    
    except Exception as e:
        warnings.append(f'Impossible de d√©tecter le type MIME: {str(e)}')
    
    # Extension
    _, ext = os.path.splitext(file_path)
    valid_extensions = ['.mp3', '.wav', '.flac', '.aac', '.ogg', '.m4a', '.wma']
    
    if ext.lower() not in valid_extensions:
        issues.append(f'Extension non support√©e: {ext}')
    
    return {
        'valid': len(issues) == 0,
        'issues': issues,
        'warnings': warnings,
        'file_size_mb': file_size_mb,
        'mime_type': mime_type if 'mime_type' in locals() else None,
        'extension': ext
    }


def validate_image_file(file_path: str, max_size_mb: int = 10) -> Dict[str, Any]:
    """
    Valide un fichier image
    
    Args:
        file_path: Chemin du fichier
        max_size_mb: Taille maximale en MB
        
    Returns:
        R√©sultat de validation
    """
    import os
    from PIL import Image
    
    issues = []
    warnings = []
    
    # Existence du fichier
    if not os.path.exists(file_path):
        return {'valid': False, 'issues': ['Fichier inexistant']}
    
    # Taille du fichier
    file_size = os.path.getsize(file_path)
    file_size_mb = file_size / (1024 * 1024)
    
    if file_size_mb > max_size_mb:
        issues.append(f'Fichier trop volumineux: {file_size_mb:.1f}MB (max: {max_size_mb}MB)')
    
    # Validation avec PIL
    try:
        with Image.open(file_path) as img:
            # Dimensions
            width, height = img.size
            
            if width < 100 or height < 100:
                warnings.append('Image tr√®s petite (<100px)')
            
            if width > 5000 or height > 5000:
                warnings.append('Image tr√®s grande (>5000px)')
            
            # Format
            valid_formats = ['JPEG', 'PNG', 'GIF', 'BMP', 'WEBP']
            if img.format not in valid_formats:
                issues.append(f'Format non support√©: {img.format}')
            
            # Mode couleur
            if img.mode not in ['RGB', 'RGBA', 'L', 'P']:
                warnings.append(f'Mode couleur inhabituel: {img.mode}')
            
            return {
                'valid': len(issues) == 0,
                'issues': issues,
                'warnings': warnings,
                'width': width,
                'height': height,
                'format': img.format,
                'mode': img.mode,
                'file_size_mb': file_size_mb
            }
    
    except Exception as e:
        return {
            'valid': False,
            'issues': [f'Erreur lors de l\'ouverture de l\'image: {str(e)}'],
            'file_size_mb': file_size_mb
        }


# =============================================================================
# VALIDATEUR COMPOSITE
# =============================================================================

class DataValidator:
    """Validateur composite pour validation complexe"""
    
    def __init__(self):
        self.validation_rules: Dict[str, List[Callable]] = {}
        self.results: List[Dict[str, Any]] = []
    
    def add_rule(self, field: str, validator_func: Callable, 
                 error_message: Optional[str] = None) -> None:
        """
        Ajoute une r√®gle de validation
        
        Args:
            field: Nom du champ
            validator_func: Fonction de validation
            error_message: Message d'erreur personnalis√©
        """
        if field not in self.validation_rules:
            self.validation_rules[field] = []
        
        rule = {
            'validator': validator_func,
            'error_message': error_message
        }
        
        self.validation_rules[field].append(rule)
    
    def validate_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Valide un dictionnaire de donn√©es
        
        Args:
            data: Donn√©es √† valider
            
        Returns:
            R√©sultat de validation complet
        """
        field_results = {}
        global_issues = []
        
        # Valider chaque champ
        for field, rules in self.validation_rules.items():
            field_issues = []
            field_warnings = []
            
            value = data.get(field)
            
            for rule in rules:
                try:
                    result = rule['validator'](value)
                    
                    if isinstance(result, dict):
                        if not result.get('valid', True):
                            message = rule['error_message'] or f'Validation √©chou√©e pour {field}'
                            field_issues.append(message)
                            if 'issues' in result:
                                field_issues.extend(result['issues'])
                        
                        if 'warnings' in result:
                            field_warnings.extend(result['warnings'])
                    
                    elif not result:  # Boolean False
                        message = rule['error_message'] or f'Validation √©chou√©e pour {field}'
                        field_issues.append(message)
                
                except Exception as e:
                    field_issues.append(f'Erreur de validation pour {field}: {str(e)}')
            
            field_results[field] = {
                'valid': len(field_issues) == 0,
                'issues': field_issues,
                'warnings': field_warnings,
                'value': value
            }
        
        # R√©sultat global
        all_issues = []
        all_warnings = []
        
        for field_result in field_results.values():
            all_issues.extend(field_result['issues'])
            all_warnings.extend(field_result['warnings'])
        
        result = {
            'valid': len(all_issues) == 0,
            'issues': all_issues,
            'warnings': all_warnings,
            'field_results': field_results,
            'data': data
        }
        
        self.results.append(result)
        return result
    
    def clear_rules(self) -> None:
        """Efface toutes les r√®gles de validation"""
        self.validation_rules.clear()
    
    def clear_results(self) -> None:
        """Efface l'historique des r√©sultats"""
        self.results.clear()


# =============================================================================
# EXPORTS
# =============================================================================

__all__ = [
    "validate_email",
    "validate_phone",
    "validate_url",
    "validate_ip_address",
    "validate_user_password",
    "validate_username",
    "validate_audio_metadata",
    "validate_playlist_data",
    "validate_audio_file",
    "validate_image_file",
    "DataValidator"
]
