"""
üéµ Spotify AI Agent - Cryptographic Utilities
=============================================

Utilitaires enterprise pour la cryptographie et la s√©curit√©
avec chiffrement AES, hashing s√©curis√© et gestion des cl√©s.

Architecture:
- Chiffrement/d√©chiffrement AES
- Hashing s√©curis√© (bcrypt, scrypt, argon2)
- G√©n√©ration de cl√©s et tokens
- Signatures num√©riques
- Validation d'int√©grit√©
- Chiffrement asym√©trique

üéñÔ∏è D√©velopp√© par l'√©quipe d'experts enterprise
"""

import hashlib
import secrets
import base64
import hmac
import json
from typing import Optional, Dict, Any, Union, Tuple
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
import bcrypt
import argon2


# =============================================================================
# CHIFFREMENT SYM√âTRIQUE
# =============================================================================

class SecureEncryption:
    """Gestionnaire de chiffrement sym√©trique enterprise"""
    
    def __init__(self, key: Optional[bytes] = None):
        if key is None:
            self.key = Fernet.generate_key()
            self.fernet = Fernet(self.key)
        else:
            self.key = key
            self.fernet = Fernet(key)
    
    def encrypt(self, data: Union[str, bytes]) -> str:
        """
        Chiffre des donn√©es
        
        Args:
            data: Donn√©es √† chiffrer
            
        Returns:
            Donn√©es chiffr√©es en base64
        """
        if isinstance(data, str):
            data = data.encode('utf-8')
        
        encrypted = self.fernet.encrypt(data)
        return base64.urlsafe_b64encode(encrypted).decode('utf-8')
    
    def decrypt(self, encrypted_data: str) -> str:
        """
        D√©chiffre des donn√©es
        
        Args:
            encrypted_data: Donn√©es chiffr√©es en base64
            
        Returns:
            Donn√©es d√©chiffr√©es
        """
        encrypted_bytes = base64.urlsafe_b64decode(encrypted_data.encode('utf-8'))
        decrypted = self.fernet.decrypt(encrypted_bytes)
        return decrypted.decode('utf-8')
    
    def encrypt_json(self, data: Dict[str, Any]) -> str:
        """
        Chiffre un objet JSON
        
        Args:
            data: Objet √† chiffrer
            
        Returns:
            JSON chiffr√©
        """
        json_data = json.dumps(data, separators=(',', ':'))
        return self.encrypt(json_data)
    
    def decrypt_json(self, encrypted_data: str) -> Dict[str, Any]:
        """
        D√©chiffre un objet JSON
        
        Args:
            encrypted_data: JSON chiffr√©
            
        Returns:
            Objet d√©chiffr√©
        """
        decrypted_json = self.decrypt(encrypted_data)
        return json.loads(decrypted_json)


def generate_encryption_key(password: str, salt: Optional[bytes] = None) -> bytes:
    """
    G√©n√®re une cl√© de chiffrement √† partir d'un mot de passe
    
    Args:
        password: Mot de passe
        salt: Sel (g√©n√©r√© si None)
        
    Returns:
        Cl√© de chiffrement
    """
    if salt is None:
        salt = secrets.token_bytes(32)
    
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
    )
    
    key = base64.urlsafe_b64encode(kdf.derive(password.encode('utf-8')))
    return key


def aes_encrypt(data: bytes, key: bytes, mode: str = 'GCM') -> Tuple[bytes, bytes, bytes]:
    """
    Chiffrement AES avec diff√©rents modes
    
    Args:
        data: Donn√©es √† chiffrer
        key: Cl√© de chiffrement (32 bytes pour AES-256)
        mode: Mode de chiffrement (GCM, CBC)
        
    Returns:
        Tuple (donn√©es_chiffr√©es, iv, tag)
    """
    if mode == 'GCM':
        iv = secrets.token_bytes(12)  # 96 bits pour GCM
        cipher = Cipher(algorithms.AES(key), modes.GCM(iv))
        encryptor = cipher.encryptor()
        
        ciphertext = encryptor.update(data) + encryptor.finalize()
        return ciphertext, iv, encryptor.tag
    
    elif mode == 'CBC':
        iv = secrets.token_bytes(16)  # 128 bits pour CBC
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
        encryptor = cipher.encryptor()
        
        # Padding PKCS7
        padding_length = 16 - (len(data) % 16)
        padded_data = data + bytes([padding_length] * padding_length)
        
        ciphertext = encryptor.update(padded_data) + encryptor.finalize()
        return ciphertext, iv, b''
    
    else:
        raise ValueError(f"Mode de chiffrement non support√©: {mode}")


def aes_decrypt(ciphertext: bytes, key: bytes, iv: bytes, 
               tag: Optional[bytes] = None, mode: str = 'GCM') -> bytes:
    """
    D√©chiffrement AES
    
    Args:
        ciphertext: Donn√©es chiffr√©es
        key: Cl√© de d√©chiffrement
        iv: Vecteur d'initialisation
        tag: Tag d'authentification (pour GCM)
        mode: Mode de d√©chiffrement
        
    Returns:
        Donn√©es d√©chiffr√©es
    """
    if mode == 'GCM':
        if tag is None:
            raise ValueError("Tag requis pour le mode GCM")
        
        cipher = Cipher(algorithms.AES(key), modes.GCM(iv, tag))
        decryptor = cipher.decryptor()
        
        return decryptor.update(ciphertext) + decryptor.finalize()
    
    elif mode == 'CBC':
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
        decryptor = cipher.decryptor()
        
        padded_data = decryptor.update(ciphertext) + decryptor.finalize()
        
        # Supprimer le padding PKCS7
        padding_length = padded_data[-1]
        return padded_data[:-padding_length]
    
    else:
        raise ValueError(f"Mode de d√©chiffrement non support√©: {mode}")


# =============================================================================
# HASHING S√âCURIS√â
# =============================================================================

def hash_password(password: str, algorithm: str = 'argon2') -> str:
    """
    Hash s√©curis√© d'un mot de passe
    
    Args:
        password: Mot de passe √† hasher
        algorithm: Algorithme (argon2, bcrypt, scrypt)
        
    Returns:
        Hash du mot de passe
    """
    if algorithm == 'argon2':
        ph = argon2.PasswordHasher(
            time_cost=3,
            memory_cost=65536,
            parallelism=1,
            hash_len=32,
            salt_len=16
        )
        return ph.hash(password)
    
    elif algorithm == 'bcrypt':
        salt = bcrypt.gensalt(rounds=12)
        return bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')
    
    elif algorithm == 'scrypt':
        salt = secrets.token_bytes(32)
        kdf = Scrypt(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            n=2**14,
            r=8,
            p=1,
        )
        key = kdf.derive(password.encode('utf-8'))
        return base64.b64encode(salt + key).decode('utf-8')
    
    else:
        raise ValueError(f"Algorithme non support√©: {algorithm}")


def verify_password(password: str, hashed: str, algorithm: str = 'argon2') -> bool:
    """
    V√©rifie un mot de passe contre son hash
    
    Args:
        password: Mot de passe en clair
        hashed: Hash stock√©
        algorithm: Algorithme utilis√©
        
    Returns:
        True si le mot de passe correspond
    """
    try:
        if algorithm == 'argon2':
            ph = argon2.PasswordHasher()
            ph.verify(hashed, password)
            return True
        
        elif algorithm == 'bcrypt':
            return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))
        
        elif algorithm == 'scrypt':
            decoded = base64.b64decode(hashed.encode('utf-8'))
            salt = decoded[:32]
            stored_key = decoded[32:]
            
            kdf = Scrypt(
                algorithm=hashes.SHA256(),
                length=32,
                salt=salt,
                n=2**14,
                r=8,
                p=1,
            )
            
            kdf.verify(password.encode('utf-8'), stored_key)
            return True
        
        else:
            return False
    
    except Exception:
        return False


def secure_hash(data: Union[str, bytes], algorithm: str = 'sha256') -> str:
    """
    Hash s√©curis√© de donn√©es
    
    Args:
        data: Donn√©es √† hasher
        algorithm: Algorithme de hash
        
    Returns:
        Hash hexad√©cimal
    """
    if isinstance(data, str):
        data = data.encode('utf-8')
    
    if algorithm == 'sha256':
        return hashlib.sha256(data).hexdigest()
    elif algorithm == 'sha512':
        return hashlib.sha512(data).hexdigest()
    elif algorithm == 'blake2b':
        return hashlib.blake2b(data).hexdigest()
    elif algorithm == 'sha3_256':
        return hashlib.sha3_256(data).hexdigest()
    else:
        raise ValueError(f"Algorithme non support√©: {algorithm}")


def hmac_sign(data: Union[str, bytes], key: Union[str, bytes], 
              algorithm: str = 'sha256') -> str:
    """
    Signature HMAC
    
    Args:
        data: Donn√©es √† signer
        key: Cl√© de signature
        algorithm: Algorithme de hash
        
    Returns:
        Signature HMAC
    """
    if isinstance(data, str):
        data = data.encode('utf-8')
    if isinstance(key, str):
        key = key.encode('utf-8')
    
    if algorithm == 'sha256':
        return hmac.new(key, data, hashlib.sha256).hexdigest()
    elif algorithm == 'sha512':
        return hmac.new(key, data, hashlib.sha512).hexdigest()
    else:
        raise ValueError(f"Algorithme non support√©: {algorithm}")


def verify_hmac(data: Union[str, bytes], signature: str, 
               key: Union[str, bytes], algorithm: str = 'sha256') -> bool:
    """
    V√©rifie une signature HMAC
    
    Args:
        data: Donn√©es originales
        signature: Signature √† v√©rifier
        key: Cl√© de signature
        algorithm: Algorithme utilis√©
        
    Returns:
        True si la signature est valide
    """
    expected_signature = hmac_sign(data, key, algorithm)
    return hmac.compare_digest(signature, expected_signature)


# =============================================================================
# G√âN√âRATION DE TOKENS
# =============================================================================

def generate_secure_token(length: int = 32, url_safe: bool = True) -> str:
    """
    G√©n√®re un token s√©curis√©
    
    Args:
        length: Longueur en bytes
        url_safe: Token compatible URL
        
    Returns:
        Token g√©n√©r√©
    """
    token_bytes = secrets.token_bytes(length)
    
    if url_safe:
        return base64.urlsafe_b64encode(token_bytes).decode('utf-8').rstrip('=')
    else:
        return base64.b64encode(token_bytes).decode('utf-8')


def generate_api_key(prefix: str = '', length: int = 32) -> str:
    """
    G√©n√®re une cl√© API
    
    Args:
        prefix: Pr√©fixe de la cl√©
        length: Longueur de la partie al√©atoire
        
    Returns:
        Cl√© API
    """
    random_part = generate_secure_token(length)
    
    if prefix:
        return f"{prefix}_{random_part}"
    else:
        return random_part


def generate_session_id() -> str:
    """
    G√©n√®re un identifiant de session s√©curis√©
    
    Returns:
        ID de session
    """
    return generate_secure_token(24, url_safe=True)


def generate_csrf_token() -> str:
    """
    G√©n√®re un token CSRF
    
    Returns:
        Token CSRF
    """
    return generate_secure_token(16, url_safe=True)


# =============================================================================
# CHIFFREMENT ASYM√âTRIQUE
# =============================================================================

def generate_rsa_keypair(key_size: int = 2048) -> Tuple[bytes, bytes]:
    """
    G√©n√®re une paire de cl√©s RSA
    
    Args:
        key_size: Taille de la cl√© en bits
        
    Returns:
        Tuple (cl√©_priv√©e, cl√©_publique)
    """
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=key_size,
    )
    
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    
    public_key = private_key.public_key()
    public_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    
    return private_pem, public_pem


def rsa_encrypt(data: bytes, public_key_pem: bytes) -> bytes:
    """
    Chiffrement RSA
    
    Args:
        data: Donn√©es √† chiffrer
        public_key_pem: Cl√© publique au format PEM
        
    Returns:
        Donn√©es chiffr√©es
    """
    public_key = serialization.load_pem_public_key(public_key_pem)
    
    encrypted = public_key.encrypt(
        data,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    
    return encrypted


def rsa_decrypt(encrypted_data: bytes, private_key_pem: bytes) -> bytes:
    """
    D√©chiffrement RSA
    
    Args:
        encrypted_data: Donn√©es chiffr√©es
        private_key_pem: Cl√© priv√©e au format PEM
        
    Returns:
        Donn√©es d√©chiffr√©es
    """
    private_key = serialization.load_pem_private_key(private_key_pem, password=None)
    
    decrypted = private_key.decrypt(
        encrypted_data,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    
    return decrypted


def rsa_sign(data: bytes, private_key_pem: bytes) -> bytes:
    """
    Signature RSA
    
    Args:
        data: Donn√©es √† signer
        private_key_pem: Cl√© priv√©e au format PEM
        
    Returns:
        Signature
    """
    private_key = serialization.load_pem_private_key(private_key_pem, password=None)
    
    signature = private_key.sign(
        data,
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        hashes.SHA256()
    )
    
    return signature


def rsa_verify_signature(data: bytes, signature: bytes, public_key_pem: bytes) -> bool:
    """
    V√©rification de signature RSA
    
    Args:
        data: Donn√©es originales
        signature: Signature √† v√©rifier
        public_key_pem: Cl√© publique au format PEM
        
    Returns:
        True si la signature est valide
    """
    try:
        public_key = serialization.load_pem_public_key(public_key_pem)
        
        public_key.verify(
            signature,
            data,
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )
        
        return True
    
    except Exception:
        return False


# =============================================================================
# UTILITAIRES DE S√âCURIT√â
# =============================================================================

def constant_time_compare(a: str, b: str) -> bool:
    """
    Comparaison en temps constant pour √©viter les attaques temporelles
    
    Args:
        a: Premi√®re cha√Æne
        b: Deuxi√®me cha√Æne
        
    Returns:
        True si les cha√Ænes sont identiques
    """
    return hmac.compare_digest(a.encode('utf-8'), b.encode('utf-8'))


def secure_random_choice(choices: list) -> Any:
    """
    Choix al√©atoire cryptographiquement s√©curis√©
    
    Args:
        choices: Liste des choix possibles
        
    Returns:
        √âl√©ment choisi al√©atoirement
    """
    if not choices:
        raise ValueError("La liste de choix ne peut pas √™tre vide")
    
    return secrets.choice(choices)


def generate_salt(length: int = 32) -> bytes:
    """
    G√©n√®re un sel cryptographique
    
    Args:
        length: Longueur du sel en bytes
        
    Returns:
        Sel g√©n√©r√©
    """
    return secrets.token_bytes(length)


def derive_key_from_password(password: str, salt: bytes, 
                           key_length: int = 32, iterations: int = 100000) -> bytes:
    """
    D√©rive une cl√© √† partir d'un mot de passe
    
    Args:
        password: Mot de passe
        salt: Sel
        key_length: Longueur de la cl√©
        iterations: Nombre d'it√©rations
        
    Returns:
        Cl√© d√©riv√©e
    """
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=key_length,
        salt=salt,
        iterations=iterations,
    )
    
    return kdf.derive(password.encode('utf-8'))


# =============================================================================
# EXPORTS
# =============================================================================

__all__ = [
    "SecureEncryption",
    "generate_encryption_key",
    "aes_encrypt",
    "aes_decrypt",
    "hash_password",
    "verify_password",
    "secure_hash",
    "hmac_sign",
    "verify_hmac",
    "generate_secure_token",
    "generate_api_key",
    "generate_session_id",
    "generate_csrf_token",
    "generate_rsa_keypair",
    "rsa_encrypt",
    "rsa_decrypt",
    "rsa_sign",
    "rsa_verify_signature",
    "constant_time_compare",
    "secure_random_choice",
    "generate_salt",
    "derive_key_from_password"
]
