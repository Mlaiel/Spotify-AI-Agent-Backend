"""
ðŸŽµ Spotify AI Agent - API Request Context Management
===================================================

SystÃ¨me de gestion de contexte des requÃªtes API avec patterns enterprise,
traÃ§abilitÃ© complÃ¨te, et injection de dÃ©pendances.

Architecture:
- Contexte de requÃªte thread-safe
- Correlation IDs pour traÃ§abilitÃ©
- User context et session management
- Performance tracking par requÃªte
- Error context pour debugging
- Injection de dÃ©pendances

DÃ©veloppÃ© par Fahed Mlaiel - Enterprise Context Management Expert
"""

import uuid
import time
from datetime import datetime
from typing import Any, Dict, Optional, List, Union
from contextvars import ContextVar
from dataclasses import dataclass, field, asdict
from enum import Enum

from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware


class RequestPhase(str, Enum):
    """Phases d'une requÃªte API"""
    RECEIVED = "received"
    AUTHENTICATED = "authenticated"
    AUTHORIZED = "authorized" 
    VALIDATED = "validated"
    PROCESSING = "processing"
    COMPLETED = "completed"
    ERROR = "error"


@dataclass
class UserContext:
    """Contexte utilisateur dans la requÃªte"""
    user_id: Optional[str] = None
    username: Optional[str] = None
    email: Optional[str] = None
    roles: List[str] = field(default_factory=list)
    permissions: List[str] = field(default_factory=list)
    spotify_id: Optional[str] = None
    subscription_type: Optional[str] = None
    is_authenticated: bool = False
    is_premium: bool = False
    auth_method: Optional[str] = None  # jwt, api_key, oauth
    session_id: Optional[str] = None
    
    def has_role(self, role: str) -> bool:
        """VÃ©rifie si l'utilisateur a un rÃ´le"""
        return role in self.roles
    
    def has_permission(self, permission: str) -> bool:
        """VÃ©rifie si l'utilisateur a une permission"""
        return permission in self.permissions
    
    def to_dict(self) -> Dict[str, Any]:
        """Convertit en dictionnaire"""
        return asdict(self)


@dataclass
class PerformanceContext:
    """Contexte de performance de la requÃªte"""
    start_time: float = field(default_factory=time.time)
    end_time: Optional[float] = None
    duration_ms: Optional[float] = None
    memory_start: Optional[int] = None
    memory_peak: Optional[int] = None
    memory_end: Optional[int] = None
    cpu_time: Optional[float] = None
    db_queries: int = 0
    cache_hits: int = 0
    cache_misses: int = 0
    external_calls: int = 0
    
    def finish(self):
        """Marque la fin de la requÃªte et calcule les mÃ©triques"""
        self.end_time = time.time()
        if self.start_time:
            self.duration_ms = (self.end_time - self.start_time) * 1000
    
    def add_db_query(self):
        """IncrÃ©mente le compteur de requÃªtes DB"""
        self.db_queries += 1
    
    def add_cache_hit(self):
        """IncrÃ©mente le compteur de cache hits"""
        self.cache_hits += 1
    
    def add_cache_miss(self):
        """IncrÃ©mente le compteur de cache misses"""
        self.cache_misses += 1
    
    def add_external_call(self):
        """IncrÃ©mente le compteur d'appels externes"""
        self.external_calls += 1


@dataclass
class ErrorContext:
    """Contexte d'erreur pour debugging"""
    error_id: Optional[str] = None
    error_type: Optional[str] = None
    error_message: Optional[str] = None
    error_details: Dict[str, Any] = field(default_factory=dict)
    stack_trace: Optional[str] = None
    user_message: Optional[str] = None
    retry_count: int = 0
    is_retryable: bool = False
    
    def set_error(self, error: Exception, user_message: Optional[str] = None):
        """Configure l'erreur dans le contexte"""
        self.error_id = str(uuid.uuid4())
        self.error_type = type(error).__name__
        self.error_message = str(error)
        self.user_message = user_message
        import traceback
        self.stack_trace = traceback.format_exc()


@dataclass
class RequestContext:
    """Contexte complet d'une requÃªte API"""
    
    # Identification
    request_id: str = field(default_factory=lambda: str(uuid.uuid4()))
    correlation_id: str = field(default_factory=lambda: str(uuid.uuid4()))
    session_id: Optional[str] = None
    
    # Timing
    timestamp: datetime = field(default_factory=datetime.utcnow)
    phase: RequestPhase = RequestPhase.RECEIVED
    
    # Request Details
    method: Optional[str] = None
    path: Optional[str] = None
    query_params: Dict[str, Any] = field(default_factory=dict)
    headers: Dict[str, str] = field(default_factory=dict)
    user_agent: Optional[str] = None
    ip_address: Optional[str] = None
    
    # User Context
    user: UserContext = field(default_factory=UserContext)
    
    # Performance
    performance: PerformanceContext = field(default_factory=PerformanceContext)
    
    # Error Handling
    error: Optional[ErrorContext] = None
    
    # Custom Data
    metadata: Dict[str, Any] = field(default_factory=dict)
    tags: List[str] = field(default_factory=list)
    
    def set_phase(self, phase: RequestPhase):
        """Change la phase de la requÃªte"""
        self.phase = phase
    
    def set_user(self, user: UserContext):
        """Configure le contexte utilisateur"""
        self.user = user
    
    def set_error(self, error: Exception, user_message: Optional[str] = None):
        """Configure une erreur"""
        self.error = ErrorContext()
        self.error.set_error(error, user_message)
        self.phase = RequestPhase.ERROR
    
    def add_metadata(self, key: str, value: Any):
        """Ajoute des mÃ©tadonnÃ©es"""
        self.metadata[key] = value
    
    def add_tag(self, tag: str):
        """Ajoute un tag"""
        if tag not in self.tags:
            self.tags.append(tag)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convertit en dictionnaire pour logging"""
        return {
            "request_id": self.request_id,
            "correlation_id": self.correlation_id,
            "session_id": self.session_id,
            "timestamp": self.timestamp.isoformat(),
            "phase": self.phase,
            "method": self.method,
            "path": self.path,
            "user_id": self.user.user_id if self.user else None,
            "duration_ms": self.performance.duration_ms,
            "db_queries": self.performance.db_queries,
            "cache_hits": self.performance.cache_hits,
            "cache_misses": self.performance.cache_misses,
            "metadata": self.metadata,
            "tags": self.tags,
            "error_id": self.error.error_id if self.error else None
        }


@dataclass  
class APIContext:
    """Contexte global de l'API"""
    app_name: str = "Spotify AI Agent"
    app_version: str = "2.0.0"
    environment: str = "development"
    deployment_id: str = field(default_factory=lambda: str(uuid.uuid4()))
    startup_time: datetime = field(default_factory=datetime.utcnow)
    
    # MÃ©triques globales
    total_requests: int = 0
    active_requests: int = 0
    total_errors: int = 0
    
    def increment_requests(self):
        """IncrÃ©mente le compteur de requÃªtes"""
        self.total_requests += 1
        self.active_requests += 1
    
    def decrement_active_requests(self):
        """DÃ©crÃ©mente les requÃªtes actives"""
        self.active_requests = max(0, self.active_requests - 1)
    
    def increment_errors(self):
        """IncrÃ©mente le compteur d'erreurs"""
        self.total_errors += 1


# =============================================================================
# CONTEXT STORAGE AVEC CONTEXTVARS
# =============================================================================

# Variables de contexte thread-safe
_request_context: ContextVar[Optional[RequestContext]] = ContextVar(
    'request_context', 
    default=None
)

_api_context: ContextVar[Optional[APIContext]] = ContextVar(
    'api_context',
    default=None
)


def get_request_context() -> Optional[RequestContext]:
    """Retourne le contexte de requÃªte actuel"""
    return _request_context.get()


def set_request_context(context: RequestContext) -> None:
    """DÃ©finit le contexte de requÃªte"""
    _request_context.set(context)


def get_api_context() -> Optional[APIContext]:
    """Retourne le contexte API actuel"""
    return _api_context.get()


def set_api_context(context: APIContext) -> None:
    """DÃ©finit le contexte API"""
    _api_context.set(context)


def clear_request_context() -> None:
    """Efface le contexte de requÃªte"""
    _request_context.set(None)


# =============================================================================
# MIDDLEWARE DE CONTEXTE
# =============================================================================

class RequestContextMiddleware(BaseHTTPMiddleware):
    """Middleware pour gÃ©rer le contexte des requÃªtes"""
    
    def __init__(self, app, api_context: Optional[APIContext] = None):
        super().__init__(app)
        self.api_context = api_context or APIContext()
        set_api_context(self.api_context)
    
    async def dispatch(self, request: Request, call_next):
        """Traite la requÃªte avec contexte"""
        
        # CrÃ©er le contexte de requÃªte
        context = RequestContext()
        
        # Extraire les informations de la requÃªte
        context.method = request.method
        context.path = str(request.url.path)
        context.query_params = dict(request.query_params)
        context.headers = dict(request.headers)
        context.user_agent = request.headers.get("user-agent")
        
        # IP Address avec support proxy
        forwarded_for = request.headers.get("x-forwarded-for")
        if forwarded_for:
            context.ip_address = forwarded_for.split(",")[0].strip()
        else:
            context.ip_address = getattr(request.client, "host", None)
        
        # Correlation ID depuis header ou gÃ©nÃ©rÃ©
        context.correlation_id = request.headers.get(
            "x-correlation-id", 
            context.correlation_id
        )
        
        # Session ID
        context.session_id = request.headers.get("x-session-id")
        
        # DÃ©finir le contexte
        set_request_context(context)
        
        # IncrÃ©menter les mÃ©triques
        self.api_context.increment_requests()
        
        try:
            # Marquer comme en traitement
            context.set_phase(RequestPhase.PROCESSING)
            
            # Traiter la requÃªte
            response = await call_next(request)
            
            # Marquer comme complÃ©tÃ©e
            context.set_phase(RequestPhase.COMPLETED)
            
            # Ajouter les headers de rÃ©ponse
            response.headers["x-request-id"] = context.request_id
            response.headers["x-correlation-id"] = context.correlation_id
            
            return response
            
        except Exception as e:
            # GÃ©rer l'erreur
            context.set_error(e)
            self.api_context.increment_errors()
            raise
            
        finally:
            # Finaliser les mÃ©triques de performance
            context.performance.finish()
            self.api_context.decrement_active_requests()
            
            # Nettoyer le contexte
            clear_request_context()


# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def create_user_context(
    user_id: str,
    username: str = None,
    email: str = None,
    roles: List[str] = None,
    **kwargs
) -> UserContext:
    """CrÃ©e un contexte utilisateur"""
    return UserContext(
        user_id=user_id,
        username=username,
        email=email,
        roles=roles or [],
        is_authenticated=True,
        **kwargs
    )


def get_current_user() -> Optional[UserContext]:
    """Retourne l'utilisateur actuel depuis le contexte"""
    context = get_request_context()
    return context.user if context else None


def get_request_id() -> Optional[str]:
    """Retourne l'ID de la requÃªte actuelle"""
    context = get_request_context()
    return context.request_id if context else None


def get_correlation_id() -> Optional[str]:
    """Retourne l'ID de corrÃ©lation"""
    context = get_request_context()
    return context.correlation_id if context else None


def add_request_metadata(key: str, value: Any) -> None:
    """Ajoute des mÃ©tadonnÃ©es Ã  la requÃªte actuelle"""
    context = get_request_context()
    if context:
        context.add_metadata(key, value)


def add_request_tag(tag: str) -> None:
    """Ajoute un tag Ã  la requÃªte actuelle"""
    context = get_request_context()
    if context:
        context.add_tag(tag)


# Instance middleware pour export
request_context_middleware = RequestContextMiddleware


# =============================================================================
# EXPORTS
# =============================================================================

__all__ = [
    "RequestPhase",
    "UserContext", 
    "PerformanceContext",
    "ErrorContext",
    "RequestContext",
    "APIContext",
    "RequestContextMiddleware",
    "get_request_context",
    "set_request_context",
    "get_api_context",
    "set_api_context",
    "clear_request_context",
    "create_user_context",
    "get_current_user",
    "get_request_id",
    "get_correlation_id",
    "add_request_metadata",
    "add_request_tag",
    "request_context_middleware"
]
