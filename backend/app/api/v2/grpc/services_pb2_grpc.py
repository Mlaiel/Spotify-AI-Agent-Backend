# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import services_pb2 as services__pb2


class AIServiceStub(object):
    """--- AI Service ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Generate = channel.unary_unary(
                '/spotifyai.AIService/Generate',
                request_serializer=services__pb2.GenerateRequest.SerializeToString,
                response_deserializer=services__pb2.GenerateReply.FromString,
                )
        self.Recommend = channel.unary_unary(
                '/spotifyai.AIService/Recommend',
                request_serializer=services__pb2.RecommendRequest.SerializeToString,
                response_deserializer=services__pb2.RecommendReply.FromString,
                )


class AIServiceServicer(object):
    """--- AI Service ---
    """

    def Generate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Recommend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Generate': grpc.unary_unary_rpc_method_handler(
                    servicer.Generate,
                    request_deserializer=services__pb2.GenerateRequest.FromString,
                    response_serializer=services__pb2.GenerateReply.SerializeToString,)
            ),
            'Recommend': grpc.unary_unary_rpc_method_handler(
                    servicer.Recommend,
                    request_deserializer=services__pb2.RecommendRequest.FromString,
                    response_serializer=services__pb2.RecommendReply.SerializeToString,)
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler()
            'spotifyai.AIService', rpc_method_handlers)
    server.add_generic_rpc_handlers(generic_handler,)


 # This class is part of an EXPERIMENTAL API.
class AIService(object):
    """--- AI Service ---
    """

    @staticmethod
    def Generate(request,
            target,)
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spotifyai.AIService/Generate',
            services__pb2.GenerateRequest.SerializeToString,
            services__pb2.GenerateReply.FromString,
            options, channel_credentials,)
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Recommend(request,
            target,)
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spotifyai.AIService/Recommend',
            services__pb2.RecommendRequest.SerializeToString,
            services__pb2.RecommendReply.FromString,
            options, channel_credentials,)
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AnalyticsServiceStub(object):
    """--- Analytics Service ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStats = channel.unary_unary(
                '/spotifyai.AnalyticsService/GetStats',
                request_serializer=services__pb2.StatsRequest.SerializeToString,
                response_deserializer=services__pb2.StatsReply.FromString,)
                )
        self.LogEvent = channel.unary_unary(
                '/spotifyai.AnalyticsService/LogEvent',
                request_serializer=services__pb2.EventLog.SerializeToString,
                response_deserializer=services__pb2.StatusReply.FromString,)
                )


class AnalyticsServiceServicer(object):
    """--- Analytics Service ---
    """

    def GetStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyticsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=services__pb2.StatsRequest.FromString,
                    response_serializer=services__pb2.StatsReply.SerializeToString,)
            ),
            'LogEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.LogEvent,
                    request_deserializer=services__pb2.EventLog.FromString,
                    response_serializer=services__pb2.StatusReply.SerializeToString,)
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler()
            'spotifyai.AnalyticsService', rpc_method_handlers)
    server.add_generic_rpc_handlers(generic_handler,)


 # This class is part of an EXPERIMENTAL API.
class AnalyticsService(object):
    """--- Analytics Service ---
    """

    @staticmethod
    def GetStats(request,
            target,)
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spotifyai.AnalyticsService/GetStats',
            services__pb2.StatsRequest.SerializeToString,
            services__pb2.StatsReply.FromString,
            options, channel_credentials,)
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogEvent(request,
            target,)
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spotifyai.AnalyticsService/LogEvent',
            services__pb2.EventLog.SerializeToString,
            services__pb2.StatusReply.FromString,
            options, channel_credentials,)
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MusicServiceStub(object):
    """--- Music Service ---
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateMusic = channel.unary_unary(
                '/spotifyai.MusicService/GenerateMusic',
                request_serializer=services__pb2.MusicRequest.SerializeToString,
                response_deserializer=services__pb2.MusicReply.FromString,)
                )
        self.MasterTrack = channel.unary_unary(
                '/spotifyai.MusicService/MasterTrack',
                request_serializer=services__pb2.MasterRequest.SerializeToString,
                response_deserializer=services__pb2.MusicReply.FromString,)
                )
        self.SeparateStems = channel.unary_unary(
                '/spotifyai.MusicService/SeparateStems',
                request_serializer=services__pb2.StemsRequest.SerializeToString,
                response_deserializer=services__pb2.StemsReply.FromString,)
                )


class MusicServiceServicer(object):
    """--- Music Service ---
    """

    def GenerateMusic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MasterTrack(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SeparateStems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MusicServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateMusic': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateMusic,
                    request_deserializer=services__pb2.MusicRequest.FromString,
                    response_serializer=services__pb2.MusicReply.SerializeToString,)
            ),
            'MasterTrack': grpc.unary_unary_rpc_method_handler(
                    servicer.MasterTrack,
                    request_deserializer=services__pb2.MasterRequest.FromString,
                    response_serializer=services__pb2.MusicReply.SerializeToString,)
            ),
            'SeparateStems': grpc.unary_unary_rpc_method_handler(
                    servicer.SeparateStems,
                    request_deserializer=services__pb2.StemsRequest.FromString,
                    response_serializer=services__pb2.StemsReply.SerializeToString,)
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler()
            'spotifyai.MusicService', rpc_method_handlers)
    server.add_generic_rpc_handlers(generic_handler,)


 # This class is part of an EXPERIMENTAL API.
class MusicService(object):
    """--- Music Service ---
    """

    @staticmethod
    def GenerateMusic(request,
            target,)
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spotifyai.MusicService/GenerateMusic',
            services__pb2.MusicRequest.SerializeToString,
            services__pb2.MusicReply.FromString,
            options, channel_credentials,)
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MasterTrack(request,
            target,)
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spotifyai.MusicService/MasterTrack',
            services__pb2.MasterRequest.SerializeToString,
            services__pb2.MusicReply.FromString,
            options, channel_credentials,)
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SeparateStems(request,
            target,)
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spotifyai.MusicService/SeparateStems',
            services__pb2.StemsRequest.SerializeToString,
            services__pb2.StemsReply.FromString,
            options, channel_credentials,)
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
