# üß™ Tests EncryptionManager Ultra-Avanc√©s
# =======================================

import pytest
import pytest_asyncio
import asyncio
import time
import json
import base64
import hashlib
import hmac
from datetime import datetime, timedelta
from unittest.mock import Mock, patch, AsyncMock
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding

from app.security.auth.encryption import (
    EncryptionManager, EncryptionAlgorithm, KeyType, EncryptionResult,
    HSMKeyManager, KeyRotationPolicy, ComplianceLevel, CipherSuite
)

from conftest import (
    TestDataFactory, TestUtils, PerformanceTestUtils, SecurityValidators,
    pytest_markers
)


@pytest_markers["unit"]
@pytest_markers["encryption"]
class TestEncryptionManager:
    """Tests unitaires pour EncryptionManager"""
    
    @pytest.mark.asyncio
    async def test_symmetric_encryption_aes256(self, encryption_manager):
        """Test chiffrement sym√©trique AES-256"""
        plaintext = "Donn√©es sensibles √† chiffrer - Test 2024!"
        
        with patch.object(encryption_manager, '_generate_key') as mock_key:
            with patch.object(encryption_manager, '_encrypt_symmetric') as mock_encrypt:
                # Simuler cl√© AES-256
                key = TestUtils.generate_random_bytes(32)  # 256 bits
                iv = TestUtils.generate_random_bytes(16)   # 128 bits
                
                mock_key.return_value = {"key": key, "iv": iv}
                mock_encrypt.return_value = {
                    "ciphertext": base64.b64encode(b"encrypted_data").decode(),
                    "algorithm": EncryptionAlgorithm.AES_256_GCM.value,
                    "key_id": "aes_key_123",
                    "iv": base64.b64encode(iv).decode(),
                    "tag": base64.b64encode(b"auth_tag").decode()
                }
                
                result = await encryption_manager.encrypt_data(
                    plaintext=plaintext,
                    algorithm=EncryptionAlgorithm.AES_256_GCM,
                    key_id="aes_key_123"
                )
        
        assert result.success is True
        assert result.ciphertext is not None
        assert result.algorithm == EncryptionAlgorithm.AES_256_GCM.value
        assert result.key_id == "aes_key_123"
        assert result.iv is not None
        assert result.authentication_tag is not None
        assert result.encrypted_at is not None
    
    @pytest.mark.asyncio
    async def test_symmetric_decryption_aes256(self, encryption_manager):
        """Test d√©chiffrement sym√©trique AES-256"""
        encrypted_data = {
            "ciphertext": base64.b64encode(b"encrypted_content").decode(),
            "algorithm": EncryptionAlgorithm.AES_256_GCM.value,
            "key_id": "aes_key_123",
            "iv": base64.b64encode(TestUtils.generate_random_bytes(16)).decode(),
            "tag": base64.b64encode(b"auth_tag").decode()
        }
        
        with patch.object(encryption_manager, '_decrypt_symmetric') as mock_decrypt:
            mock_decrypt.return_value = {
                "plaintext": "Donn√©es sensibles d√©chiffr√©es!",
                "verified": True,
                "decrypted_at": datetime.utcnow()
            }
            
            result = await encryption_manager.decrypt_data(
                ciphertext=encrypted_data["ciphertext"],
                algorithm=encrypted_data["algorithm"],
                key_id=encrypted_data["key_id"],
                iv=encrypted_data["iv"],
                authentication_tag=encrypted_data["tag"]
            )
        
        assert result["success"] is True
        assert result["plaintext"] == "Donn√©es sensibles d√©chiffr√©es!"
        assert result["verified"] is True
        assert result["decrypted_at"] is not None
    
    @pytest.mark.asyncio
    async def test_asymmetric_encryption_rsa(self, encryption_manager):
        """Test chiffrement asym√©trique RSA"""
        plaintext = "Message secret pour chiffrement RSA"
        
        with patch.object(encryption_manager, '_get_public_key') as mock_public:
            with patch.object(encryption_manager, '_encrypt_asymmetric') as mock_encrypt:
                # Simuler cl√© publique RSA
                mock_public.return_value = "rsa_public_key_pem"
                mock_encrypt.return_value = {
                    "ciphertext": base64.b64encode(b"rsa_encrypted_data").decode(),
                    "algorithm": EncryptionAlgorithm.RSA_4096_OAEP.value,
                    "key_id": "rsa_key_456",
                    "padding": "OAEP"
                }
                
                result = await encryption_manager.encrypt_asymmetric(
                    plaintext=plaintext,
                    public_key_id="rsa_key_456",
                    algorithm=EncryptionAlgorithm.RSA_4096_OAEP
                )
        
        assert result["success"] is True
        assert result["ciphertext"] is not None
        assert result["algorithm"] == EncryptionAlgorithm.RSA_4096_OAEP.value
        assert result["key_id"] == "rsa_key_456"
        assert result["padding"] == "OAEP"
    
    @pytest.mark.asyncio
    async def test_asymmetric_decryption_rsa(self, encryption_manager):
        """Test d√©chiffrement asym√©trique RSA"""
        encrypted_data = {
            "ciphertext": base64.b64encode(b"rsa_encrypted_content").decode(),
            "algorithm": EncryptionAlgorithm.RSA_4096_OAEP.value,
            "key_id": "rsa_key_456"
        }
        
        with patch.object(encryption_manager, '_get_private_key') as mock_private:
            with patch.object(encryption_manager, '_decrypt_asymmetric') as mock_decrypt:
                mock_private.return_value = "rsa_private_key_pem"
                mock_decrypt.return_value = {
                    "plaintext": "Message secret d√©chiffr√©",
                    "decrypted_at": datetime.utcnow()
                }
                
                result = await encryption_manager.decrypt_asymmetric(
                    ciphertext=encrypted_data["ciphertext"],
                    private_key_id=encrypted_data["key_id"],
                    algorithm=encrypted_data["algorithm"]
                )
        
        assert result["success"] is True
        assert result["plaintext"] == "Message secret d√©chiffr√©"
        assert result["decrypted_at"] is not None
    
    @pytest.mark.asyncio
    async def test_data_at_rest_encryption(self, encryption_manager):
        """Test chiffrement de donn√©es au repos"""
        sensitive_data = {
            "user_id": "user_123",
            "credit_card": "4532-1234-5678-9012",
            "ssn": "123-45-6789",
            "medical_record": "Patient data confidential"
        }
        
        with patch.object(encryption_manager, '_encrypt_at_rest') as mock_encrypt:
            mock_encrypt.return_value = {
                "encrypted_fields": {
                    "credit_card": "enc_cc_data_base64",
                    "ssn": "enc_ssn_data_base64",
                    "medical_record": "enc_medical_data_base64"
                },
                "key_references": {
                    "credit_card": "pci_key_789",
                    "ssn": "pii_key_012",
                    "medical_record": "hipaa_key_345"
                },
                "encryption_metadata": {
                    "algorithm": EncryptionAlgorithm.AES_256_GCM.value,
                    "compliance_level": ComplianceLevel.PCI_DSS.value,
                    "encrypted_at": datetime.utcnow().isoformat()
                }
            }
            
            result = await encryption_manager.encrypt_at_rest(
                data=sensitive_data,
                compliance_level=ComplianceLevel.PCI_DSS,
                field_classification={
                    "credit_card": "pci_data",
                    "ssn": "pii_data", 
                    "medical_record": "phi_data"
                }
            )
        
        assert result["success"] is True
        assert "encrypted_fields" in result
        assert "key_references" in result
        assert result["encryption_metadata"]["compliance_level"] == ComplianceLevel.PCI_DSS.value
        
        # Les champs sensibles doivent √™tre chiffr√©s
        assert "credit_card" in result["encrypted_fields"]
        assert "ssn" in result["encrypted_fields"]
        assert "medical_record" in result["encrypted_fields"]
        
        # user_id ne doit pas √™tre chiffr√© (pas sensible)
        assert "user_id" not in result["encrypted_fields"]
    
    @pytest.mark.asyncio
    async def test_data_in_transit_encryption(self, encryption_manager):
        """Test chiffrement de donn√©es en transit"""
        payload = {"message": "Donn√©es confidentielles en transit", "timestamp": time.time()}
        
        with patch.object(encryption_manager, '_encrypt_in_transit') as mock_encrypt:
            mock_encrypt.return_value = {
                "encrypted_payload": "encrypted_transit_data_base64",
                "cipher_suite": CipherSuite.TLS_AES_256_GCM_SHA384.value,
                "session_key_id": "session_key_678",
                "integrity_hash": "sha256_integrity_hash",
                "encrypted_at": datetime.utcnow().isoformat()
            }
            
            result = await encryption_manager.encrypt_in_transit(
                payload=payload,
                destination="api.spotify-ai-agent.com",
                cipher_suite=CipherSuite.TLS_AES_256_GCM_SHA384
            )
        
        assert result["success"] is True
        assert result["encrypted_payload"] is not None
        assert result["cipher_suite"] == CipherSuite.TLS_AES_256_GCM_SHA384.value
        assert result["session_key_id"] is not None
        assert result["integrity_hash"] is not None


@pytest_markers["unit"]
@pytest_markers["hsm"]
class TestHSMKeyManager:
    """Tests pour la gestion des cl√©s HSM"""
    
    @pytest.mark.asyncio
    async def test_hsm_key_generation(self, encryption_manager):
        """Test g√©n√©ration de cl√©s dans HSM"""
        with patch.object(encryption_manager.hsm_manager, 'generate_key') as mock_generate:
            mock_generate.return_value = {
                "key_id": "hsm_key_001",
                "key_type": KeyType.AES_256.value,
                "algorithm": EncryptionAlgorithm.AES_256_GCM.value,
                "hsm_slot": "slot_1",
                "key_handle": "hsm_handle_123",
                "created_at": datetime.utcnow(),
                "compliance_certified": True,
                "fips_140_2_level": 3
            }
            
            result = await encryption_manager.generate_hsm_key(
                key_type=KeyType.AES_256,
                label="production_master_key",
                compliance_level=ComplianceLevel.FIPS_140_2
            )
        
        assert result["success"] is True
        assert result["key_id"] == "hsm_key_001"
        assert result["key_type"] == KeyType.AES_256.value
        assert result["compliance_certified"] is True
        assert result["fips_140_2_level"] == 3
    
    @pytest.mark.asyncio
    async def test_hsm_key_rotation(self, encryption_manager):
        """Test rotation de cl√©s HSM"""
        old_key_id = "hsm_key_001"
        
        with patch.object(encryption_manager.hsm_manager, 'rotate_key') as mock_rotate:
            mock_rotate.return_value = {
                "new_key_id": "hsm_key_002",
                "old_key_id": old_key_id,
                "rotation_completed_at": datetime.utcnow(),
                "re_encryption_jobs": [
                    {"table": "users", "status": "completed"},
                    {"table": "payments", "status": "completed"}
                ],
                "affected_records": 15000
            }
            
            result = await encryption_manager.rotate_hsm_key(
                current_key_id=old_key_id,
                rotation_policy=KeyRotationPolicy.AUTOMATIC_90_DAYS
            )
        
        assert result["success"] is True
        assert result["new_key_id"] == "hsm_key_002"
        assert result["old_key_id"] == old_key_id
        assert result["affected_records"] == 15000
        assert len(result["re_encryption_jobs"]) == 2
    
    @pytest.mark.asyncio
    async def test_hsm_key_backup_recovery(self, encryption_manager):
        """Test sauvegarde et r√©cup√©ration de cl√©s HSM"""
        key_id = "hsm_key_001"
        
        # Test sauvegarde
        with patch.object(encryption_manager.hsm_manager, 'backup_key') as mock_backup:
            mock_backup.return_value = {
                "backup_id": "backup_001",
                "key_id": key_id,
                "backup_location": "secure_vault_1",
                "encrypted_backup": True,
                "backup_created_at": datetime.utcnow(),
                "checksum": "sha256_backup_checksum"
            }
            
            backup_result = await encryption_manager.backup_hsm_key(
                key_id=key_id,
                backup_location="secure_vault_1"
            )
        
        assert backup_result["success"] is True
        assert backup_result["backup_id"] == "backup_001"
        assert backup_result["encrypted_backup"] is True
        
        # Test r√©cup√©ration
        with patch.object(encryption_manager.hsm_manager, 'restore_key') as mock_restore:
            mock_restore.return_value = {
                "restored_key_id": key_id,
                "backup_id": "backup_001",
                "restore_completed_at": datetime.utcnow(),
                "integrity_verified": True,
                "hsm_slot": "slot_2"
            }
            
            restore_result = await encryption_manager.restore_hsm_key(
                backup_id="backup_001",
                target_slot="slot_2"
            )
        
        assert restore_result["success"] is True
        assert restore_result["restored_key_id"] == key_id
        assert restore_result["integrity_verified"] is True


@pytest_markers["unit"]
@pytest_markers["compliance"]
class TestComplianceEncryption:
    """Tests pour le chiffrement conforme aux r√©glementations"""
    
    @pytest.mark.asyncio
    async def test_pci_dss_encryption(self, encryption_manager):
        """Test chiffrement conforme PCI DSS"""
        credit_card_data = {
            "pan": "4532123456789012",
            "expiry": "12/25",
            "cvv": "123",
            "cardholder_name": "John Doe"
        }
        
        with patch.object(encryption_manager, '_encrypt_pci_data') as mock_encrypt:
            mock_encrypt.return_value = {
                "encrypted_pan": "pci_encrypted_pan_data",
                "encrypted_cvv": "pci_encrypted_cvv_data",
                "key_id": "pci_master_key_001",
                "algorithm": EncryptionAlgorithm.AES_256_GCM.value,
                "compliance_level": ComplianceLevel.PCI_DSS.value,
                "audit_log_id": "pci_audit_001",
                "encryption_timestamp": datetime.utcnow().isoformat()
            }
            
            result = await encryption_manager.encrypt_pci_data(
                card_data=credit_card_data,
                merchant_id="merchant_123"
            )
        
        assert result["success"] is True
        assert result["compliance_level"] == ComplianceLevel.PCI_DSS.value
        assert result["encrypted_pan"] is not None
        assert result["encrypted_cvv"] is not None
        assert result["audit_log_id"] is not None
        
        # Cardholder name et expiry peuvent √™tre moins prot√©g√©s
        assert "cardholder_name" not in result  # Pas chiffr√© ou trait√© s√©par√©ment
    
    @pytest.mark.asyncio
    async def test_hipaa_phi_encryption(self, encryption_manager):
        """Test chiffrement conforme HIPAA pour PHI"""
        phi_data = {
            "patient_id": "patient_789",
            "medical_record_number": "MRN123456",
            "diagnosis": "Confidential medical diagnosis",
            "treatment_notes": "Patient treatment details",
            "doctor_notes": "Physician private notes"
        }
        
        with patch.object(encryption_manager, '_encrypt_phi_data') as mock_encrypt:
            mock_encrypt.return_value = {
                "encrypted_fields": {
                    "medical_record_number": "hipaa_encrypted_mrn",
                    "diagnosis": "hipaa_encrypted_diagnosis",
                    "treatment_notes": "hipaa_encrypted_treatment",
                    "doctor_notes": "hipaa_encrypted_notes"
                },
                "compliance_level": ComplianceLevel.HIPAA.value,
                "encryption_algorithm": EncryptionAlgorithm.AES_256_GCM.value,
                "access_log_id": "hipaa_access_001",
                "phi_category": "medical_records"
            }
            
            result = await encryption_manager.encrypt_phi_data(
                phi_data=phi_data,
                healthcare_provider_id="provider_456"
            )
        
        assert result["success"] is True
        assert result["compliance_level"] == ComplianceLevel.HIPAA.value
        assert "encrypted_fields" in result
        assert "access_log_id" in result
        assert result["phi_category"] == "medical_records"
    
    @pytest.mark.asyncio
    async def test_gdpr_pii_encryption(self, encryption_manager):
        """Test chiffrement conforme GDPR pour donn√©es personnelles"""
        pii_data = {
            "user_id": "user_123",
            "email": "user@example.com",
            "phone": "+33123456789",
            "address": "123 Rue de la Paix, Paris",
            "preferences": {"newsletter": True, "marketing": False}
        }
        
        with patch.object(encryption_manager, '_encrypt_pii_data') as mock_encrypt:
            mock_encrypt.return_value = {
                "encrypted_fields": {
                    "email": "gdpr_encrypted_email",
                    "phone": "gdpr_encrypted_phone",
                    "address": "gdpr_encrypted_address"
                },
                "compliance_level": ComplianceLevel.GDPR.value,
                "data_subject_rights": {
                    "right_to_erasure": True,
                    "right_to_portability": True,
                    "right_to_rectification": True
                },
                "legal_basis": "consent",
                "retention_period": "2_years"
            }
            
            result = await encryption_manager.encrypt_pii_data(
                pii_data=pii_data,
                legal_basis="consent",
                data_controller="spotify-ai-agent"
            )
        
        assert result["success"] is True
        assert result["compliance_level"] == ComplianceLevel.GDPR.value
        assert result["data_subject_rights"]["right_to_erasure"] is True
        assert result["legal_basis"] == "consent"


@pytest_markers["performance"]
@pytest_markers["encryption"]
class TestEncryptionPerformance:
    """Tests de performance pour le chiffrement"""
    
    @pytest.mark.asyncio
    async def test_symmetric_encryption_performance(self, encryption_manager):
        """Test performance chiffrement sym√©trique"""
        data_1kb = "x" * 1024  # 1KB de donn√©es
        
        with patch.object(encryption_manager, 'encrypt_data') as mock_encrypt:
            mock_encrypt.return_value = EncryptionResult(
                success=True,
                ciphertext="encrypted_1kb_data",
                algorithm=EncryptionAlgorithm.AES_256_GCM.value,
                key_id="perf_key_001"
            )
            
            result, execution_time = await PerformanceTestUtils.measure_execution_time(
                encryption_manager.encrypt_data,
                plaintext=data_1kb,
                algorithm=EncryptionAlgorithm.AES_256_GCM
            )
        
        # Chiffrement 1KB doit √™tre < 10ms
        assert execution_time < 0.01
        assert result.success is True
        
        print(f"üîê Temps chiffrement 1KB: {execution_time:.3f}s")
    
    @pytest.mark.asyncio
    async def test_bulk_encryption_performance(self, encryption_manager):
        """Test performance chiffrement en lot"""
        # Simuler 1000 enregistrements de 100 bytes chacun
        records = [f"record_{i}_" + "x" * 90 for i in range(1000)]
        
        with patch.object(encryption_manager, 'encrypt_bulk') as mock_bulk:
            mock_bulk.return_value = {
                "encrypted_count": 1000,
                "failed_count": 0,
                "total_size_bytes": 100000,
                "throughput_mbps": 50.0
            }
            
            result, execution_time = await PerformanceTestUtils.measure_execution_time(
                encryption_manager.encrypt_bulk,
                records=records,
                algorithm=EncryptionAlgorithm.AES_256_GCM
            )
        
        # Traitement en lot doit √™tre efficace
        assert execution_time < 2.0  # < 2s pour 1000 enregistrements
        assert result["encrypted_count"] == 1000
        assert result["throughput_mbps"] > 10.0
        
        print(f"üìä D√©bit chiffrement lot: {result['throughput_mbps']:.1f} MB/s")
    
    @pytest.mark.asyncio
    async def test_concurrent_encryption_operations(self, encryption_manager):
        """Test op√©rations de chiffrement concurrentes"""
        data_samples = [f"concurrent_data_{i}" for i in range(20)]
        
        async def encrypt_sample(data):
            with patch.object(encryption_manager, 'encrypt_data') as mock_encrypt:
                mock_encrypt.return_value = EncryptionResult(
                    success=True,
                    ciphertext=f"encrypted_{data}",
                    algorithm=EncryptionAlgorithm.AES_256_GCM.value,
                    key_id="concurrent_key"
                )
                
                return await encryption_manager.encrypt_data(
                    plaintext=data,
                    algorithm=EncryptionAlgorithm.AES_256_GCM
                )
        
        stress_results = await PerformanceTestUtils.stress_test_function(
            encrypt_sample,
            concurrent_calls=20,
            data_samples[0]
        )
        
        assert stress_results["success_rate"] >= 0.95
        assert stress_results["average_time"] < 0.1
        
        print(f"üìä Taux r√©ussite concurrent: {stress_results['success_rate']:.2%}")
        print(f"‚è±Ô∏è  Temps moyen chiffrement: {stress_results['average_time']:.3f}s")


@pytest_markers["security"]
@pytest_markers["encryption"]
class TestEncryptionSecurity:
    """Tests de s√©curit√© pour le chiffrement"""
    
    @pytest.mark.asyncio
    async def test_key_derivation_security(self, encryption_manager):
        """Test s√©curit√© de la d√©rivation de cl√©s"""
        password = "user_password_123"
        salt = TestUtils.generate_random_bytes(32)
        
        with patch.object(encryption_manager, '_derive_key') as mock_derive:
            mock_derive.return_value = {
                "derived_key": "pbkdf2_derived_key_256bits",
                "salt": base64.b64encode(salt).decode(),
                "iterations": 100000,
                "algorithm": "PBKDF2-SHA256",
                "key_length": 32
            }
            
            result = await encryption_manager.derive_key_from_password(
                password=password,
                salt=salt,
                iterations=100000
            )
        
        assert result["iterations"] >= 100000  # Minimum OWASP
        assert result["key_length"] >= 32     # 256 bits minimum
        assert result["algorithm"] == "PBKDF2-SHA256"
        assert len(base64.b64decode(result["salt"])) >= 32  # Salt suffisant
    
    @pytest.mark.asyncio
    async def test_iv_uniqueness(self, encryption_manager):
        """Test unicit√© des vecteurs d'initialisation"""
        ivs = []
        
        # G√©n√©rer 100 IVs
        for i in range(100):
            with patch.object(encryption_manager, '_generate_iv') as mock_iv:
                iv = TestUtils.generate_random_bytes(16)
                mock_iv.return_value = iv
                
                generated_iv = await encryption_manager.generate_iv(
                    algorithm=EncryptionAlgorithm.AES_256_GCM
                )
                
                ivs.append(base64.b64encode(generated_iv).decode())
        
        # Tous les IVs doivent √™tre uniques
        unique_ivs = set(ivs)
        assert len(unique_ivs) == len(ivs)
        
        # Calculer entropie
        entropy = SecurityValidators.calculate_entropy("".join(ivs))
        assert entropy > 4.0  # Entropie suffisante
        
        print(f"üîê Entropie des IVs: {entropy:.2f} bits")
    
    @pytest.mark.asyncio
    async def test_authentication_tag_validation(self, encryption_manager):
        """Test validation des tags d'authentification"""
        ciphertext = "encrypted_data_with_auth"
        correct_tag = "correct_authentication_tag"
        wrong_tag = "incorrect_authentication_tag"
        
        # Test avec tag correct
        with patch.object(encryption_manager, '_verify_auth_tag') as mock_verify:
            mock_verify.return_value = True
            
            result = await encryption_manager.verify_authentication_tag(
                ciphertext=ciphertext,
                authentication_tag=correct_tag,
                key_id="test_key"
            )
        
        assert result["verified"] is True
        
        # Test avec tag incorrect
        with patch.object(encryption_manager, '_verify_auth_tag') as mock_verify:
            mock_verify.return_value = False
            
            result = await encryption_manager.verify_authentication_tag(
                ciphertext=ciphertext,
                authentication_tag=wrong_tag,
                key_id="test_key"
            )
        
        assert result["verified"] is False
        assert result["tampering_detected"] is True
    
    @pytest.mark.asyncio
    async def test_side_channel_protection(self, encryption_manager):
        """Test protection contre les attaques par canal auxiliaire"""
        data1 = "short"
        data2 = "this_is_a_much_longer_piece_of_data_to_encrypt"
        
        # Mesurer temps de chiffrement pour diff√©rentes tailles
        with patch.object(encryption_manager, 'encrypt_data') as mock_encrypt:
            mock_encrypt.return_value = EncryptionResult(success=True, ciphertext="encrypted")
            
            _, time1 = await PerformanceTestUtils.measure_execution_time(
                encryption_manager.encrypt_data,
                plaintext=data1,
                algorithm=EncryptionAlgorithm.AES_256_GCM
            )
            
            _, time2 = await PerformanceTestUtils.measure_execution_time(
                encryption_manager.encrypt_data,
                plaintext=data2,
                algorithm=EncryptionAlgorithm.AES_256_GCM
            )
        
        # Les temps ne doivent pas r√©v√©ler d'informations sur la taille
        # (en mode GCM, le temps peut varier l√©g√®rement, mais pas drastiquement)
        time_ratio = max(time1, time2) / min(time1, time2)
        assert time_ratio < 2.0  # Variation acceptable
        
        print(f"‚è±Ô∏è  Ratio temps chiffrement: {time_ratio:.2f}")


if __name__ == "__main__":
    print("üß™ Tests EncryptionManager Ultra-Avanc√©s")
    print("üìã Modules test√©s:")
    print("  ‚úÖ Chiffrement sym√©trique AES-256-GCM")
    print("  ‚úÖ Chiffrement asym√©trique RSA-4096-OAEP")
    print("  ‚úÖ Chiffrement de donn√©es au repos et en transit")
    print("  ‚úÖ Gestion des cl√©s HSM et rotation")
    print("  ‚úÖ Chiffrement conforme PCI DSS, HIPAA, GDPR")
    print("  ‚úÖ Tests de s√©curit√© et protection contre attaques")
    print("  ‚úÖ Tests de performance et d√©bit")
    
    # Lancement des tests
    import subprocess
    subprocess.run(["pytest", __file__, "-v", "--tb=short"])
