"""
ðŸŽµ Tests d'IntÃ©gration Ultra-AvancÃ©s pour API Core Module Complet
===============================================================

Tests d'intÃ©gration industriels pour valider l'interaction entre tous les
composants du module core avec patterns enterprise et validation complÃ¨te.

DÃ©veloppÃ© par Fahed Mlaiel - Enterprise Integration Testing Expert
"""

import pytest
import asyncio
import time
import json
from unittest.mock import Mock, patch, MagicMock
from datetime import datetime, timezone
from typing import Dict, Any, List

from fastapi import FastAPI, Request, Depends, HTTPException
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.testclient import TestClient
from starlette.responses import JSONResponse

# Imports de tous les modules core
from app.api.core.config import APIConfig, get_api_config
from app.api.core.context import RequestContext, get_request_context, set_request_context
from app.api.core.factory import ComponentFactory, DependencyContainer  # , configure_dependencies
from app.api.core.exceptions import APIException, ValidationException, ErrorCode
from app.api.core.response import create_success_response, create_error_response, APIResponse
from app.api.core.monitoring import get_api_metrics, get_health_checker, setup_monitoring


# =============================================================================
# FIXTURES ENTERPRISE POUR INTEGRATION TESTING
# =============================================================================

@pytest.fixture
def integration_config():
    """Configuration complÃ¨te pour les tests d'intÃ©gration"""
    return {
        "app": {
            "name": "Test Spotify AI Agent",
            "version": "1.0.0",
            "debug": True,
            "environment": "test"
        },
        "database": {
            "url": "postgresql://test:test@localhost/test_db",
            "pool_size": 5,
            "max_overflow": 10
        },
        "redis": {
            "url": "redis://localhost:6379/1",
            "timeout": 30,
            "max_connections": 20
        },
        "monitoring": {
            "enabled": True,
            "metrics": {"enabled": True, "port": 9090},
            "health": {"enabled": True, "path": "/health"},
            "alerts": {
                "enabled": True,
                "thresholds": {
                    "response_time": 1000,
                    "error_rate": 0.05,
                    "cpu_usage": 80,
                    "memory_usage": 80
                }
            }
        },
        "security": {
            "cors_enabled": True,
            "rate_limit": {"enabled": True, "requests_per_minute": 100}
        }
    }


@pytest.fixture
def clean_integration_env():
    """Environnement propre pour les tests d'intÃ©gration"""
    # Nettoyer les singletons
    ComponentFactory._instance = None
    DependencyContainer._instance = None
    
    # Nettoyer le contexte
    from app.api.core.context import clear_request_context
    clear_request_context()
    
    yield
    
    # Nettoyer aprÃ¨s le test
    ComponentFactory._instance = None
    DependencyContainer._instance = None
    clear_request_context()


@pytest.fixture
def integrated_app(integration_config, clean_integration_env):
    """Application FastAPI complÃ¨tement intÃ©grÃ©e"""
    app = FastAPI(
        title=integration_config["app"]["name"],
        version=integration_config["app"]["version"],
        debug=integration_config["app"]["debug"]
    )
    
    # Configurer les dÃ©pendances
    configure_dependencies(integration_config)
    
    # Configurer le monitoring
    setup_monitoring(app, integration_config["monitoring"])
    
    # Ajouter des endpoints de test
    @app.get("/api/v1/test/success")
    async def test_success():
        """Endpoint de test qui utilise tous les composants core"""
        # Utiliser le contexte
        context = get_request_context()
        
        # Utiliser la configuration
        config = get_api_config()
        
        # Retourner une rÃ©ponse standardisÃ©e
        return create_success_response(
            data={
                "message": "Integration test success",
                "request_id": context.request_id if context else None,
                "app_name": config.app_name if config else "Unknown",
                "timestamp": datetime.now(timezone.utc).isoformat()
            },
            message="Integration test completed successfully"
        )
    
    @app.get("/api/v1/test/validation-error")
    async def test_validation_error():
        """Endpoint qui dÃ©clenche une erreur de validation"""
        raise ValidationException(
            message="Test validation error",
            field="test_field",
            value="invalid_value"
        )
    
    @app.get("/api/v1/test/api-error")
    async def test_api_error():
        """Endpoint qui dÃ©clenche une erreur API"""
        raise APIException(
            message="Test API error",
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500
        )
    
    @app.get("/api/v1/test/context")
    async def test_context():
        """Endpoint qui teste le contexte de requÃªte"""
        context = get_request_context()
        
        if not context:
            raise APIException("No request context available")
        
        return create_success_response(
            data={
                "request_id": context.request_id,
                "correlation_id": context.correlation_id,
                "user_id": context.user.user_id if context.user else None,
                "timestamp": context.timestamp.isoformat()
            }
        )
    
    @app.get("/api/v1/test/dependencies")
    async def test_dependencies():
        """Endpoint qui teste les dÃ©pendances"""
        from app.api.core.factory import get_dependency_container
        
        container = get_dependency_container()
        
        # Utiliser quelques dÃ©pendances
        try:
            config = container.resolve("config")
            database = container.resolve("database")
            
            return create_success_response(
                data={
                    "config_available": config is not None,
                    "database_available": database is not None,
                    "dependencies_count": len(container._dependencies)
                }
            )
        except Exception as e:
            raise APIException(f"Dependency resolution failed: {str(e)}")
    
    @app.get("/api/v1/test/monitoring")
    async def test_monitoring():
        """Endpoint qui teste le monitoring"""
        metrics = get_api_metrics()
        health_checker = get_health_checker()
        
        return create_success_response(
            data={
                "metrics_summary": metrics.get_metrics_summary(),
                "health_summary": health_checker.get_health_summary()
            }
        )
    
    return app


# =============================================================================
# TESTS D'INTÃ‰GRATION DE BASE
# =============================================================================

class TestCoreModuleIntegration:
    """Tests d'intÃ©gration pour le module core complet"""
    
    def test_application_startup_integration(self, integrated_app):
        """Test dÃ©marrage complet de l'application"""
        with TestClient(integrated_app) as client:
            # L'application devrait dÃ©marrer sans erreur
            response = client.get("/docs")
            assert response.status_code == 200
    
    def test_success_endpoint_integration(self, integrated_app):
        """Test endpoint de succÃ¨s avec tous les composants"""
        with TestClient(integrated_app) as client:
            response = client.get("/api/v1/test/success")
            
            assert response.status_code == 200
            data = response.json()
            
            # VÃ©rifier la structure de rÃ©ponse standardisÃ©e
            assert data["success"] is True
            assert "data" in data
            assert "message" in data
            assert "metadata" in data
            
            # VÃ©rifier les donnÃ©es spÃ©cifiques
            assert data["data"]["message"] == "Integration test success"
            assert data["data"]["request_id"] is not None
            assert data["data"]["app_name"] == "Test Spotify AI Agent"
            assert data["data"]["timestamp"] is not None
            
            # VÃ©rifier les mÃ©tadonnÃ©es
            assert data["metadata"]["request_id"] is not None
            assert data["metadata"]["timestamp"] is not None
    
    def test_context_integration(self, integrated_app):
        """Test intÃ©gration du contexte de requÃªte"""
        with TestClient(integrated_app) as client:
            response = client.get("/api/v1/test/context")
            
            assert response.status_code == 200
            data = response.json()
            
            # VÃ©rifier que le contexte est correctement Ã©tabli
            assert data["data"]["request_id"] is not None
            assert data["data"]["correlation_id"] is not None
            assert data["data"]["timestamp"] is not None
            
            # VÃ©rifier que les IDs sont dans les headers de rÃ©ponse
            assert "X-Request-ID" in response.headers
            assert "X-Correlation-ID" in response.headers
    
    def test_dependencies_integration(self, integrated_app):
        """Test intÃ©gration des dÃ©pendances"""
        with TestClient(integrated_app) as client:
            response = client.get("/api/v1/test/dependencies")
            
            assert response.status_code == 200
            data = response.json()
            
            # VÃ©rifier que les dÃ©pendances sont disponibles
            assert data["data"]["config_available"] is True
            assert data["data"]["database_available"] is True
            assert data["data"]["dependencies_count"] > 0
    
    def test_monitoring_integration(self, integrated_app):
        """Test intÃ©gration du monitoring"""
        with TestClient(integrated_app) as client:
            # Faire quelques requÃªtes pour gÃ©nÃ©rer des mÃ©triques
            for _ in range(5):
                client.get("/api/v1/test/success")
            
            response = client.get("/api/v1/test/monitoring")
            
            assert response.status_code == 200
            data = response.json()
            
            # VÃ©rifier les mÃ©triques
            metrics_summary = data["data"]["metrics_summary"]
            assert metrics_summary["total_requests"] >= 5
            
            # VÃ©rifier la santÃ©
            health_summary = data["data"]["health_summary"]
            assert "overall_status" in health_summary


# =============================================================================
# TESTS D'INTÃ‰GRATION DES ERREURS
# =============================================================================

class TestErrorHandlingIntegration:
    """Tests d'intÃ©gration pour la gestion d'erreurs"""
    
    def test_validation_error_integration(self, integrated_app):
        """Test gestion d'erreur de validation"""
        with TestClient(integrated_app) as client:
            response = client.get("/api/v1/test/validation-error")
            
            assert response.status_code == 422
            data = response.json()
            
            # VÃ©rifier la structure d'erreur standardisÃ©e
            assert data["success"] is False
            assert data["error"]["code"] == ErrorCode.VALIDATION_ERROR
            assert data["error"]["message"] == "Test validation error"
            assert "error_id" in data["error"]
            assert "timestamp" in data["error"]
            
            # VÃ©rifier les dÃ©tails de validation
            assert len(data["error"]["details"]) > 0
            detail = data["error"]["details"][0]
            assert detail["field"] == "test_field"
            assert detail["value"] == "invalid_value"
    
    def test_api_error_integration(self, integrated_app):
        """Test gestion d'erreur API"""
        with TestClient(integrated_app) as client:
            response = client.get("/api/v1/test/api-error")
            
            assert response.status_code == 500
            data = response.json()
            
            # VÃ©rifier la structure d'erreur
            assert data["success"] is False
            assert data["error"]["code"] == ErrorCode.INTERNAL_ERROR
            assert data["error"]["message"] == "Test API error"
            
            # VÃ©rifier les headers d'erreur
            assert "X-Error-ID" in response.headers
    
    def test_http_exception_integration(self, integrated_app):
        """Test gestion HTTPException standard"""
        with TestClient(integrated_app) as client:
            # Endpoint inexistant
            response = client.get("/api/v1/nonexistent")
            
            assert response.status_code == 404
            data = response.json()
            
            # MÃªme les erreurs HTTP standard devraient suivre notre format
            assert "error" in data
    
    def test_error_correlation_integration(self, integrated_app):
        """Test corrÃ©lation des erreurs avec le contexte"""
        with TestClient(integrated_app) as client:
            # PremiÃ¨re requÃªte rÃ©ussie pour Ã©tablir le contexte
            success_response = client.get("/api/v1/test/success")
            correlation_id = success_response.headers.get("X-Correlation-ID")
            
            # RequÃªte d'erreur avec mÃªme corrÃ©lation
            error_response = client.get(
                "/api/v1/test/validation-error",
                headers={"X-Correlation-ID": correlation_id}
            )
            
            assert error_response.status_code == 422
            
            # VÃ©rifier que la corrÃ©lation est prÃ©servÃ©e
            assert error_response.headers.get("X-Correlation-ID") == correlation_id


# =============================================================================
# TESTS D'INTÃ‰GRATION DE PERFORMANCE
# =============================================================================

class TestPerformanceIntegration:
    """Tests d'intÃ©gration pour les performances"""
    
    def test_response_time_monitoring_integration(self, integrated_app):
        """Test monitoring du temps de rÃ©ponse"""
        with TestClient(integrated_app) as client:
            # Faire plusieurs requÃªtes
            start_time = time.time()
            responses = []
            
            for _ in range(10):
                response = client.get("/api/v1/test/success")
                responses.append(response)
            
            end_time = time.time()
            total_time = end_time - start_time
            
            # Toutes les requÃªtes devraient rÃ©ussir
            assert all(r.status_code == 200 for r in responses)
            
            # Le temps total ne devrait pas Ãªtre excessif
            assert total_time < 5.0  # Moins de 5 secondes pour 10 requÃªtes
            
            # VÃ©rifier que les mÃ©triques ont Ã©tÃ© collectÃ©es
            response = client.get("/api/v1/test/monitoring")
            data = response.json()
            
            metrics = data["data"]["metrics_summary"]
            assert metrics["total_requests"] >= 10
            assert metrics["avg_response_time"] > 0
    
    def test_concurrent_requests_integration(self, integrated_app):
        """Test requÃªtes concurrentes"""
        import threading
        from concurrent.futures import ThreadPoolExecutor
        
        def make_request():
            with TestClient(integrated_app) as client:
                response = client.get("/api/v1/test/success")
                return response.status_code
        
        # ExÃ©cuter 20 requÃªtes concurrentes
        with ThreadPoolExecutor(max_workers=5) as executor:
            futures = [executor.submit(make_request) for _ in range(20)]
            results = [future.result() for future in futures]
        
        # Toutes les requÃªtes devraient rÃ©ussir
        assert all(status == 200 for status in results)
        assert len(results) == 20
    
    def test_memory_usage_integration(self, integrated_app):
        """Test utilisation mÃ©moire sous charge"""
        import psutil
        import os
        
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss
        
        with TestClient(integrated_app) as client:
            # Faire beaucoup de requÃªtes
            for _ in range(100):
                response = client.get("/api/v1/test/success")
                assert response.status_code == 200
        
        final_memory = process.memory_info().rss
        memory_increase = final_memory - initial_memory
        
        # L'augmentation de mÃ©moire ne devrait pas Ãªtre excessive
        # (Seuil arbitraire de 50MB pour 100 requÃªtes)
        assert memory_increase < 50 * 1024 * 1024


# =============================================================================
# TESTS D'INTÃ‰GRATION DE SÃ‰CURITÃ‰
# =============================================================================

class TestSecurityIntegration:
    """Tests d'intÃ©gration pour la sÃ©curitÃ©"""
    
    def test_headers_security_integration(self, integrated_app):
        """Test headers de sÃ©curitÃ©"""
        with TestClient(integrated_app) as client:
            response = client.get("/api/v1/test/success")
            
            # VÃ©rifier les headers de sÃ©curitÃ©
            # (Ces headers devraient Ãªtre ajoutÃ©s par les middlewares de sÃ©curitÃ©)
            
            # Headers informatifs
            assert "X-Request-ID" in response.headers
            assert "X-Correlation-ID" in response.headers
    
    def test_error_information_disclosure_integration(self, integrated_app):
        """Test non-divulgation d'informations dans les erreurs"""
        with TestClient(integrated_app) as client:
            response = client.get("/api/v1/test/api-error")
            
            assert response.status_code == 500
            data = response.json()
            
            # Les erreurs ne devraient pas exposer d'informations sensibles
            error_message = data["error"]["message"]
            
            # VÃ©rifier qu'il n'y a pas de stack trace ou d'infos internes
            assert "Traceback" not in error_message
            assert "File " not in error_message
            assert "line " not in error_message
    
    def test_input_validation_integration(self, integrated_app):
        """Test validation des entrÃ©es"""
        with TestClient(integrated_app) as client:
            # Test avec des donnÃ©es malicieuses
            malicious_headers = {
                "X-Malicious": "<script>alert('xss')</script>",
                "X-SQL-Injection": "'; DROP TABLE users; --"
            }
            
            response = client.get(
                "/api/v1/test/success",
                headers=malicious_headers
            )
            
            # La requÃªte devrait rÃ©ussir mais les donnÃ©es malicieuses
            # ne devraient pas Ãªtre reflÃ©tÃ©es dans la rÃ©ponse
            assert response.status_code == 200
            
            response_text = response.text
            assert "<script>" not in response_text
            assert "DROP TABLE" not in response_text


# =============================================================================
# TESTS D'INTÃ‰GRATION DES MIDDLEWARE
# =============================================================================

class TestMiddlewareIntegration:
    """Tests d'intÃ©gration pour les middlewares"""
    
    def test_middleware_chain_integration(self, integrated_app):
        """Test chaÃ®ne de middlewares"""
        with TestClient(integrated_app) as client:
            response = client.get("/api/v1/test/success")
            
            assert response.status_code == 200
            
            # VÃ©rifier que tous les middlewares ont traitÃ© la requÃªte
            # (Context, Monitoring, etc.)
            
            # Le contexte devrait Ãªtre Ã©tabli
            data = response.json()
            assert data["data"]["request_id"] is not None
            
            # Les mÃ©triques devraient Ãªtre collectÃ©es
            monitoring_response = client.get("/api/v1/test/monitoring")
            monitoring_data = monitoring_response.json()
            assert monitoring_data["data"]["metrics_summary"]["total_requests"] > 0
    
    def test_middleware_error_handling_integration(self, integrated_app):
        """Test gestion d'erreur dans les middlewares"""
        with TestClient(integrated_app) as client:
            response = client.get("/api/v1/test/validation-error")
            
            assert response.status_code == 422
            
            # MÃªme en cas d'erreur, les middlewares devraient fonctionner
            assert "X-Request-ID" in response.headers
            
            # Les mÃ©triques d'erreur devraient Ãªtre collectÃ©es
            monitoring_response = client.get("/api/v1/test/monitoring")
            monitoring_data = monitoring_response.json()
            assert monitoring_data["data"]["metrics_summary"]["total_errors"] > 0


# =============================================================================
# TESTS D'INTÃ‰GRATION AVANCÃ‰S
# =============================================================================

class TestAdvancedIntegration:
    """Tests d'intÃ©gration avancÃ©s"""
    
    def test_configuration_hot_reload_integration(self, integrated_app, integration_config):
        """Test rechargement Ã  chaud de la configuration"""
        with TestClient(integrated_app) as client:
            # RequÃªte initiale
            response1 = client.get("/api/v1/test/success")
            assert response1.status_code == 200
            
            # Modifier la configuration (simulation)
            # En pratique, cela nÃ©cessiterait un mÃ©canisme de rechargement
            
            # Nouvelle requÃªte
            response2 = client.get("/api/v1/test/success")
            assert response2.status_code == 200
    
    def test_graceful_degradation_integration(self, integrated_app):
        """Test dÃ©gradation gracieuse"""
        with TestClient(integrated_app) as client:
            # Simuler la panne d'un service non critique
            # (Par exemple, le monitoring)
            
            # L'application devrait continuer Ã  fonctionner
            response = client.get("/api/v1/test/success")
            assert response.status_code == 200
    
    def test_metrics_aggregation_integration(self, integrated_app):
        """Test agrÃ©gation des mÃ©triques"""
        with TestClient(integrated_app) as client:
            # Faire diffÃ©rents types de requÃªtes
            client.get("/api/v1/test/success")  # SuccÃ¨s
            client.get("/api/v1/test/validation-error")  # Erreur validation
            client.get("/api/v1/test/api-error")  # Erreur API
            
            # RÃ©cupÃ©rer les mÃ©triques agrÃ©gÃ©es
            response = client.get("/api/v1/test/monitoring")
            data = response.json()
            
            metrics = data["data"]["metrics_summary"]
            
            # VÃ©rifier que tous les types d'Ã©vÃ©nements sont comptabilisÃ©s
            assert metrics["total_requests"] >= 3
            assert metrics["total_errors"] >= 2  # 2 erreurs
    
    @pytest.mark.asyncio
    async def test_async_integration(self, integrated_app):
        """Test intÃ©gration asynchrone"""
        # Test avec des opÃ©rations asynchrones
        
        async def async_test():
            # Simuler des opÃ©rations async
            await asyncio.sleep(0.01)
            return True
        
        result = await async_test()
        assert result is True
        
        # Tester l'app avec des requÃªtes async
        with TestClient(integrated_app) as client:
            response = client.get("/api/v1/test/success")
            assert response.status_code == 200


# =============================================================================
# TESTS D'INTÃ‰GRATION E2E
# =============================================================================

@pytest.mark.e2e
class TestEndToEndIntegration:
    """Tests d'intÃ©gration end-to-end"""
    
    def test_complete_request_lifecycle(self, integrated_app):
        """Test cycle de vie complet d'une requÃªte"""
        with TestClient(integrated_app) as client:
            # 1. RequÃªte initiale
            response = client.get("/api/v1/test/success")
            
            # 2. VÃ©rifier la rÃ©ponse
            assert response.status_code == 200
            data = response.json()
            
            # 3. VÃ©rifier la structure complÃ¨te
            assert data["success"] is True
            assert "data" in data
            assert "metadata" in data
            
            # 4. VÃ©rifier les headers
            assert "X-Request-ID" in response.headers
            assert "Content-Type" in response.headers
            
            # 5. VÃ©rifier les mÃ©triques
            monitoring_response = client.get("/api/v1/test/monitoring")
            monitoring_data = monitoring_response.json()
            
            assert monitoring_data["success"] is True
            assert monitoring_data["data"]["metrics_summary"]["total_requests"] > 0
    
    def test_error_to_recovery_flow(self, integrated_app):
        """Test flux d'erreur vers rÃ©cupÃ©ration"""
        with TestClient(integrated_app) as client:
            # 1. DÃ©clencher une erreur
            error_response = client.get("/api/v1/test/api-error")
            assert error_response.status_code == 500
            
            # 2. VÃ©rifier que l'erreur est bien gÃ©rÃ©e
            error_data = error_response.json()
            assert error_data["success"] is False
            
            # 3. Faire une requÃªte de rÃ©cupÃ©ration
            recovery_response = client.get("/api/v1/test/success")
            assert recovery_response.status_code == 200
            
            # 4. VÃ©rifier que le systÃ¨me fonctionne normalement
            recovery_data = recovery_response.json()
            assert recovery_data["success"] is True
            
            # 5. VÃ©rifier les mÃ©triques des deux types de requÃªtes
            monitoring_response = client.get("/api/v1/test/monitoring")
            monitoring_data = monitoring_response.json()
            
            metrics = monitoring_data["data"]["metrics_summary"]
            assert metrics["total_requests"] >= 3  # error + success + monitoring
            assert metrics["total_errors"] >= 1    # L'erreur API
    
    def test_load_and_monitoring_integration(self, integrated_app):
        """Test intÃ©gration charge et monitoring"""
        with TestClient(integrated_app) as client:
            # 1. GÃ©nÃ©rer de la charge
            for i in range(20):
                if i % 4 == 0:
                    # Quelques erreurs occasionnelles
                    client.get("/api/v1/test/validation-error")
                else:
                    # Principalement des succÃ¨s
                    client.get("/api/v1/test/success")
            
            # 2. VÃ©rifier les mÃ©triques finales
            response = client.get("/api/v1/test/monitoring")
            data = response.json()
            
            metrics = data["data"]["metrics_summary"]
            
            # 3. Valider les ratios
            total_requests = metrics["total_requests"]
            total_errors = metrics["total_errors"]
            
            assert total_requests >= 20
            assert total_errors >= 5  # ~25% d'erreurs
            
            # 4. VÃ©rifier la santÃ© du systÃ¨me
            health_summary = data["data"]["health_summary"]
            # Le systÃ¨me devrait encore Ãªtre sain malgrÃ© les erreurs
            assert "overall_status" in health_summary
